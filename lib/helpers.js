'use strict';

var _ = require('lodash');
var chalk = require('chalk');

var helpers = {

  // Pick off the attributes from only the current layer of the object.
  skim: function skim(data) {
    return _.map(data, function (obj) {
      return _.pick(obj, _.keys(obj));
    });
  },

  // Check if the first argument is an array, otherwise
  // uses all arguments as an array.
  normalizeArr: function normalizeArr() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    if (Array.isArray(args[0])) {
      return args[0];
    }
    return args;
  },

  error: function error(msg) {
    console.log(chalk.red('Knex:Error ' + msg));
  },

  // Used to signify deprecated functionality.
  deprecate: function deprecate(method, alternate) {
    helpers.warn(method + ' is deprecated, please use ' + alternate);
  },

  // Used to warn about incorrect use, without error'ing
  warn: function warn(msg) {
    console.log(chalk.yellow("Knex:warning - " + msg));
  },

  exit: function exit(msg) {
    console.log(chalk.red(msg));
    process.exit();
  }

};

module.exports = helpers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsSUFBSSxDQUFDLEdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQzdCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTs7QUFFNUIsSUFBSSxPQUFPLEdBQUc7OztBQUdaLE1BQUksRUFBRSxjQUFTLElBQUksRUFBRTtBQUNuQixXQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFVBQVMsR0FBRyxFQUFFO0FBQy9CLGFBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2pDLENBQUMsQ0FBQztHQUNKOzs7O0FBSUQsY0FBWSxFQUFFLHdCQUFXO0FBQ3ZCLFFBQUksSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2QyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNwQyxVQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hCO0FBQ0QsUUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQzFCLGFBQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2hCO0FBQ0QsV0FBTyxJQUFJLENBQUM7R0FDYjs7QUFFRCxPQUFLLEVBQUUsZUFBUyxHQUFHLEVBQUU7QUFDbkIsV0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO0dBQzVDOzs7QUFHRCxXQUFTLEVBQUUsbUJBQVMsTUFBTSxFQUFFLFNBQVMsRUFBRTtBQUNyQyxXQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyw2QkFBNkIsR0FBRyxTQUFTLENBQUMsQ0FBQztHQUNsRTs7O0FBR0QsTUFBSSxFQUFFLGNBQVMsR0FBRyxFQUFFO0FBQ2xCLFdBQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO0dBQ25EOztBQUVELE1BQUksRUFBRSxjQUFTLEdBQUcsRUFBRTtBQUNsQixXQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUMzQixXQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7R0FDZjs7Q0FFRixDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDIiwiZmlsZSI6ImhlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBfICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpXG52YXIgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpXG5cbnZhciBoZWxwZXJzID0ge1xuXG4gIC8vIFBpY2sgb2ZmIHRoZSBhdHRyaWJ1dGVzIGZyb20gb25seSB0aGUgY3VycmVudCBsYXllciBvZiB0aGUgb2JqZWN0LlxuICBza2ltOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIF8ubWFwKGRhdGEsIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIF8ucGljayhvYmosIF8ua2V5cyhvYmopKTtcbiAgICB9KTtcbiAgfSxcblxuICAvLyBDaGVjayBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYW4gYXJyYXksIG90aGVyd2lzZVxuICAvLyB1c2VzIGFsbCBhcmd1bWVudHMgYXMgYW4gYXJyYXkuXG4gIG5vcm1hbGl6ZUFycjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgcmV0dXJuIGFyZ3NbMF07XG4gICAgfVxuICAgIHJldHVybiBhcmdzO1xuICB9LFxuXG4gIGVycm9yOiBmdW5jdGlvbihtc2cpIHtcbiAgICBjb25zb2xlLmxvZyhjaGFsay5yZWQoJ0tuZXg6RXJyb3IgJyArIG1zZykpXG4gIH0sXG5cbiAgLy8gVXNlZCB0byBzaWduaWZ5IGRlcHJlY2F0ZWQgZnVuY3Rpb25hbGl0eS5cbiAgZGVwcmVjYXRlOiBmdW5jdGlvbihtZXRob2QsIGFsdGVybmF0ZSkge1xuICAgIGhlbHBlcnMud2FybihtZXRob2QgKyAnIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgJyArIGFsdGVybmF0ZSk7XG4gIH0sXG5cbiAgLy8gVXNlZCB0byB3YXJuIGFib3V0IGluY29ycmVjdCB1c2UsIHdpdGhvdXQgZXJyb3InaW5nXG4gIHdhcm46IGZ1bmN0aW9uKG1zZykge1xuICAgIGNvbnNvbGUubG9nKGNoYWxrLnllbGxvdyhcIktuZXg6d2FybmluZyAtIFwiICsgbXNnKSlcbiAgfSxcblxuICBleGl0OiBmdW5jdGlvbihtc2cpIHtcbiAgICBjb25zb2xlLmxvZyhjaGFsay5yZWQobXNnKSlcbiAgICBwcm9jZXNzLmV4aXQoKVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaGVscGVyczsiXX0=