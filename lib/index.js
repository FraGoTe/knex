'use strict';

var Raw = require('./raw');
var warn = require('./helpers').warn;
var Client = require('./client');

var makeClient = require('./util/make-client');
var makeKnex = require('./util/make-knex');
var parseConnection = require('./util/parse-connection');
var assign = require('lodash/object/assign');

function Knex(config) {
  if (typeof config === 'string') {
    return new Knex(assign(parseConnection(config), arguments[2]));
  }
  var Dialect;
  if (arguments.length === 0 || !config.client && !config.dialect) {
    Dialect = makeClient(Client);
  } else {
    var clientName = config.client || config.dialect;
    Dialect = makeClient(require('./dialects/' + (aliases[clientName] || clientName) + '/index.js'));
  }
  if (typeof config.connection === 'string') {
    config = assign({}, config, { connection: parseConnection(config.connection).connection });
  }
  return makeKnex(new Dialect(config));
}

// Expose Client on the main Knex namespace.
Knex.Client = Client;

// Run a "raw" query, though we can't do anything with it other than put
// it in a query statement.
Knex.raw = function (sql, bindings) {
  return new Raw({}).set(sql, bindings);
};

// Create a new "knex" instance with the appropriate configured client.
Knex.initialize = function (config) {
  warn('knex.initialize is deprecated, pass your config object directly to the knex module');
  return new Knex(config);
};

// Bluebird
Knex.Promise = require('./promise');

// The client names we'll allow in the `{name: lib}` pairing.
var aliases = {
  'mariadb': 'maria',
  'mariasql': 'maria',
  'pg': 'postgres',
  'postgresql': 'postgres',
  'sqlite': 'sqlite3'
};

// Doing this ensures Browserify works. Still need to figure out
// the best way to do some of this.
if (process.browser) {
  require('./dialects/websql/index.js');
}

module.exports = Knex;
//# sourceMappingURL=data:application/json;base64,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ICAgICAgICAgICAgPSByZXF1aXJlKCcuL3JhdycpXG52YXIgd2FybiAgICAgICAgICAgPSByZXF1aXJlKCcuL2hlbHBlcnMnKS53YXJuXG52YXIgQ2xpZW50ICAgICAgICAgPSByZXF1aXJlKCcuL2NsaWVudCcpXG5cbnZhciBtYWtlQ2xpZW50ICAgICAgPSByZXF1aXJlKCcuL3V0aWwvbWFrZS1jbGllbnQnKVxudmFyIG1ha2VLbmV4ICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbC9tYWtlLWtuZXgnKVxudmFyIHBhcnNlQ29ubmVjdGlvbiA9IHJlcXVpcmUoJy4vdXRpbC9wYXJzZS1jb25uZWN0aW9uJylcbnZhciBhc3NpZ24gICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gvb2JqZWN0L2Fzc2lnbicpXG5cbmZ1bmN0aW9uIEtuZXgoY29uZmlnKSB7XG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBuZXcgS25leChhc3NpZ24ocGFyc2VDb25uZWN0aW9uKGNvbmZpZyksIGFyZ3VtZW50c1syXSkpXG4gIH1cbiAgdmFyIERpYWxlY3Q7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8ICghY29uZmlnLmNsaWVudCAmJiAhY29uZmlnLmRpYWxlY3QpKSB7XG4gICAgRGlhbGVjdCA9IG1ha2VDbGllbnQoQ2xpZW50KVxuICB9IGVsc2Uge1xuICAgIHZhciBjbGllbnROYW1lID0gY29uZmlnLmNsaWVudCB8fCBjb25maWcuZGlhbGVjdFxuICAgIERpYWxlY3QgPSBtYWtlQ2xpZW50KHJlcXVpcmUoJy4vZGlhbGVjdHMvJyArIChhbGlhc2VzW2NsaWVudE5hbWVdIHx8IGNsaWVudE5hbWUpICsgJy9pbmRleC5qcycpKVxuICB9XG4gIGlmICh0eXBlb2YgY29uZmlnLmNvbm5lY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXNzaWduKHt9LCBjb25maWcsIHtjb25uZWN0aW9uOiBwYXJzZUNvbm5lY3Rpb24oY29uZmlnLmNvbm5lY3Rpb24pLmNvbm5lY3Rpb259KVxuICB9XG4gIHJldHVybiBtYWtlS25leChuZXcgRGlhbGVjdChjb25maWcpKVxufVxuXG4vLyBFeHBvc2UgQ2xpZW50IG9uIHRoZSBtYWluIEtuZXggbmFtZXNwYWNlLlxuS25leC5DbGllbnQgPSBDbGllbnRcblxuLy8gUnVuIGEgXCJyYXdcIiBxdWVyeSwgdGhvdWdoIHdlIGNhbid0IGRvIGFueXRoaW5nIHdpdGggaXQgb3RoZXIgdGhhbiBwdXRcbi8vIGl0IGluIGEgcXVlcnkgc3RhdGVtZW50LlxuS25leC5yYXcgPSBmdW5jdGlvbihzcWwsIGJpbmRpbmdzKSB7XG4gIHJldHVybiBuZXcgUmF3KHt9KS5zZXQoc3FsLCBiaW5kaW5ncylcbn1cblxuLy8gQ3JlYXRlIGEgbmV3IFwia25leFwiIGluc3RhbmNlIHdpdGggdGhlIGFwcHJvcHJpYXRlIGNvbmZpZ3VyZWQgY2xpZW50LlxuS25leC5pbml0aWFsaXplID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gIHdhcm4oJ2tuZXguaW5pdGlhbGl6ZSBpcyBkZXByZWNhdGVkLCBwYXNzIHlvdXIgY29uZmlnIG9iamVjdCBkaXJlY3RseSB0byB0aGUga25leCBtb2R1bGUnKVxuICByZXR1cm4gbmV3IEtuZXgoY29uZmlnKVxufVxuXG4vLyBCbHVlYmlyZFxuS25leC5Qcm9taXNlID0gcmVxdWlyZSgnLi9wcm9taXNlJylcblxuLy8gVGhlIGNsaWVudCBuYW1lcyB3ZSdsbCBhbGxvdyBpbiB0aGUgYHtuYW1lOiBsaWJ9YCBwYWlyaW5nLlxudmFyIGFsaWFzZXMgPSB7XG4gICdtYXJpYWRiJyAgIDogJ21hcmlhJyxcbiAgJ21hcmlhc3FsJyAgOiAnbWFyaWEnLFxuICAncGcnICAgICAgICA6ICdwb3N0Z3JlcycsXG4gICdwb3N0Z3Jlc3FsJzogJ3Bvc3RncmVzJyxcbiAgJ3NxbGl0ZScgICAgOiAnc3FsaXRlMydcbn07XG5cbi8vIERvaW5nIHRoaXMgZW5zdXJlcyBCcm93c2VyaWZ5IHdvcmtzLiBTdGlsbCBuZWVkIHRvIGZpZ3VyZSBvdXQgXG4vLyB0aGUgYmVzdCB3YXkgdG8gZG8gc29tZSBvZiB0aGlzLlxuaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICByZXF1aXJlKCcuL2RpYWxlY3RzL3dlYnNxbC9pbmRleC5qcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gS25leFxuIl19