'use strict';

exports.__esModule = true;
exports['default'] = parseConnectionString;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _pgConnectionString = require('pg-connection-string');

function parseConnectionString(str) {
  var parsed = _url2['default'].parse(str);
  var protocol = parsed.protocol;
  if (protocol && protocol.indexOf('maria') === 0) {
    protocol = 'maria';
  }
  if (protocol === null) {
    return {
      client: 'sqlite3',
      connection: {
        filename: str
      }
    };
  }
  if (protocol.slice(-1) === ':') {
    protocol = protocol.slice(0, -1);
  }
  return {
    client: protocol,
    connection: protocol === 'postgres' ? _pgConnectionString.parse(str) : connectionObject(parsed)
  };
}

function connectionObject(parsed) {
  var connection = {};
  var db = parsed.pathname;
  if (db[0] === '/') {
    db = db.slice(1);
  }
  if (parsed.protocol.indexOf('maria') === 0) {
    connection.db = db;
  } else {
    connection.database = db;
  }
  if (parsed.hostname) {
    connection.host = parsed.hostname;
  }
  if (parsed.port) {
    connection.port = parsed.port;
  }
  if (parsed.auth) {
    var idx = parsed.auth.indexOf(':');
    if (idx !== -1) {
      connection.user = parsed.auth.slice(0, idx);
      if (idx < parsed.auth.length - 1) {
        connection.password = parsed.auth.slice(idx + 1);
      }
    }
  }
  return connection;
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3BhcnNlLWNvbm5lY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O3FCQUl3QixxQkFBcUI7Ozs7bUJBSDdCLEtBQUs7Ozs7a0NBQ1Usc0JBQXNCOztBQUV0QyxTQUFTLHFCQUFxQixDQUFDLEdBQUcsRUFBRTtBQUNqRCxNQUFJLE1BQU0sR0FBSyxpQkFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDN0IsTUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQTtBQUM5QixNQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMvQyxZQUFRLEdBQUcsT0FBTyxDQUFBO0dBQ25CO0FBQ0QsTUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO0FBQ3JCLFdBQU87QUFDTCxZQUFNLEVBQUUsU0FBUztBQUNqQixnQkFBVSxFQUFFO0FBQ1YsZ0JBQVEsRUFBRSxHQUFHO09BQ2Q7S0FDRixDQUFBO0dBQ0Y7QUFDRCxNQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7QUFDOUIsWUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDbEM7QUFDRCxTQUFPO0FBQ0wsVUFBTSxFQUFFLFFBQVE7QUFDaEIsY0FBVSxFQUFFLFFBQVEsS0FBSyxVQUFVLEdBQUcsMEJBQVEsR0FBRyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDO0dBQzlFLENBQUE7Q0FDRjs7QUFFRCxTQUFTLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtBQUNoQyxNQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDcEIsTUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUN6QixNQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7QUFDakIsTUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FDakI7QUFDRCxNQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQyxjQUFVLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQTtHQUNuQixNQUFNO0FBQ0wsY0FBVSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUE7R0FDekI7QUFDRCxNQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7QUFDbkIsY0FBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0dBQ25DO0FBQ0QsTUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0FBQ2YsY0FBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0dBQy9CO0FBQ0QsTUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0FBQ2YsUUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkMsUUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDZCxnQkFBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDNUMsVUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ2hDLGtCQUFVLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztPQUNsRDtLQUNGO0dBQ0Y7QUFDRCxTQUFPLFVBQVUsQ0FBQTtDQUNsQiIsImZpbGUiOiJwYXJzZS1jb25uZWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgdXJsIGZyb20gJ3VybCdcbmltcG9ydCB7cGFyc2UgYXMgcGFyc2VQR30gZnJvbSAncGctY29ubmVjdGlvbi1zdHJpbmcnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlQ29ubmVjdGlvblN0cmluZyhzdHIpIHtcbiAgdmFyIHBhcnNlZCAgID0gdXJsLnBhcnNlKHN0cilcbiAgdmFyIHByb3RvY29sID0gcGFyc2VkLnByb3RvY29sXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5pbmRleE9mKCdtYXJpYScpID09PSAwKSB7XG4gICAgcHJvdG9jb2wgPSAnbWFyaWEnXG4gIH1cbiAgaWYgKHByb3RvY29sID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsaWVudDogJ3NxbGl0ZTMnLFxuICAgICAgY29ubmVjdGlvbjoge1xuICAgICAgICBmaWxlbmFtZTogc3RyXG4gICAgICB9XG4gICAgfSAgXG4gIH1cbiAgaWYgKHByb3RvY29sLnNsaWNlKC0xKSA9PT0gJzonKSB7XG4gICAgcHJvdG9jb2wgPSBwcm90b2NvbC5zbGljZSgwLCAtMSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjbGllbnQ6IHByb3RvY29sLFxuICAgIGNvbm5lY3Rpb246IHByb3RvY29sID09PSAncG9zdGdyZXMnID8gcGFyc2VQRyhzdHIpIDogY29ubmVjdGlvbk9iamVjdChwYXJzZWQpXG4gIH0gIFxufVxuXG5mdW5jdGlvbiBjb25uZWN0aW9uT2JqZWN0KHBhcnNlZCkge1xuICB2YXIgY29ubmVjdGlvbiA9IHt9O1xuICB2YXIgZGIgPSBwYXJzZWQucGF0aG5hbWU7XG4gIGlmIChkYlswXSA9PT0gJy8nKSB7XG4gICAgZGIgPSBkYi5zbGljZSgxKVxuICB9XG4gIGlmIChwYXJzZWQucHJvdG9jb2wuaW5kZXhPZignbWFyaWEnKSA9PT0gMCkge1xuICAgIGNvbm5lY3Rpb24uZGIgPSBkYlxuICB9IGVsc2Uge1xuICAgIGNvbm5lY3Rpb24uZGF0YWJhc2UgPSBkYlxuICB9XG4gIGlmIChwYXJzZWQuaG9zdG5hbWUpIHtcbiAgICBjb25uZWN0aW9uLmhvc3QgPSBwYXJzZWQuaG9zdG5hbWU7XG4gIH1cbiAgaWYgKHBhcnNlZC5wb3J0KSB7XG4gICAgY29ubmVjdGlvbi5wb3J0ID0gcGFyc2VkLnBvcnQ7XG4gIH1cbiAgaWYgKHBhcnNlZC5hdXRoKSB7XG4gICAgdmFyIGlkeCA9IHBhcnNlZC5hdXRoLmluZGV4T2YoJzonKTtcbiAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgY29ubmVjdGlvbi51c2VyID0gcGFyc2VkLmF1dGguc2xpY2UoMCwgaWR4KTtcbiAgICAgIGlmIChpZHggPCBwYXJzZWQuYXV0aC5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNvbm5lY3Rpb24ucGFzc3dvcmQgPSBwYXJzZWQuYXV0aC5zbGljZShpZHggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbm5lY3Rpb25cbn0iXX0=