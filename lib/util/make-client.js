'use strict';

var assign = require('lodash/object/assign');
var inherits = require('inherits');

// Ensure the client has fresh objects so we can tack onto
// the prototypes without mutating them globally.
module.exports = function makeClient(ParentClient) {

  if (typeof ParentClient.prototype === 'undefined') {
    throw new Error('A valid parent client must be passed to makeClient');
  }

  function Client(config) {
    ParentClient.call(this, config);
  }
  inherits(Client, ParentClient);

  function Formatter(client) {
    Formatter.super_.call(this, client);
  }
  inherits(Formatter, ParentClient.prototype.Formatter);

  function QueryBuilder(client) {
    QueryBuilder.super_.call(this, client);
  }
  inherits(QueryBuilder, ParentClient.prototype.QueryBuilder);

  function SchemaBuilder(client) {
    SchemaBuilder.super_.call(this, client);
  }
  inherits(SchemaBuilder, ParentClient.prototype.SchemaBuilder);

  function SchemaCompiler(client, builder) {
    SchemaCompiler.super_.call(this, client, builder);
  }
  inherits(SchemaCompiler, ParentClient.prototype.SchemaCompiler);

  function TableBuilder(client, method, tableName, fn) {
    TableBuilder.super_.call(this, client, method, tableName, fn);
  }
  inherits(TableBuilder, ParentClient.prototype.TableBuilder);

  function TableCompiler(client, tableBuilder) {
    TableCompiler.super_.call(this, client, tableBuilder);
  }
  inherits(TableCompiler, ParentClient.prototype.TableCompiler);

  function ColumnBuilder(client, tableBuilder, type, args) {
    ColumnBuilder.super_.call(this, client, tableBuilder, type, args);
  }
  inherits(ColumnBuilder, ParentClient.prototype.ColumnBuilder);

  function ColumnCompiler(client, tableCompiler, columnBuilder) {
    ColumnCompiler.super_.call(this, client, tableCompiler, columnBuilder);
  }
  inherits(ColumnCompiler, ParentClient.prototype.ColumnCompiler);

  assign(Client.prototype, {
    Formatter: Formatter,
    QueryBuilder: QueryBuilder,
    SchemaBuilder: SchemaBuilder,
    SchemaCompiler: SchemaCompiler,
    TableBuilder: TableBuilder,
    TableCompiler: TableCompiler,
    ColumnBuilder: ColumnBuilder,
    ColumnCompiler: ColumnCompiler
  });

  return Client;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL21ha2UtY2xpZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsSUFBSSxNQUFNLEdBQUssT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDL0MsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBOzs7O0FBSWxDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxVQUFVLENBQUMsWUFBWSxFQUFFOztBQUVqRCxNQUFJLE9BQU8sWUFBWSxDQUFDLFNBQVMsS0FBSyxXQUFXLEVBQUU7QUFDakQsVUFBTSxJQUFJLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFBO0dBQ3RFOztBQUVELFdBQVMsTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUN0QixnQkFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7R0FDaEM7QUFDRCxVQUFRLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFBOztBQUU5QixXQUFTLFNBQVMsQ0FBQyxNQUFNLEVBQUU7QUFDekIsYUFBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0dBQ3BDO0FBQ0QsVUFBUSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBOztBQUVyRCxXQUFTLFlBQVksQ0FBQyxNQUFNLEVBQUU7QUFDNUIsZ0JBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtHQUN2QztBQUNELFVBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQTs7QUFFM0QsV0FBUyxhQUFhLENBQUMsTUFBTSxFQUFFO0FBQzdCLGlCQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7R0FDeEM7QUFDRCxVQUFRLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUE7O0FBRTdELFdBQVMsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUU7QUFDdkMsa0JBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUE7R0FDbEQ7QUFDRCxVQUFRLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUE7O0FBRS9ELFdBQVMsWUFBWSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRTtBQUNuRCxnQkFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0dBQzlEO0FBQ0QsVUFBUSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFBOztBQUUzRCxXQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFO0FBQzNDLGlCQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFBO0dBQ3REO0FBQ0QsVUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFBOztBQUU3RCxXQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDdkQsaUJBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtHQUNsRTtBQUNELFVBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQTs7QUFFN0QsV0FBUyxjQUFjLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUU7QUFDNUQsa0JBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFBO0dBQ3ZFO0FBQ0QsVUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFBOztBQUUvRCxRQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtBQUN2QixhQUFTLEVBQU8sU0FBUztBQUN6QixnQkFBWSxFQUFJLFlBQVk7QUFDNUIsaUJBQWEsRUFBRyxhQUFhO0FBQzdCLGtCQUFjLEVBQUUsY0FBYztBQUM5QixnQkFBWSxFQUFJLFlBQVk7QUFDNUIsaUJBQWEsRUFBRyxhQUFhO0FBQzdCLGlCQUFhLEVBQUcsYUFBYTtBQUM3QixrQkFBYyxFQUFFLGNBQWM7R0FDL0IsQ0FBQyxDQUFBOztBQUVGLFNBQU8sTUFBTSxDQUFBO0NBQ2QsQ0FBQSIsImZpbGUiOiJtYWtlLWNsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGFzc2lnbiAgID0gcmVxdWlyZSgnbG9kYXNoL29iamVjdC9hc3NpZ24nKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuLy8gRW5zdXJlIHRoZSBjbGllbnQgaGFzIGZyZXNoIG9iamVjdHMgc28gd2UgY2FuIHRhY2sgb250byBcbi8vIHRoZSBwcm90b3R5cGVzIHdpdGhvdXQgbXV0YXRpbmcgdGhlbSBnbG9iYWxseS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWFrZUNsaWVudChQYXJlbnRDbGllbnQpIHtcblxuICBpZiAodHlwZW9mIFBhcmVudENsaWVudC5wcm90b3R5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBIHZhbGlkIHBhcmVudCBjbGllbnQgbXVzdCBiZSBwYXNzZWQgdG8gbWFrZUNsaWVudCcpXG4gIH1cblxuICBmdW5jdGlvbiBDbGllbnQoY29uZmlnKSB7XG4gICAgUGFyZW50Q2xpZW50LmNhbGwodGhpcywgY29uZmlnKVxuICB9XG4gIGluaGVyaXRzKENsaWVudCwgUGFyZW50Q2xpZW50KVxuICBcbiAgZnVuY3Rpb24gRm9ybWF0dGVyKGNsaWVudCkge1xuICAgIEZvcm1hdHRlci5zdXBlcl8uY2FsbCh0aGlzLCBjbGllbnQpXG4gIH1cbiAgaW5oZXJpdHMoRm9ybWF0dGVyLCBQYXJlbnRDbGllbnQucHJvdG90eXBlLkZvcm1hdHRlcilcbiAgXG4gIGZ1bmN0aW9uIFF1ZXJ5QnVpbGRlcihjbGllbnQpIHtcbiAgICBRdWVyeUJ1aWxkZXIuc3VwZXJfLmNhbGwodGhpcywgY2xpZW50KVxuICB9XG4gIGluaGVyaXRzKFF1ZXJ5QnVpbGRlciwgUGFyZW50Q2xpZW50LnByb3RvdHlwZS5RdWVyeUJ1aWxkZXIpXG5cbiAgZnVuY3Rpb24gU2NoZW1hQnVpbGRlcihjbGllbnQpIHtcbiAgICBTY2hlbWFCdWlsZGVyLnN1cGVyXy5jYWxsKHRoaXMsIGNsaWVudClcbiAgfVxuICBpbmhlcml0cyhTY2hlbWFCdWlsZGVyLCBQYXJlbnRDbGllbnQucHJvdG90eXBlLlNjaGVtYUJ1aWxkZXIpXG5cbiAgZnVuY3Rpb24gU2NoZW1hQ29tcGlsZXIoY2xpZW50LCBidWlsZGVyKSB7XG4gICAgU2NoZW1hQ29tcGlsZXIuc3VwZXJfLmNhbGwodGhpcywgY2xpZW50LCBidWlsZGVyKVxuICB9XG4gIGluaGVyaXRzKFNjaGVtYUNvbXBpbGVyLCBQYXJlbnRDbGllbnQucHJvdG90eXBlLlNjaGVtYUNvbXBpbGVyKVxuXG4gIGZ1bmN0aW9uIFRhYmxlQnVpbGRlcihjbGllbnQsIG1ldGhvZCwgdGFibGVOYW1lLCBmbikge1xuICAgIFRhYmxlQnVpbGRlci5zdXBlcl8uY2FsbCh0aGlzLCBjbGllbnQsIG1ldGhvZCwgdGFibGVOYW1lLCBmbilcbiAgfVxuICBpbmhlcml0cyhUYWJsZUJ1aWxkZXIsIFBhcmVudENsaWVudC5wcm90b3R5cGUuVGFibGVCdWlsZGVyKVxuXG4gIGZ1bmN0aW9uIFRhYmxlQ29tcGlsZXIoY2xpZW50LCB0YWJsZUJ1aWxkZXIpIHtcbiAgICBUYWJsZUNvbXBpbGVyLnN1cGVyXy5jYWxsKHRoaXMsIGNsaWVudCwgdGFibGVCdWlsZGVyKVxuICB9XG4gIGluaGVyaXRzKFRhYmxlQ29tcGlsZXIsIFBhcmVudENsaWVudC5wcm90b3R5cGUuVGFibGVDb21waWxlcilcblxuICBmdW5jdGlvbiBDb2x1bW5CdWlsZGVyKGNsaWVudCwgdGFibGVCdWlsZGVyLCB0eXBlLCBhcmdzKSB7XG4gICAgQ29sdW1uQnVpbGRlci5zdXBlcl8uY2FsbCh0aGlzLCBjbGllbnQsIHRhYmxlQnVpbGRlciwgdHlwZSwgYXJncylcbiAgfVxuICBpbmhlcml0cyhDb2x1bW5CdWlsZGVyLCBQYXJlbnRDbGllbnQucHJvdG90eXBlLkNvbHVtbkJ1aWxkZXIpXG5cbiAgZnVuY3Rpb24gQ29sdW1uQ29tcGlsZXIoY2xpZW50LCB0YWJsZUNvbXBpbGVyLCBjb2x1bW5CdWlsZGVyKSB7XG4gICAgQ29sdW1uQ29tcGlsZXIuc3VwZXJfLmNhbGwodGhpcywgY2xpZW50LCB0YWJsZUNvbXBpbGVyLCBjb2x1bW5CdWlsZGVyKVxuICB9XG4gIGluaGVyaXRzKENvbHVtbkNvbXBpbGVyLCBQYXJlbnRDbGllbnQucHJvdG90eXBlLkNvbHVtbkNvbXBpbGVyKVxuXG4gIGFzc2lnbihDbGllbnQucHJvdG90eXBlLCB7XG4gICAgRm9ybWF0dGVyOiAgICAgIEZvcm1hdHRlcixcbiAgICBRdWVyeUJ1aWxkZXI6ICAgUXVlcnlCdWlsZGVyLFxuICAgIFNjaGVtYUJ1aWxkZXI6ICBTY2hlbWFCdWlsZGVyLFxuICAgIFNjaGVtYUNvbXBpbGVyOiBTY2hlbWFDb21waWxlcixcbiAgICBUYWJsZUJ1aWxkZXI6ICAgVGFibGVCdWlsZGVyLFxuICAgIFRhYmxlQ29tcGlsZXI6ICBUYWJsZUNvbXBpbGVyLFxuICAgIENvbHVtbkJ1aWxkZXI6ICBDb2x1bW5CdWlsZGVyLFxuICAgIENvbHVtbkNvbXBpbGVyOiBDb2x1bW5Db21waWxlclxuICB9KVxuXG4gIHJldHVybiBDbGllbnRcbn0iXX0=