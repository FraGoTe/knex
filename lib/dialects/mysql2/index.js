
// MySQL2 Client
// -------
'use strict';

var inherits = require('inherits');
var Client_MySQL = require('../mysql');
var Promise = require('../../promise');
var helpers = require('../../helpers');
var pick = require('lodash/object/pick');
var pluck = require('lodash/collection/pluck');
var assign = require('lodash/object/assign');
var Transaction = require('./transaction');

var configOptions = ['user', 'database', 'host', 'password', 'port', 'ssl', 'connection', 'compress', 'stream'];

// Always initialize with the "QueryBuilder" and "QueryCompiler"
// objects, which extend the base 'lib/query/builder' and
// 'lib/query/compiler', respectively.
function Client_MySQL2(config) {
  Client_MySQL.call(this, config);
}
inherits(Client_MySQL2, Client_MySQL);

assign(Client_MySQL2.prototype, {

  // The "dialect", for reference elsewhere.
  driverName: 'mysql2',

  Transaction: Transaction,

  _driver: function _driver() {
    return require('mysql2');
  },

  // Get a raw connection, called by the `pool` whenever a new
  // connection needs to be added to the pool.
  acquireRawConnection: function acquireRawConnection() {
    var connection = this.driver.createConnection(pick(this.connectionSettings, configOptions));
    return new Promise(function (resolver, rejecter) {
      connection.connect(function (err) {
        if (err) return rejecter(err);
        resolver(connection);
      });
    });
  },

  processResponse: function processResponse(obj, runner) {
    var response = obj.response;
    var method = obj.method;
    var rows = response[0];
    var fields = response[1];
    if (obj.output) return obj.output.call(runner, rows, fields);
    switch (method) {
      case 'select':
      case 'pluck':
      case 'first':
        var resp = helpers.skim(rows);
        if (method === 'pluck') return pluck(resp, obj.pluck);
        return method === 'first' ? resp[0] : resp;
      case 'insert':
        return [rows.insertId];
      case 'del':
      case 'update':
      case 'counter':
        return rows.affectedRows;
      default:
        return response;
    }
  }

});

module.exports = Client_MySQL2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy9teXNxbDIvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSxJQUFJLFFBQVEsR0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDdEMsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ3RDLElBQUksT0FBTyxHQUFRLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQTtBQUMzQyxJQUFJLE9BQU8sR0FBUSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7QUFDM0MsSUFBSSxJQUFJLEdBQVcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUE7QUFDaEQsSUFBSSxLQUFLLEdBQVUsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUE7QUFDckQsSUFBSSxNQUFNLEdBQVMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDbkQsSUFBSSxXQUFXLEdBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFBOztBQUUzQyxJQUFJLGFBQWEsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFDekQsTUFBTSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDOzs7OztBQUtyRCxTQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUU7QUFDN0IsY0FBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7Q0FDaEM7QUFDRCxRQUFRLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFBOztBQUVyQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRTs7O0FBRzlCLFlBQVUsRUFBRSxRQUFROztBQUVwQixhQUFXLEVBQUUsV0FBVzs7QUFFeEIsU0FBTyxFQUFFLG1CQUFXO0FBQ2xCLFdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0dBQ3pCOzs7O0FBSUQsc0JBQW9CLEVBQUUsZ0NBQVc7QUFDL0IsUUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUE7QUFDM0YsV0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFTLFFBQVEsRUFBRSxRQUFRLEVBQUU7QUFDOUMsZ0JBQVUsQ0FBQyxPQUFPLENBQUMsVUFBUyxHQUFHLEVBQUU7QUFDL0IsWUFBSSxHQUFHLEVBQUUsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDN0IsZ0JBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtPQUNyQixDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSDs7QUFFRCxpQkFBZSxFQUFFLHlCQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFDckMsUUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQTtBQUMzQixRQUFJLE1BQU0sR0FBSyxHQUFHLENBQUMsTUFBTSxDQUFBO0FBQ3pCLFFBQUksSUFBSSxHQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMxQixRQUFJLE1BQU0sR0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUIsUUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUM1RCxZQUFRLE1BQU07QUFDWixXQUFLLFFBQVEsQ0FBQztBQUNkLFdBQUssT0FBTyxDQUFDO0FBQ2IsV0FBSyxPQUFPO0FBQ1YsWUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUM3QixZQUFJLE1BQU0sS0FBSyxPQUFPLEVBQUUsT0FBTyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNyRCxlQUFPLE1BQU0sS0FBSyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQTtBQUFBLEFBQzVDLFdBQUssUUFBUTtBQUNYLGVBQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7QUFBQSxBQUN4QixXQUFLLEtBQUssQ0FBQztBQUNYLFdBQUssUUFBUSxDQUFDO0FBQ2QsV0FBSyxTQUFTO0FBQ1osZUFBTyxJQUFJLENBQUMsWUFBWSxDQUFBO0FBQUEsQUFDMUI7QUFDRSxlQUFPLFFBQVEsQ0FBQTtBQUFBLEtBQ2xCO0dBQ0Y7O0NBRUYsQ0FBQyxDQUFBOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBNeVNRTDIgQ2xpZW50XG4vLyAtLS0tLS0tXG52YXIgaW5oZXJpdHMgICAgID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIENsaWVudF9NeVNRTCA9IHJlcXVpcmUoJy4uL215c3FsJylcbnZhciBQcm9taXNlICAgICAgPSByZXF1aXJlKCcuLi8uLi9wcm9taXNlJylcbnZhciBoZWxwZXJzICAgICAgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzJylcbnZhciBwaWNrICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gvb2JqZWN0L3BpY2snKVxudmFyIHBsdWNrICAgICAgICA9IHJlcXVpcmUoJ2xvZGFzaC9jb2xsZWN0aW9uL3BsdWNrJylcbnZhciBhc3NpZ24gICAgICAgPSByZXF1aXJlKCdsb2Rhc2gvb2JqZWN0L2Fzc2lnbicpO1xudmFyIFRyYW5zYWN0aW9uICA9IHJlcXVpcmUoJy4vdHJhbnNhY3Rpb24nKVxuXG52YXIgY29uZmlnT3B0aW9ucyA9IFsndXNlcicsICdkYXRhYmFzZScsICdob3N0JywgJ3Bhc3N3b3JkJyxcbiAgJ3BvcnQnLCAnc3NsJywgJ2Nvbm5lY3Rpb24nLCAnY29tcHJlc3MnLCAnc3RyZWFtJ107XG5cbi8vIEFsd2F5cyBpbml0aWFsaXplIHdpdGggdGhlIFwiUXVlcnlCdWlsZGVyXCIgYW5kIFwiUXVlcnlDb21waWxlclwiXG4vLyBvYmplY3RzLCB3aGljaCBleHRlbmQgdGhlIGJhc2UgJ2xpYi9xdWVyeS9idWlsZGVyJyBhbmRcbi8vICdsaWIvcXVlcnkvY29tcGlsZXInLCByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiBDbGllbnRfTXlTUUwyKGNvbmZpZykge1xuICBDbGllbnRfTXlTUUwuY2FsbCh0aGlzLCBjb25maWcpXG59XG5pbmhlcml0cyhDbGllbnRfTXlTUUwyLCBDbGllbnRfTXlTUUwpXG5cbmFzc2lnbihDbGllbnRfTXlTUUwyLnByb3RvdHlwZSwge1xuXG4gIC8vIFRoZSBcImRpYWxlY3RcIiwgZm9yIHJlZmVyZW5jZSBlbHNld2hlcmUuXG4gIGRyaXZlck5hbWU6ICdteXNxbDInLFxuXG4gIFRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbixcblxuICBfZHJpdmVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnbXlzcWwyJylcbiAgfSxcblxuICAvLyBHZXQgYSByYXcgY29ubmVjdGlvbiwgY2FsbGVkIGJ5IHRoZSBgcG9vbGAgd2hlbmV2ZXIgYSBuZXdcbiAgLy8gY29ubmVjdGlvbiBuZWVkcyB0byBiZSBhZGRlZCB0byB0aGUgcG9vbC5cbiAgYWNxdWlyZVJhd0Nvbm5lY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy5kcml2ZXIuY3JlYXRlQ29ubmVjdGlvbihwaWNrKHRoaXMuY29ubmVjdGlvblNldHRpbmdzLCBjb25maWdPcHRpb25zKSlcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZXIsIHJlamVjdGVyKSB7XG4gICAgICBjb25uZWN0aW9uLmNvbm5lY3QoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3RlcihlcnIpXG4gICAgICAgIHJlc29sdmVyKGNvbm5lY3Rpb24pXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgcHJvY2Vzc1Jlc3BvbnNlOiBmdW5jdGlvbihvYmosIHJ1bm5lcikge1xuICAgIHZhciByZXNwb25zZSA9IG9iai5yZXNwb25zZVxuICAgIHZhciBtZXRob2QgICA9IG9iai5tZXRob2RcbiAgICB2YXIgcm93cyAgICAgPSByZXNwb25zZVswXVxuICAgIHZhciBmaWVsZHMgICA9IHJlc3BvbnNlWzFdXG4gICAgaWYgKG9iai5vdXRwdXQpIHJldHVybiBvYmoub3V0cHV0LmNhbGwocnVubmVyLCByb3dzLCBmaWVsZHMpXG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBjYXNlICdwbHVjayc6XG4gICAgICBjYXNlICdmaXJzdCc6XG4gICAgICAgIHZhciByZXNwID0gaGVscGVycy5za2ltKHJvd3MpXG4gICAgICAgIGlmIChtZXRob2QgPT09ICdwbHVjaycpIHJldHVybiBwbHVjayhyZXNwLCBvYmoucGx1Y2spXG4gICAgICAgIHJldHVybiBtZXRob2QgPT09ICdmaXJzdCcgPyByZXNwWzBdIDogcmVzcFxuICAgICAgY2FzZSAnaW5zZXJ0JzpcbiAgICAgICAgcmV0dXJuIFtyb3dzLmluc2VydElkXVxuICAgICAgY2FzZSAnZGVsJzpcbiAgICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICBjYXNlICdjb3VudGVyJzpcbiAgICAgICAgcmV0dXJuIHJvd3MuYWZmZWN0ZWRSb3dzXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICB9XG4gIH1cblxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRfTXlTUUwyO1xuIl19