
// MySQL Column Compiler
// -------
'use strict';

var inherits = require('inherits');
var ColumnCompiler = require('../../../schema/columncompiler');
var helpers = require('../../../helpers');
var assign = require('lodash/object/assign');

function ColumnCompiler_MSSQL() {
  ColumnCompiler.apply(this, arguments);
  this.modifiers = ['nullable', 'defaultTo', 'first', 'after', 'comment'];
}
inherits(ColumnCompiler_MSSQL, ColumnCompiler);

// Types
// ------

assign(ColumnCompiler_MSSQL.prototype, {

  increments: 'int identity(1,1) not null primary key',

  bigincrements: 'bigint identity(1,1) not null primary key',

  bigint: 'bigint',

  double: function double(precision, scale) {
    if (!precision) return 'double';
    return 'double(' + this._num(precision, 8) + ', ' + this._num(scale, 2) + ')';
  },

  integer: function integer(length) {
    length = length ? '(' + this._num(length, 11) + ')' : '';
    return 'int' + length;
  },

  mediumint: 'mediumint',

  smallint: 'smallint',

  tinyint: function tinyint(length) {
    length = length ? '(' + this._num(length, 1) + ')' : '';
    return 'tinyint' + length;
  },

  varchar: function varchar(length) {
    return 'nvarchar(' + this._num(length, 255) + ')';
  },

  text: 'nvarchar(max)',

  mediumtext: 'nvarchar(max)',

  longtext: 'nvarchar(max)',

  enu: 'nvarchar(100)',

  uuid: 'uniqueidentifier',

  datetime: 'datetime',

  timestamp: 'datetime',

  bit: function bit(length) {
    return length ? 'bit(' + this._num(length) + ')' : 'bit';
  },

  binary: function binary(length) {
    return length ? 'varbinary(' + this._num(length) + ')' : 'blob';
  },

  bool: 'bit',

  // Modifiers
  // ------

  defaultTo: function defaultTo(value) {
    /*jshint unused: false*/
    var defaultVal = ColumnCompiler_MSSQL.super_.prototype.defaultTo.apply(this, arguments);
    if (this.type !== 'blob' && this.type.indexOf('text') === -1) {
      return defaultVal;
    }
    return '';
  },

  first: function first() {
    return 'first';
  },

  after: function after(column) {
    return 'after ' + this.formatter.wrap(column);
  },

  comment: function comment(_comment) {
    if (_comment && _comment.length > 255) {
      helpers.warn('Your comment is longer than the max comment length for MSSQL');
    }
    return '';
  }

});

module.exports = ColumnCompiler_MSSQL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9tc3NxbC9zY2hlbWEvY29sdW1uY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSxJQUFJLFFBQVEsR0FBUyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDeEMsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUE7QUFDOUQsSUFBSSxPQUFPLEdBQVUsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUE7QUFDaEQsSUFBSSxNQUFNLEdBQVcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7O0FBRXJELFNBQVMsb0JBQW9CLEdBQUc7QUFDOUIsZ0JBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3RDLE1BQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7Q0FDeEU7QUFDRCxRQUFRLENBQUMsb0JBQW9CLEVBQUUsY0FBYyxDQUFDLENBQUM7Ozs7O0FBSy9DLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUU7O0FBRXJDLFlBQVUsRUFBRSx3Q0FBd0M7O0FBRXBELGVBQWEsRUFBRSwyQ0FBMkM7O0FBRTFELFFBQU0sRUFBRSxRQUFROztBQUVoQixRQUFNLEVBQUUsZ0JBQVMsU0FBUyxFQUFFLEtBQUssRUFBRTtBQUNqQyxRQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sUUFBUSxDQUFBO0FBQy9CLFdBQU8sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUE7R0FDOUU7O0FBRUQsU0FBTyxFQUFFLGlCQUFTLE1BQU0sRUFBRTtBQUN4QixVQUFNLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFBO0FBQ3hELFdBQU8sS0FBSyxHQUFHLE1BQU0sQ0FBQTtHQUN0Qjs7QUFFRCxXQUFTLEVBQUUsV0FBVzs7QUFFdEIsVUFBUSxFQUFFLFVBQVU7O0FBRXBCLFNBQU8sRUFBRSxpQkFBUyxNQUFNLEVBQUU7QUFDeEIsVUFBTSxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQTtBQUN2RCxXQUFPLFNBQVMsR0FBRyxNQUFNLENBQUE7R0FDMUI7O0FBRUQsU0FBTyxFQUFFLGlCQUFTLE1BQU0sRUFBRTtBQUN4QixXQUFPLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7R0FDbkQ7O0FBRUQsTUFBSSxFQUFFLGVBQWU7O0FBRXJCLFlBQVUsRUFBRSxlQUFlOztBQUUzQixVQUFRLEVBQUUsZUFBZTs7QUFFekIsS0FBRyxFQUFFLGVBQWU7O0FBRXBCLE1BQUksRUFBRSxrQkFBa0I7O0FBRXhCLFVBQVEsRUFBRSxVQUFVOztBQUVwQixXQUFTLEVBQUUsVUFBVTs7QUFFckIsS0FBRyxFQUFFLGFBQVMsTUFBTSxFQUFFO0FBQ3BCLFdBQU8sTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUE7R0FDekQ7O0FBRUQsUUFBTSxFQUFFLGdCQUFTLE1BQU0sRUFBRTtBQUN2QixXQUFPLE1BQU0sR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFBO0dBQ2hFOztBQUVELE1BQUksRUFBRSxLQUFLOzs7OztBQUtYLFdBQVMsRUFBRSxtQkFBUyxLQUFLLEVBQUU7O0FBRXpCLFFBQUksVUFBVSxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDeEYsUUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUM1RCxhQUFPLFVBQVUsQ0FBQTtLQUNsQjtBQUNELFdBQU8sRUFBRSxDQUFBO0dBQ1Y7O0FBRUQsT0FBSyxFQUFFLGlCQUFXO0FBQ2hCLFdBQU8sT0FBTyxDQUFBO0dBQ2Y7O0FBRUQsT0FBSyxFQUFFLGVBQVMsTUFBTSxFQUFFO0FBQ3RCLFdBQU8sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0dBQzlDOztBQUVELFNBQU8sRUFBRSxpQkFBUyxRQUFPLEVBQUU7QUFDekIsUUFBSSxRQUFPLElBQUksUUFBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7QUFDbkMsYUFBTyxDQUFDLElBQUksQ0FBQyw4REFBOEQsQ0FBQyxDQUFBO0tBQzdFO0FBQ0QsV0FBTyxFQUFFLENBQUE7R0FDVjs7Q0FFRixDQUFDLENBQUE7O0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyIsImZpbGUiOiJjb2x1bW5jb21waWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gTXlTUUwgQ29sdW1uIENvbXBpbGVyXG4vLyAtLS0tLS0tXG52YXIgaW5oZXJpdHMgICAgICAgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgQ29sdW1uQ29tcGlsZXIgPSByZXF1aXJlKCcuLi8uLi8uLi9zY2hlbWEvY29sdW1uY29tcGlsZXInKVxudmFyIGhlbHBlcnMgICAgICAgID0gcmVxdWlyZSgnLi4vLi4vLi4vaGVscGVycycpXG52YXIgYXNzaWduICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gvb2JqZWN0L2Fzc2lnbicpO1xuXG5mdW5jdGlvbiBDb2x1bW5Db21waWxlcl9NU1NRTCgpIHtcbiAgQ29sdW1uQ29tcGlsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdGhpcy5tb2RpZmllcnMgPSBbJ251bGxhYmxlJywgJ2RlZmF1bHRUbycsICdmaXJzdCcsICdhZnRlcicsICdjb21tZW50J11cbn1cbmluaGVyaXRzKENvbHVtbkNvbXBpbGVyX01TU1FMLCBDb2x1bW5Db21waWxlcik7XG5cbi8vIFR5cGVzXG4vLyAtLS0tLS1cblxuYXNzaWduKENvbHVtbkNvbXBpbGVyX01TU1FMLnByb3RvdHlwZSwge1xuXG4gIGluY3JlbWVudHM6ICdpbnQgaWRlbnRpdHkoMSwxKSBub3QgbnVsbCBwcmltYXJ5IGtleScsXG5cbiAgYmlnaW5jcmVtZW50czogJ2JpZ2ludCBpZGVudGl0eSgxLDEpIG5vdCBudWxsIHByaW1hcnkga2V5JyxcblxuICBiaWdpbnQ6ICdiaWdpbnQnLFxuXG4gIGRvdWJsZTogZnVuY3Rpb24ocHJlY2lzaW9uLCBzY2FsZSkge1xuICAgIGlmICghcHJlY2lzaW9uKSByZXR1cm4gJ2RvdWJsZSdcbiAgICByZXR1cm4gJ2RvdWJsZSgnICsgdGhpcy5fbnVtKHByZWNpc2lvbiwgOCkgKyAnLCAnICsgdGhpcy5fbnVtKHNjYWxlLCAyKSArICcpJ1xuICB9LFxuXG4gIGludGVnZXI6IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIGxlbmd0aCA9IGxlbmd0aCA/ICcoJyArIHRoaXMuX251bShsZW5ndGgsIDExKSArICcpJyA6ICcnXG4gICAgcmV0dXJuICdpbnQnICsgbGVuZ3RoXG4gIH0sXG5cbiAgbWVkaXVtaW50OiAnbWVkaXVtaW50JyxcblxuICBzbWFsbGludDogJ3NtYWxsaW50JyxcblxuICB0aW55aW50OiBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICBsZW5ndGggPSBsZW5ndGggPyAnKCcgKyB0aGlzLl9udW0obGVuZ3RoLCAxKSArICcpJyA6ICcnXG4gICAgcmV0dXJuICd0aW55aW50JyArIGxlbmd0aFxuICB9LFxuXG4gIHZhcmNoYXI6IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHJldHVybiAnbnZhcmNoYXIoJyArIHRoaXMuX251bShsZW5ndGgsIDI1NSkgKyAnKSc7XG4gIH0sXG4gIFxuICB0ZXh0OiAnbnZhcmNoYXIobWF4KScsXG5cbiAgbWVkaXVtdGV4dDogJ252YXJjaGFyKG1heCknLFxuICBcbiAgbG9uZ3RleHQ6ICdudmFyY2hhcihtYXgpJyxcblxuICBlbnU6ICdudmFyY2hhcigxMDApJyxcblxuICB1dWlkOiAndW5pcXVlaWRlbnRpZmllcicsXG5cbiAgZGF0ZXRpbWU6ICdkYXRldGltZScsXG5cbiAgdGltZXN0YW1wOiAnZGF0ZXRpbWUnLFxuXG4gIGJpdDogZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgcmV0dXJuIGxlbmd0aCA/ICdiaXQoJyArIHRoaXMuX251bShsZW5ndGgpICsgJyknIDogJ2JpdCdcbiAgfSxcblxuICBiaW5hcnk6IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHJldHVybiBsZW5ndGggPyAndmFyYmluYXJ5KCcgKyB0aGlzLl9udW0obGVuZ3RoKSArICcpJyA6ICdibG9iJ1xuICB9LFxuICBcbiAgYm9vbDogJ2JpdCcsXG5cbiAgLy8gTW9kaWZpZXJzXG4gIC8vIC0tLS0tLVxuXG4gIGRlZmF1bHRUbzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvKmpzaGludCB1bnVzZWQ6IGZhbHNlKi9cbiAgICB2YXIgZGVmYXVsdFZhbCA9IENvbHVtbkNvbXBpbGVyX01TU1FMLnN1cGVyXy5wcm90b3R5cGUuZGVmYXVsdFRvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ2Jsb2InICYmIHRoaXMudHlwZS5pbmRleE9mKCd0ZXh0JykgPT09IC0xKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFZhbFxuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSxcbiAgXG4gIGZpcnN0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ2ZpcnN0J1xuICB9LFxuICBcbiAgYWZ0ZXI6IGZ1bmN0aW9uKGNvbHVtbikge1xuICAgIHJldHVybiAnYWZ0ZXIgJyArIHRoaXMuZm9ybWF0dGVyLndyYXAoY29sdW1uKVxuICB9LFxuICBcbiAgY29tbWVudDogZnVuY3Rpb24oY29tbWVudCkge1xuICAgIGlmIChjb21tZW50ICYmIGNvbW1lbnQubGVuZ3RoID4gMjU1KSB7XG4gICAgICBoZWxwZXJzLndhcm4oJ1lvdXIgY29tbWVudCBpcyBsb25nZXIgdGhhbiB0aGUgbWF4IGNvbW1lbnQgbGVuZ3RoIGZvciBNU1NRTCcpXG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9XG5cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29sdW1uQ29tcGlsZXJfTVNTUUw7XG4iXX0=