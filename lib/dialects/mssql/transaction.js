'use strict';

var inherits = require('inherits');
var assign = require('lodash/object/assign');
var Promise = require('../../promise');
var Transaction = require('../../transaction');
var debug = require('debug')('knex:tx');

function Transaction_MSSQL() {
  Transaction.apply(this, arguments);
}
inherits(Transaction_MSSQL, Transaction);

assign(Transaction_MSSQL.prototype, {

  begin: function begin(conn) {
    debug('%s: begin', this.txid);
    return conn.tx_.begin().then(this._resolver, this._rejecter);
  },

  savepoint: function savepoint(conn) {
    var _this = this;

    debug('%s: savepoint at', this.txid);
    return Promise.resolve().then(function () {
      return _this.query(conn, 'SAVE TRANSACTION ' + _this.txid);
    });
  },

  commit: function commit(conn, value) {
    var _this2 = this;

    this._completed = true;
    debug('%s: commit', this.txid);
    return conn.tx_.commit().then(function () {
      return _this2._resolver(value);
    }, this._rejecter);
  },

  release: function release(conn, value) {
    return this._resolver(value);
  },

  rollback: function rollback(conn, error) {
    var _this3 = this;

    this._completed = true;
    debug('%s: rolling back', this.txid);
    return conn.tx_.rollback().then(function () {
      return _this3._rejecter(error);
    });
  },

  rollbackTo: function rollbackTo(conn, error) {
    var _this4 = this;

    debug('%s: rolling backTo', this.txid);
    return Promise.resolve().then(function () {
      return _this4.query(conn, 'ROLLBACK TRANSACTION ' + _this4.txid, 2, error);
    }).then(function () {
      return _this4._rejecter(error);
    });
  },

  // Acquire a connection and create a disposer - either using the one passed
  // via config or getting one off the client. The disposer will be called once
  // the original promise is marked completed.
  acquireConnection: function acquireConnection(config) {
    var t = this;
    var configConnection = config && config.connection;
    return Promise['try'](function () {
      return (t.outerTx ? t.outerTx.conn : null) || configConnection || t.client.acquireConnection();
    }).tap(function (conn) {
      if (!t.outerTx) {
        t.conn = conn;
        conn.tx_ = conn.transaction();
      }
    }).disposer(function (conn) {
      if (t.outerTx) return;
      if (conn.tx_) {
        if (!t._completed) {
          debug('%s: unreleased transaction', t.txid);
          conn.tx_.rollback();
        }
        conn.tx_ = null;
      }
      t.conn = null;
      if (!configConnection) {
        debug('%s: releasing connection', t.txid);
        t.client.releaseConnection(conn);
      } else {
        debug('%s: not releasing external connection', t.txid);
      }
    });
  }

});

module.exports = Transaction_MSSQL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy9tc3NxbC90cmFuc2FjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLElBQUksUUFBUSxHQUFNLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNyQyxJQUFJLE1BQU0sR0FBUSxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNsRCxJQUFJLE9BQU8sR0FBTyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7QUFDMUMsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUE7QUFDOUMsSUFBSSxLQUFLLEdBQVMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFBOztBQUU3QyxTQUFTLGlCQUFpQixHQUFHO0FBQzNCLGFBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0NBQ25DO0FBQ0QsUUFBUSxDQUFDLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFBOztBQUV4QyxNQUFNLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFOztBQUVsQyxPQUFLLEVBQUUsZUFBUyxJQUFJLEVBQUU7QUFDcEIsU0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDN0IsV0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7R0FDeEM7O0FBRUQsV0FBUyxFQUFFLG1CQUFTLElBQUksRUFBRTs7O0FBQ3hCLFNBQUssQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDcEMsV0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQ3JCLElBQUksQ0FBQzthQUFNLE1BQUssS0FBSyxDQUFDLElBQUksRUFBRSxtQkFBbUIsR0FBRyxNQUFLLElBQUksQ0FBQztLQUFBLENBQUMsQ0FB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T0FDakMsTUFBTTtBQUNMLGFBQUssQ0FBQyx1Q0FBdUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7T0FDdkQ7S0FDRixDQUFDLENBQUE7R0FDSDs7Q0FFRixDQUFDLENBQUE7O0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQSIsImZpbGUiOiJ0cmFuc2FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGluaGVyaXRzICAgID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIGFzc2lnbiAgICAgID0gcmVxdWlyZSgnbG9kYXNoL29iamVjdC9hc3NpZ24nKTtcbnZhciBQcm9taXNlICAgICA9IHJlcXVpcmUoJy4uLy4uL3Byb21pc2UnKVxudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNhY3Rpb24nKVxudmFyIGRlYnVnICAgICAgID0gcmVxdWlyZSgnZGVidWcnKSgna25leDp0eCcpXG5cbmZ1bmN0aW9uIFRyYW5zYWN0aW9uX01TU1FMKCkge1xuICBUcmFuc2FjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5pbmhlcml0cyhUcmFuc2FjdGlvbl9NU1NRTCwgVHJhbnNhY3Rpb24pXG5cbmFzc2lnbihUcmFuc2FjdGlvbl9NU1NRTC5wcm90b3R5cGUsIHtcblxuICBiZWdpbjogZnVuY3Rpb24oY29ubikge1xuICAgIGRlYnVnKCclczogYmVnaW4nLCB0aGlzLnR4aWQpXG4gICAgcmV0dXJuIGNvbm4udHhfLmJlZ2luKClcbiAgICAgIC50aGVuKHRoaXMuX3Jlc29sdmVyLCB0aGlzLl9yZWplY3RlcilcbiAgfSxcblxuICBzYXZlcG9pbnQ6IGZ1bmN0aW9uKGNvbm4pIHtcbiAgICBkZWJ1ZygnJXM6IHNhdmVwb2ludCBhdCcsIHRoaXMudHhpZClcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IHRoaXMucXVlcnkoY29ubiwgJ1NBVkUgVFJBTlNBQ1RJT04gJyArIHRoaXMudHhpZCkpXG4gIH0sXG5cbiAgY29tbWl0OiBmdW5jdGlvbihjb25uLCB2YWx1ZSkge1xuICAgIHRoaXMuX2NvbXBsZXRlZCA9IHRydWVcbiAgICBkZWJ1ZygnJXM6IGNvbW1pdCcsIHRoaXMudHhpZClcbiAgICByZXR1cm4gY29ubi50eF8uY29tbWl0KClcbiAgICAgIC50aGVuKCgpID0+IHRoaXMuX3Jlc29sdmVyKHZhbHVlKSwgdGhpcy5fcmVqZWN0ZXIpXG4gIH0sXG5cbiAgcmVsZWFzZTogZnVuY3Rpb24oY29ubiwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZXIodmFsdWUpXG4gIH0sXG5cbiAgcm9sbGJhY2s6IGZ1bmN0aW9uKGNvbm4sIGVycm9yKSB7XG4gICAgdGhpcy5fY29tcGxldGVkID0gdHJ1ZVxuICAgIGRlYnVnKCclczogcm9sbGluZyBiYWNrJywgdGhpcy50eGlkKVxuICAgIHJldHVybiBjb25uLnR4Xy5yb2xsYmFjaygpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLl9yZWplY3RlcihlcnJvcikpXG4gIH0sXG5cbiAgcm9sbGJhY2tUbzogZnVuY3Rpb24oY29ubiwgZXJyb3IpIHtcbiAgICBkZWJ1ZygnJXM6IHJvbGxpbmcgYmFja1RvJywgdGhpcy50eGlkKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5xdWVyeShjb25uLCAnUk9MTEJBQ0sgVFJBTlNBQ1RJT04gJyArIHRoaXMudHhpZCwgMiwgZXJyb3IpKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5fcmVqZWN0ZXIoZXJyb3IpKVxuICB9LFxuXG4gIC8vIEFjcXVpcmUgYSBjb25uZWN0aW9uIGFuZCBjcmVhdGUgYSBkaXNwb3NlciAtIGVpdGhlciB1c2luZyB0aGUgb25lIHBhc3NlZCBcbiAgLy8gdmlhIGNvbmZpZyBvciBnZXR0aW5nIG9uZSBvZmYgdGhlIGNsaWVudC4gVGhlIGRpc3Bvc2VyIHdpbGwgYmUgY2FsbGVkIG9uY2UgXG4gIC8vIHRoZSBvcmlnaW5hbCBwcm9taXNlIGlzIG1hcmtlZCBjb21wbGV0ZWQuXG4gIGFjcXVpcmVDb25uZWN0aW9uOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICB2YXIgdCA9IHRoaXNcbiAgICB2YXIgY29uZmlnQ29ubmVjdGlvbiA9IGNvbmZpZyAmJiBjb25maWcuY29ubmVjdGlvblxuICAgIHJldHVybiBQcm9taXNlLnRyeShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAodC5vdXRlclR4ID8gdC5vdXRlclR4LmNvbm4gOiBudWxsKSB8fCBjb25maWdDb25uZWN0aW9uIHx8IHQuY2xpZW50LmFjcXVpcmVDb25uZWN0aW9uKCkgIFxuICAgIH0pLnRhcChmdW5jdGlvbihjb25uKSB7XG4gICAgICBpZiAoIXQub3V0ZXJUeCkge1xuICAgICAgICB0LmNvbm4gPSBjb25uIFxuICAgICAgICBjb25uLnR4XyA9IGNvbm4udHJhbnNhY3Rpb24oKVxuICAgICAgfVxuICAgIH0pLmRpc3Bvc2VyKGZ1bmN0aW9uKGNvbm4pIHtcbiAgICAgIGlmICh0Lm91dGVyVHgpIHJldHVybjtcbiAgICAgIGlmIChjb25uLnR4Xykge1xuICAgICAgICBpZiAoIXQuX2NvbXBsZXRlZCkge1xuICAgICAgICAgIGRlYnVnKCclczogdW5yZWxlYXNlZCB0cmFuc2FjdGlvbicsIHQudHhpZClcbiAgICAgICAgICBjb25uLnR4Xy5yb2xsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbm4udHhfID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHQuY29ubiA9IG51bGxcbiAgICAgIGlmICghY29uZmlnQ29ubmVjdGlvbikge1xuICAgICAgICBkZWJ1ZygnJXM6IHJlbGVhc2luZyBjb25uZWN0aW9uJywgdC50eGlkKVxuICAgICAgICB0LmNsaWVudC5yZWxlYXNlQ29ubmVjdGlvbihjb25uKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJyVzOiBub3QgcmVsZWFzaW5nIGV4dGVybmFsIGNvbm5lY3Rpb24nLCB0LnR4aWQpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuICBcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNhY3Rpb25fTVNTUUxcbiJdfQ==