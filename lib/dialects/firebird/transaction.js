'use strict';

var Transaction = require('../../transaction');
var assign = require('lodash/object/assign');
var inherits = require('inherits');
var debug = require('debug')('knex:tx');
var helpers = require('../../helpers');

function Transaction_Firebird() {
  Transaction.apply(this, arguments);
}
inherits(Transaction_Firebird, Transaction);

assign(Transaction_Firebird.prototype, {

  query: function query(conn, sql, status, value) {
    var t = this;
    var q = this.trxClient.query(conn, sql)['catch'](function (err) {
      return err.errno === 1305;
    }, function () {
      helpers.warn('Transaction was implicitly committed, do not mix transactions and DDL with Firebird (#805)');
    })['catch'](function (err) {
      status = 2;
      value = err;
      t._completed = true;
      debug('%s error running transaction query', t.txid);
    }).tap(function () {
      if (status === 1) t._resolver(value);
      if (status === 2) t._rejecter(value);
    });
    if (status === 1 || status === 2) {
      t._completed = true;
    }
    return q;
  }

});

module.exports = Transaction_Firebird;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy9maXJlYmlyZC90cmFuc2FjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDL0MsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDN0MsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ25DLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRXZDLFNBQVMsb0JBQW9CLEdBQUc7QUFDOUIsYUFBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDcEM7QUFDRCxRQUFRLENBQUMsb0JBQW9CLEVBQUUsV0FBVyxDQUFDLENBQUM7O0FBRTVDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUU7O0FBRXJDLE9BQUssRUFBRSxTQUFTLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFDOUMsUUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ2IsUUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQzlELGFBQU8sR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7S0FDM0IsRUFBRSxZQUFZO0FBQ2IsYUFBTyxDQUFDLElBQUksQ0FBQyw0RkFBNEYsQ0FBQyxDQUFDO0tBQzVHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEdBQUcsRUFBRTtBQUN6QixZQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsV0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNaLE9BQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLFdBQUssQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDckQsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZO0FBQ2pCLFVBQUksTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLFVBQUksTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RDLENBQUMsQ0FBQztBQUNILFFBQUksTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQ2hDLE9BQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0tBQ3JCO0FBQ0QsV0FBTyxDQUFDLENBQUM7R0FDVjs7Q0FFRixDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyIsImZpbGUiOiJ0cmFuc2FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNhY3Rpb24nKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdsb2Rhc2gvb2JqZWN0L2Fzc2lnbicpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2tuZXg6dHgnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycycpO1xuXG5mdW5jdGlvbiBUcmFuc2FjdGlvbl9GaXJlYmlyZCgpIHtcbiAgVHJhbnNhY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmluaGVyaXRzKFRyYW5zYWN0aW9uX0ZpcmViaXJkLCBUcmFuc2FjdGlvbik7XG5cbmFzc2lnbihUcmFuc2FjdGlvbl9GaXJlYmlyZC5wcm90b3R5cGUsIHtcblxuICBxdWVyeTogZnVuY3Rpb24gcXVlcnkoY29ubiwgc3FsLCBzdGF0dXMsIHZhbHVlKSB7ICAgICAgICBcbiAgICB2YXIgdCA9IHRoaXM7XG4gICAgdmFyIHEgPSB0aGlzLnRyeENsaWVudC5xdWVyeShjb25uLCBzcWwpWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHJldHVybiBlcnIuZXJybm8gPT09IDEzMDU7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgaGVscGVycy53YXJuKCdUcmFuc2FjdGlvbiB3YXMgaW1wbGljaXRseSBjb21taXR0ZWQsIGRvIG5vdCBtaXggdHJhbnNhY3Rpb25zIGFuZCBEREwgd2l0aCBGaXJlYmlyZCAoIzgwNSknKTtcbiAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBzdGF0dXMgPSAyO1xuICAgICAgdmFsdWUgPSBlcnI7XG4gICAgICB0Ll9jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgZGVidWcoJyVzIGVycm9yIHJ1bm5pbmcgdHJhbnNhY3Rpb24gcXVlcnknLCB0LnR4aWQpO1xuICAgIH0pLnRhcChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc3RhdHVzID09PSAxKSB0Ll9yZXNvbHZlcih2YWx1ZSk7XG4gICAgICBpZiAoc3RhdHVzID09PSAyKSB0Ll9yZWplY3Rlcih2YWx1ZSk7XG4gICAgfSk7XG4gICAgaWYgKHN0YXR1cyA9PT0gMSB8fCBzdGF0dXMgPT09IDIpIHtcbiAgICAgIHQuX2NvbXBsZXRlZCA9IHRydWU7XG4gICAgfSAgICAgICAgXG4gICAgcmV0dXJuIHE7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNhY3Rpb25fRmlyZWJpcmQ7Il19