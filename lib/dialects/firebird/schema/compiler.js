
// Firebird Schema Compiler
// -------
'use strict';

var inherits = require('inherits');
var SchemaCompiler = require('../../../schema/compiler');
var assign = require('lodash/object/assign');

function SchemaCompiler_Firebird(client, builder) {
  SchemaCompiler.call(this, client, builder);
}
inherits(SchemaCompiler_Firebird, SchemaCompiler);

assign(SchemaCompiler_Firebird.prototype, {

  dropTablePrefix: 'DROP TABLE ',
  dropTableIfExists: function dropTableIfExists(tableName) {
    var queryDrop = 'execute block ' + 'as ' + 'begin ' + '    if (exists(select 1 from RDB$RELATION_FIELDS where RDB$SYSTEM_FLAG=0 AND RDB$RELATION_NAME = UPPER(\'' + tableName + '\'))) then ' + '        execute statement \'drop table ' + tableName + '\' ' + '        WITH AUTONOMOUS TRANSACTION; ' + 'end; ';

    this.pushQuery(queryDrop);
  },
  // Rename a table on the schema.
  renameTable: function renameTable(tableName, to) {
    this.pushQuery('rename table ' + this.formatter.wrap(tableName) + ' to ' + this.formatter.wrap(to));
  },

  // Check whether a table exists on the query.
  hasTable: function hasTable(tableName) {
    this.pushQuery({
      sql: 'show tables like ' + this.formatter.parameter(tableName),
      output: function output(resp) {
        return resp.length > 0;
      }
    });
  },

  // Check whether a column exists on the schema.
  hasColumn: function hasColumn(tableName, column) {
    this.pushQuery({
      sql: "SELECT  TRIM(R.RDB$RELATION_NAME) AS RELATION_NAME, \n\
           TRIM(R.RDB$FIELD_NAME) AS FIELD_NAME \n\
              FROM RDB$RELATION_FIELDS R WHERE TRIM(R.RDB$RELATION_NAME) LIKE '" + this.formatter.wrap(tableName) + "' and TRIM(R.RDB$FIELD_NAME) like '" + this.formatter.parameter(column) + "'",
      output: function output(resp) {
        return resp.length > 0;
      }
    });
  }

});

module.exports = SchemaCompiler_Firebird;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9maXJlYmlyZC9zY2hlbWEvY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsWUFBWSxDQUFDOztBQUViLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNuQyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUN6RCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQzs7QUFFN0MsU0FBUyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFO0FBQ2hELGdCQUFjLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDNUM7QUFDRCxRQUFRLENBQUMsdUJBQXVCLEVBQUUsY0FBYyxDQUFDLENBQUM7O0FBRWxELE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUU7O0FBRXhDLGlCQUFlLEVBQUUsYUFBYTtBQUM5QixtQkFBaUIsRUFBRSxTQUFTLGlCQUFpQixDQUFDLFNBQVMsRUFBRTtBQUN2RCxRQUFJLFNBQVMsR0FBRyxnQkFBZ0IsR0FBRyxLQUFLLEdBQUcsUUFBUSxHQUFHLDJHQUEyRyxHQUFHLFNBQVMsR0FBRyxhQUFhLEdBQUcseUNBQXlDLEdBQUcsU0FBUyxHQUFHLEtBQUssR0FBRyx1Q0FBdUMsR0FBRyxPQUFPLENBQUM7O0FBRWxULFFBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDM0I7O0FBRUQsYUFBVyxFQUFFLFNBQVMsV0FBVyxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUU7QUFDL0MsUUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDckc7OztBQUdELFVBQVEsRUFBRSxTQUFTLFFBQVEsQ0FBQyxTQUFTLEVBQUU7QUFDckMsUUFBSSxDQUFDLFNBQVMsQ0FBQztBQUNiLFNBQUcsRUFBRSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDOUQsWUFBTSxFQUFFLFNBQVMsTUFBTSxDQUFDLElBQUksRUFBRTtBQUM1QixlQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO09BQ3hCO0tBQ0YsQ0FBQyxDQUFDO0dBQ0o7OztBQUdDLFdBQVMsRUFBRSxtQkFBUyxTQUFTLEVBQUUsTUFBTSxFQUFFO0FBQ3BDLFFBQUksQ0FBQyxTQUFTLENBQUM7QUFDYixTQUFHLEVBQUU7O2dGQUVrRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUN0RyxxQ0FBcUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBQyxHQUFHO0FBQzlFLFlBQU0sRUFBRSxnQkFBUyxJQUFJLEVBQUU7QUFDckIsZUFBTyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztPQUN4QjtLQUNGLENBQUMsQ0FBQztHQUNKOztDQUVMLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLHVCQUF1QixDQUFDIiwiZmlsZSI6ImNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBGaXJlYmlyZCBTY2hlbWEgQ29tcGlsZXJcbi8vIC0tLS0tLS1cbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBTY2hlbWFDb21waWxlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3NjaGVtYS9jb21waWxlcicpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJ2xvZGFzaC9vYmplY3QvYXNzaWduJyk7XG5cbmZ1bmN0aW9uIFNjaGVtYUNvbXBpbGVyX0ZpcmViaXJkKGNsaWVudCwgYnVpbGRlcikge1xuICBTY2hlbWFDb21waWxlci5jYWxsKHRoaXMsIGNsaWVudCwgYnVpbGRlcik7XG59XG5pbmhlcml0cyhTY2hlbWFDb21waWxlcl9GaXJlYmlyZCwgU2NoZW1hQ29tcGlsZXIpO1xuXG5hc3NpZ24oU2NoZW1hQ29tcGlsZXJfRmlyZWJpcmQucHJvdG90eXBlLCB7XG5cbiAgZHJvcFRhYmxlUHJlZml4OiAnRFJPUCBUQUJMRSAnLFxuICBkcm9wVGFibGVJZkV4aXN0czogZnVuY3Rpb24gZHJvcFRhYmxlSWZFeGlzdHModGFibGVOYW1lKSB7XG4gICAgdmFyIHF1ZXJ5RHJvcCA9ICdleGVjdXRlIGJsb2NrICcgKyAnYXMgJyArICdiZWdpbiAnICsgJyAgICBpZiAoZXhpc3RzKHNlbGVjdCAxIGZyb20gUkRCJFJFTEFUSU9OX0ZJRUxEUyB3aGVyZSBSREIkU1lTVEVNX0ZMQUc9MCBBTkQgUkRCJFJFTEFUSU9OX05BTUUgPSBVUFBFUihcXCcnICsgdGFibGVOYW1lICsgJ1xcJykpKSB0aGVuICcgKyAnICAgICAgICBleGVjdXRlIHN0YXRlbWVudCBcXCdkcm9wIHRhYmxlICcgKyB0YWJsZU5hbWUgKyAnXFwnICcgKyAnICAgICAgICBXSVRIIEFVVE9OT01PVVMgVFJBTlNBQ1RJT047ICcgKyAnZW5kOyAnO1xuXG4gICAgdGhpcy5wdXNoUXVlcnkocXVlcnlEcm9wKTtcbiAgfSxcbiAgLy8gUmVuYW1lIGEgdGFibGUgb24gdGhlIHNjaGVtYS5cbiAgcmVuYW1lVGFibGU6IGZ1bmN0aW9uIHJlbmFtZVRhYmxlKHRhYmxlTmFtZSwgdG8pIHtcbiAgICB0aGlzLnB1c2hRdWVyeSgncmVuYW1lIHRhYmxlICcgKyB0aGlzLmZvcm1hdHRlci53cmFwKHRhYmxlTmFtZSkgKyAnIHRvICcgKyB0aGlzLmZvcm1hdHRlci53cmFwKHRvKSk7XG4gIH0sXG5cbiAgLy8gQ2hlY2sgd2hldGhlciBhIHRhYmxlIGV4aXN0cyBvbiB0aGUgcXVlcnkuXG4gIGhhc1RhYmxlOiBmdW5jdGlvbiBoYXNUYWJsZSh0YWJsZU5hbWUpIHtcbiAgICB0aGlzLnB1c2hRdWVyeSh7XG4gICAgICBzcWw6ICdzaG93IHRhYmxlcyBsaWtlICcgKyB0aGlzLmZvcm1hdHRlci5wYXJhbWV0ZXIodGFibGVOYW1lKSxcbiAgICAgIG91dHB1dDogZnVuY3Rpb24gb3V0cHV0KHJlc3ApIHtcbiAgICAgICAgcmV0dXJuIHJlc3AubGVuZ3RoID4gMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAvLyBDaGVjayB3aGV0aGVyIGEgY29sdW1uIGV4aXN0cyBvbiB0aGUgc2NoZW1hLlxuICAgIGhhc0NvbHVtbjogZnVuY3Rpb24odGFibGVOYW1lLCBjb2x1bW4pIHtcbiAgICAgICB0aGlzLnB1c2hRdWVyeSh7XG4gICAgICAgICBzcWw6IFwiU0VMRUNUICBUUklNKFIuUkRCJFJFTEFUSU9OX05BTUUpIEFTIFJFTEFUSU9OX05BTUUsIFxcblxcXG4gICAgICAgICAgIFRSSU0oUi5SREIkRklFTERfTkFNRSkgQVMgRklFTERfTkFNRSBcXG5cXFxuICAgICAgICAgICAgICBGUk9NIFJEQiRSRUxBVElPTl9GSUVMRFMgUiBXSEVSRSBUUklNKFIuUkRCJFJFTEFUSU9OX05BTUUpIExJS0UgJ1wiICsgdGhpcy5mb3JtYXR0ZXIud3JhcCh0YWJsZU5hbWUpICtcbiAgICAgICAgICAgXCInIGFuZCBUUklNKFIuUkRCJEZJRUxEX05BTUUpIGxpa2UgJ1wiICsgdGhpcy5mb3JtYXR0ZXIucGFyYW1ldGVyKGNvbHVtbikrXCInXCIsXG4gICAgICAgICBvdXRwdXQ6IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAgcmV0dXJuIHJlc3AubGVuZ3RoID4gMDtcbiAgICAgICAgIH1cbiAgICAgICB9KTtcbiAgICAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFDb21waWxlcl9GaXJlYmlyZDsiXX0=