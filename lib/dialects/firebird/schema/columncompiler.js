
// Firebird Column Compiler
// -------
'use strict';

var inherits = require('inherits');
var ColumnCompiler = require('../../../schema/columncompiler');
var helpers = require('../../../helpers');
var assign = require('lodash/object/assign');

function ColumnCompiler_Firebird() {
  ColumnCompiler.apply(this, arguments);
  this.modifiers = ['unsigned', 'nullable', 'defaultTo', 'first', 'after', 'comment'];
}
inherits(ColumnCompiler_Firebird, ColumnCompiler);

// Types
// ------

assign(ColumnCompiler_Firebird.prototype, {

  increments: 'int not null primary key',

  //bigincrements: 'bigint unsigned not null auto_increment primary key',

  bigint: 'bigint',

  double: function double(precision, scale) {
    if (!precision) return 'double';
    return 'double(' + this._num(precision, 8) + ', ' + this._num(scale, 2) + ')';
  },

  integer: function integer(length) {
    length = length ? '(' + this._num(length, 11) + ')' : '';
    return 'int' + length;
  },

  mediumint: 'mediumint',

  smallint: 'smallint',

  tinyint: function tinyint(length) {
    length = length ? '(' + this._num(length, 1) + ')' : '';
    return 'tinyint' + length;
  },

  text: function text(column) {
    switch (column) {
      case 'medium':
      case 'mediumtext':
        return 'mediumtext';
      case 'long':
      case 'longtext':
        return 'longtext';
      default:
        return 'text';
    }
  },

  mediumtext: function mediumtext() {
    return this.text('medium');
  },

  longtext: function longtext() {
    return this.text('long');
  },

  enu: function enu(allowed) {
    return "enum('" + allowed.join("', '") + "')";
  },

  datetime: 'datetime',

  timestamp: 'timestamp',

  bit: function bit(length) {
    return length ? 'bit(' + this._num(length) + ')' : 'bit';
  },

  binary: function binary(length) {
    return length ? 'varbinary(' + this._num(length) + ')' : 'blob';
  },

  // Modifiers
  // ------

  defaultTo: function defaultTo(value) {
    /*jshint unused: false*/
    var defaultVal = ColumnCompiler_Firebird.super_.prototype.defaultTo.apply(this, arguments);
    if (this.type !== 'blob' && this.type.indexOf('text') === -1) {
      return defaultVal;
    }
    return '';
  },

  unsigned: function unsigned() {
    return '';
  },

  first: function first() {
    return 'first';
  },

  after: function after(column) {
    return 'after ' + this.formatter.wrap(column);
  },

  comment: function comment(_comment) {
    if (_comment && _comment.length > 255) {
      helpers.warn('Your comment is longer than the max comment length for Firebird');
    }
    return _comment && "comment '" + _comment + "'";
  },

  varchar: function varchar(length) {
    return 'varchar(' + this._num(length, 255) + ')  CHARACTER SET UTF8';
  }

});

module.exports = ColumnCompiler_Firebird;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9maXJlYmlyZC9zY2hlbWEvY29sdW1uY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsWUFBWSxDQUFDOztBQUViLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNuQyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUMvRCxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUMxQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQzs7QUFFN0MsU0FBUyx1QkFBdUIsR0FBRztBQUNqQyxnQkFBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdEMsTUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDckY7QUFDRCxRQUFRLENBQUMsdUJBQXVCLEVBQUUsY0FBYyxDQUFDLENBQUM7Ozs7O0FBS2xELE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUU7O0FBRXhDLFlBQVUsRUFBRSwwQkFBMEI7Ozs7QUFJdEMsUUFBTSxFQUFFLFFBQVE7O0FBRWhCLFFBQU0sRUFBRSxTQUFTLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFO0FBQ3hDLFFBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxRQUFRLENBQUM7QUFDaEMsV0FBTyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztHQUMvRTs7QUFFRCxTQUFPLEVBQUUsU0FBUyxPQUFPLENBQUMsTUFBTSxFQUFFO0FB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SUFBSSxDQUFDLGlFQUFpRSxDQUFDLENBQUM7S0FDakY7QUFDRCxXQUFPLFFBQVEsSUFBSSxXQUFXLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQztHQUNqRDs7QUFFRCxTQUFPLEVBQUUsU0FBUyxPQUFPLENBQUMsTUFBTSxFQUFFO0FBQ2hDLFdBQU8sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLHVCQUF1QixDQUFDO0dBQ3RFOztDQUVGLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLHVCQUF1QixDQUFDIiwiZmlsZSI6ImNvbHVtbmNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBGaXJlYmlyZCBDb2x1bW4gQ29tcGlsZXJcbi8vIC0tLS0tLS1cbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBDb2x1bW5Db21waWxlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3NjaGVtYS9jb2x1bW5jb21waWxlcicpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi8uLi8uLi9oZWxwZXJzJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnbG9kYXNoL29iamVjdC9hc3NpZ24nKTtcblxuZnVuY3Rpb24gQ29sdW1uQ29tcGlsZXJfRmlyZWJpcmQoKSB7XG4gIENvbHVtbkNvbXBpbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHRoaXMubW9kaWZpZXJzID0gWyd1bnNpZ25lZCcsICdudWxsYWJsZScsICdkZWZhdWx0VG8nLCAnZmlyc3QnLCAnYWZ0ZXInLCAnY29tbWVudCddO1xufVxuaW5oZXJpdHMoQ29sdW1uQ29tcGlsZXJfRmlyZWJpcmQsIENvbHVtbkNvbXBpbGVyKTtcblxuLy8gVHlwZXNcbi8vIC0tLS0tLVxuXG5hc3NpZ24oQ29sdW1uQ29tcGlsZXJfRmlyZWJpcmQucHJvdG90eXBlLCB7XG5cbiAgaW5jcmVtZW50czogJ2ludCBub3QgbnVsbCBwcmltYXJ5IGtleScsXG5cbiAgLy9iaWdpbmNyZW1lbnRzOiAnYmlnaW50IHVuc2lnbmVkIG5vdCBudWxsIGF1dG9faW5jcmVtZW50IHByaW1hcnkga2V5JyxcblxuICBiaWdpbnQ6ICdiaWdpbnQnLFxuXG4gIGRvdWJsZTogZnVuY3Rpb24gZG91YmxlKHByZWNpc2lvbiwgc2NhbGUpIHtcbiAgICBpZiAoIXByZWNpc2lvbikgcmV0dXJuICdkb3VibGUnO1xuICAgIHJldHVybiAnZG91YmxlKCcgKyB0aGlzLl9udW0ocHJlY2lzaW9uLCA4KSArICcsICcgKyB0aGlzLl9udW0oc2NhbGUsIDIpICsgJyknO1xuICB9LFxuXG4gIGludGVnZXI6IGZ1bmN0aW9uIGludGVnZXIobGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gbGVuZ3RoID8gJygnICsgdGhpcy5fbnVtKGxlbmd0aCwgMTEpICsgJyknIDogJyc7XG4gICAgcmV0dXJuICdpbnQnICsgbGVuZ3RoO1xuICB9LFxuXG4gIG1lZGl1bWludDogJ21lZGl1bWludCcsXG5cbiAgc21hbGxpbnQ6ICdzbWFsbGludCcsXG5cbiAgdGlueWludDogZnVuY3Rpb24gdGlueWludChsZW5ndGgpIHtcbiAgICBsZW5ndGggPSBsZW5ndGggPyAnKCcgKyB0aGlzLl9udW0obGVuZ3RoLCAxKSArICcpJyA6ICcnO1xuICAgIHJldHVybiAndGlueWludCcgKyBsZW5ndGg7XG4gIH0sXG5cbiAgdGV4dDogZnVuY3Rpb24gdGV4dChjb2x1bW4pIHtcbiAgICBzd2l0Y2ggKGNvbHVtbikge1xuICAgICAgY2FzZSAnbWVkaXVtJzpcbiAgICAgIGNhc2UgJ21lZGl1bXRleHQnOlxuICAgICAgICByZXR1cm4gJ21lZGl1bXRleHQnO1xuICAgICAgY2FzZSAnbG9uZyc6XG4gICAgICBjYXNlICdsb25ndGV4dCc6XG4gICAgICAgIHJldHVybiAnbG9uZ3RleHQnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICd0ZXh0JztcbiAgICB9XG4gIH0sXG5cbiAgbWVkaXVtdGV4dDogZnVuY3Rpb24gbWVkaXVtdGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCdtZWRpdW0nKTtcbiAgfSxcblxuICBsb25ndGV4dDogZnVuY3Rpb24gbG9uZ3RleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgnbG9uZycpO1xuICB9LFxuXG4gIGVudTogZnVuY3Rpb24gZW51KGFsbG93ZWQpIHtcbiAgICByZXR1cm4gXCJlbnVtKCdcIiArIGFsbG93ZWQuam9pbihcIicsICdcIikgKyBcIicpXCI7XG4gIH0sXG5cbiAgZGF0ZXRpbWU6ICdkYXRldGltZScsXG5cbiAgdGltZXN0YW1wOiAndGltZXN0YW1wJyxcblxuICBiaXQ6IGZ1bmN0aW9uIGJpdChsZW5ndGgpIHtcbiAgICByZXR1cm4gbGVuZ3RoID8gJ2JpdCgnICsgdGhpcy5fbnVtKGxlbmd0aCkgKyAnKScgOiAnYml0JztcbiAgfSxcblxuICBiaW5hcnk6IGZ1bmN0aW9uIGJpbmFyeShsZW5ndGgpIHtcbiAgICByZXR1cm4gbGVuZ3RoID8gJ3ZhcmJpbmFyeSgnICsgdGhpcy5fbnVtKGxlbmd0aCkgKyAnKScgOiAnYmxvYic7XG4gIH0sXG5cbiAgLy8gTW9kaWZpZXJzXG4gIC8vIC0tLS0tLVxuXG4gIGRlZmF1bHRUbzogZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlKSB7XG4gICAgLypqc2hpbnQgdW51c2VkOiBmYWxzZSovXG4gICAgdmFyIGRlZmF1bHRWYWwgPSBDb2x1bW5Db21waWxlcl9GaXJlYmlyZC5zdXBlcl8ucHJvdG90eXBlLmRlZmF1bHRUby5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICdibG9iJyAmJiB0aGlzLnR5cGUuaW5kZXhPZigndGV4dCcpID09PSAtMSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWw7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcblxuICB1bnNpZ25lZDogZnVuY3Rpb24gdW5zaWduZWQoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIGZpcnN0OiBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICByZXR1cm4gJ2ZpcnN0JztcbiAgfSxcblxuICBhZnRlcjogZnVuY3Rpb24gYWZ0ZXIoY29sdW1uKSB7XG4gICAgcmV0dXJuICdhZnRlciAnICsgdGhpcy5mb3JtYXR0ZXIud3JhcChjb2x1bW4pO1xuICB9LFxuXG4gIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQoX2NvbW1lbnQpIHtcbiAgICBpZiAoX2NvbW1lbnQgJiYgX2NvbW1lbnQubGVuZ3RoID4gMjU1KSB7XG4gICAgICBoZWxwZXJzLndhcm4oJ1lvdXIgY29tbWVudCBpcyBsb25nZXIgdGhhbiB0aGUgbWF4IGNvbW1lbnQgbGVuZ3RoIGZvciBGaXJlYmlyZCcpO1xuICAgIH1cbiAgICByZXR1cm4gX2NvbW1lbnQgJiYgXCJjb21tZW50ICdcIiArIF9jb21tZW50ICsgXCInXCI7XG4gIH0sXG5cbiAgdmFyY2hhcjogZnVuY3Rpb24gdmFyY2hhcihsZW5ndGgpIHtcbiAgICByZXR1cm4gJ3ZhcmNoYXIoJyArIHRoaXMuX251bShsZW5ndGgsIDI1NSkgKyAnKSAgQ0hBUkFDVEVSIFNFVCBVVEY4JztcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2x1bW5Db21waWxlcl9GaXJlYmlyZDsiXX0=