'use strict';

function dateToString(date) {
  function pad(number, digits) {
    number = number.toString();
    while (number.length < digits) {
      number = "0" + number;
    }
    return number;
  }

  var offset = -date.getTimezoneOffset();
  var ret = pad(date.getFullYear(), 4) + '-' + pad(date.getMonth() + 1, 2) + '-' + pad(date.getDate(), 2) + 'T' + pad(date.getHours(), 2) + ':' + pad(date.getMinutes(), 2) + ':' + pad(date.getSeconds(), 2) + '.' + pad(date.getMilliseconds(), 3);

  if (offset < 0) {
    ret += "-";
    offset *= -1;
  } else {
    ret += "+";
  }

  return ret + pad(Math.floor(offset / 60), 2) + ":" + pad(offset % 60, 2);
}

var prepareObject;
var arrayString;

// converts values from javascript types
// to their 'raw' counterparts for use as a postgres parameter
// note: you can override this function to provide your own conversion mechanism
// for complex types, etc...
var prepareValue = function prepareValue(val, seen, valueForUndefined) {
  if (val instanceof Buffer) {
    return val;
  }
  if (val instanceof Date) {
    return dateToString(val);
  }
  if (Array.isArray(val)) {
    return arrayString(val);
  }
  if (val === null) {
    return null;
  }
  if (val === undefined) {
    return valueForUndefined;
  }
  if (typeof val === 'object') {
    return prepareObject(val, seen);
  }
  return val.toString();
};

prepareObject = function prepareObject(val, seen) {
  if (val && typeof val.toPostgres === 'function') {
    seen = seen || [];
    if (seen.indexOf(val) !== -1) {
      throw new Error('circular reference detected while preparing "' + val + '" for query');
    }
    seen.push(val);

    return prepareValue(val.toPostgres(prepareValue), seen);
  }
  return JSON.stringify(val);
};

// convert a JS array to a postgres array literal
// uses comma separator so won't work for types like box that use
// a different array separator.
arrayString = function arrayString(val) {
  return '{' + val.map(function (elem) {
    if (elem === null || elem === undefined) {
      return 'NULL';
    }
    if (Array.isArray(elem)) {
      return arrayString(elem);
    }
    return JSON.stringify(prepareValue(elem));
  }).join(',') + '}';
};

function normalizeQueryConfig(config, values, callback) {
  //can take in strings or config objects
  config = typeof config === 'string' ? { text: config } : config;
  if (values) {
    if (typeof values === 'function') {
      config.callback = values;
    } else {
      config.values = values;
    }
  }
  if (callback) {
    config.callback = callback;
  }
  return config;
}

module.exports = {
  prepareValue: prepareValue,
  normalizeQueryConfig: normalizeQueryConfig
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy9wb3N0Z3Jlcy91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLFNBQVMsWUFBWSxDQUFDLElBQUksRUFBRTtBQUMxQixXQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQzNCLFVBQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDM0IsV0FBTyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sRUFBRTtBQUM3QixZQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQztLQUN2QjtBQUNELFdBQU8sTUFBTSxDQUFDO0dBQ2Y7O0FBRUQsTUFBSSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUN2QyxNQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FDeEMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUNqQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQzdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFakMsTUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ2QsT0FBRyxJQUFJLEdBQUcsQ0FBQztBQUNYLFVBQU0sSUFBSSxDQUFDLENBQUMsQ0FBQztH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Q2hDLFlBQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0tBQzFCLE1BQU07QUFDTCxZQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztLQUN4QjtHQUNGO0FBQ0QsTUFBSSxRQUFRLEVBQUU7QUFDWixVQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUM1QjtBQUNELFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLGNBQVksRUFBRSxZQUFZO0FBQzFCLHNCQUFvQixFQUFFLG9CQUFvQjtDQUMzQyxDQUFDIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5mdW5jdGlvbiBkYXRlVG9TdHJpbmcoZGF0ZSkge1xuICBmdW5jdGlvbiBwYWQobnVtYmVyLCBkaWdpdHMpIHtcbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKTtcbiAgICB3aGlsZSAobnVtYmVyLmxlbmd0aCA8IGRpZ2l0cykge1xuICAgICAgbnVtYmVyID0gXCIwXCIgKyBudW1iZXI7XG4gICAgfVxuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICB2YXIgb2Zmc2V0ID0gLWRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgdmFyIHJldCA9IHBhZChkYXRlLmdldEZ1bGxZZWFyKCksIDQpICsgJy0nICtcbiAgICBwYWQoZGF0ZS5nZXRNb250aCgpICsgMSwgMikgKyAnLScgK1xuICAgIHBhZChkYXRlLmdldERhdGUoKSwgMikgKyAnVCcgK1xuICAgIHBhZChkYXRlLmdldEhvdXJzKCksIDIpICsgJzonICtcbiAgICBwYWQoZGF0ZS5nZXRNaW51dGVzKCksIDIpICsgJzonICtcbiAgICBwYWQoZGF0ZS5nZXRTZWNvbmRzKCksIDIpICsgJy4nICtcbiAgICBwYWQoZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSwgMyk7XG5cbiAgaWYgKG9mZnNldCA8IDApIHtcbiAgICByZXQgKz0gXCItXCI7XG4gICAgb2Zmc2V0ICo9IC0xO1xuICB9IGVsc2Uge1xuICAgIHJldCArPSBcIitcIjtcbiAgfVxuXG4gIHJldHVybiByZXQgKyBwYWQoTWF0aC5mbG9vcihvZmZzZXQgLyA2MCksIDIpICsgXCI6XCIgKyBwYWQob2Zmc2V0ICUgNjAsIDIpO1xufVxuXG52YXIgcHJlcGFyZU9iamVjdDtcbnZhciBhcnJheVN0cmluZztcblxuLy8gY29udmVydHMgdmFsdWVzIGZyb20gamF2YXNjcmlwdCB0eXBlc1xuLy8gdG8gdGhlaXIgJ3JhdycgY291bnRlcnBhcnRzIGZvciB1c2UgYXMgYSBwb3N0Z3JlcyBwYXJhbWV0ZXJcbi8vIG5vdGU6IHlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiB0byBwcm92aWRlIHlvdXIgb3duIGNvbnZlcnNpb24gbWVjaGFuaXNtXG4vLyBmb3IgY29tcGxleCB0eXBlcywgZXRjLi4uXG52YXIgcHJlcGFyZVZhbHVlID0gZnVuY3Rpb24gKHZhbCwgc2VlbiwgdmFsdWVGb3JVbmRlZmluZWQpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICByZXR1cm4gZGF0ZVRvU3RyaW5nKHZhbCk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgIHJldHVybiBhcnJheVN0cmluZyh2YWwpO1xuICB9XG4gIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdmFsdWVGb3JVbmRlZmluZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHByZXBhcmVPYmplY3QodmFsLCBzZWVuKTtcbiAgfVxuICByZXR1cm4gdmFsLnRvU3RyaW5nKCk7XG59O1xuXG5wcmVwYXJlT2JqZWN0ID0gZnVuY3Rpb24gcHJlcGFyZU9iamVjdCh2YWwsIHNlZW4pIHtcbiAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsLnRvUG9zdGdyZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzZWVuID0gc2VlbiB8fCBbXTtcbiAgICBpZiAoc2Vlbi5pbmRleE9mKHZhbCkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCB3aGlsZSBwcmVwYXJpbmcgXCInICsgdmFsICsgJ1wiIGZvciBxdWVyeScpO1xuICAgIH1cbiAgICBzZWVuLnB1c2godmFsKTtcblxuICAgIHJldHVybiBwcmVwYXJlVmFsdWUodmFsLnRvUG9zdGdyZXMocHJlcGFyZVZhbHVlKSwgc2Vlbik7XG4gIH1cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbCk7XG59O1xuXG4vLyBjb252ZXJ0IGEgSlMgYXJyYXkgdG8gYSBwb3N0Z3JlcyBhcnJheSBsaXRlcmFsXG4vLyB1c2VzIGNvbW1hIHNlcGFyYXRvciBzbyB3b24ndCB3b3JrIGZvciB0eXBlcyBsaWtlIGJveCB0aGF0IHVzZVxuLy8gYSBkaWZmZXJlbnQgYXJyYXkgc2VwYXJhdG9yLlxuYXJyYXlTdHJpbmcgPSBmdW5jdGlvbiBhcnJheVN0cmluZyh2YWwpIHtcbiAgcmV0dXJuICd7JyArIHZhbC5tYXAoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICBpZiAoZWxlbSA9PT0gbnVsbCB8fCBlbGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnTlVMTCc7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGVsZW0pKSB7XG4gICAgICByZXR1cm4gYXJyYXlTdHJpbmcoZWxlbSk7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwcmVwYXJlVmFsdWUoZWxlbSkpO1xuICB9KS5qb2luKCcsJykgKyAnfSc7XG59O1xuXG5mdW5jdGlvbiBub3JtYWxpemVRdWVyeUNvbmZpZyhjb25maWcsIHZhbHVlcywgY2FsbGJhY2spIHtcbiAgLy9jYW4gdGFrZSBpbiBzdHJpbmdzIG9yIGNvbmZpZyBvYmplY3RzXG4gIGNvbmZpZyA9ICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykgPyB7IHRleHQ6IGNvbmZpZyB9IDogY29uZmlnO1xuICBpZiAodmFsdWVzKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbmZpZy5jYWxsYmFjayA9IHZhbHVlcztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnLnZhbHVlcyA9IHZhbHVlcztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgY29uZmlnLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cbiAgcmV0dXJuIGNvbmZpZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHByZXBhcmVWYWx1ZTogcHJlcGFyZVZhbHVlLFxuICBub3JtYWxpemVRdWVyeUNvbmZpZzogbm9ybWFsaXplUXVlcnlDb25maWdcbn07XG4iXX0=