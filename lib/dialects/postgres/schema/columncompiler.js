
// PostgreSQL Column Compiler
// -------

'use strict';

var inherits = require('inherits');
var ColumnCompiler = require('../../../schema/columncompiler');
var assign = require('lodash/object/assign');
var helpers = require('../../../helpers');

function ColumnCompiler_PG() {
  ColumnCompiler.apply(this, arguments);
  this.modifiers = ['nullable', 'defaultTo', 'comment'];
}
inherits(ColumnCompiler_PG, ColumnCompiler);

assign(ColumnCompiler_PG.prototype, {

  // Types
  // ------
  bigincrements: 'bigserial primary key',
  bigint: 'bigint',
  binary: 'bytea',

  bit: function bit(column) {
    return column.length !== false ? 'bit(' + column.length + ')' : 'bit';
  },

  bool: 'boolean',

  // Create the column definition for an enum type.
  // Using method "2" here: http://stackoverflow.com/a/10984951/525714
  enu: function enu(allowed) {
    return 'text check (' + this.formatter.wrap(this.args[0]) + " in ('" + allowed.join("', '") + "'))";
  },

  double: 'double precision',
  floating: 'real',
  increments: 'serial primary key',
  json: function json(jsonb) {
    if (jsonb) helpers.deprecate('json(true)', 'jsonb()');
    return jsonColumn(this.client, jsonb);
  },
  jsonb: function jsonb() {
    return jsonColumn(this.client, true);
  },
  smallint: 'smallint',
  tinyint: 'smallint',
  datetime: function datetime(without) {
    return without ? 'timestamp' : 'timestamptz';
  },
  timestamp: function timestamp(without) {
    return without ? 'timestamp' : 'timestamptz';
  },
  uuid: 'uuid',

  // Modifiers:
  // ------
  comment: function comment(_comment) {
    this.pushAdditional(function () {
      this.pushQuery('comment on column ' + this.tableCompiler.tableName() + '.' + this.formatter.wrap(this.args[0]) + " is " + (_comment ? "'" + _comment + "'" : 'NULL'));
    }, _comment);
  }

});

function jsonColumn(client, jsonb) {
  if (!client.version || parseFloat(client.version) >= 9.2) return jsonb ? 'jsonb' : 'json';
  return 'text';
}

module.exports = ColumnCompiler_PG;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9wb3N0Z3Jlcy9zY2hlbWEvY29sdW1uY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBSUEsSUFBSSxRQUFRLEdBQVMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3pDLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQy9ELElBQUksTUFBTSxHQUFXLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3JELElBQUksT0FBTyxHQUFVLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOztBQUVqRCxTQUFTLGlCQUFpQixHQUFHO0FBQzNCLGdCQUFjLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN0QyxNQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQTtDQUN0RDtBQUNELFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsQ0FBQzs7QUFFNUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRTs7OztBQUlsQyxlQUFhLEVBQUUsdUJBQXVCO0FBQ3RDLFFBQU0sRUFBRSxRQUFRO0FBQ2hCLFFBQU0sRUFBRSxPQUFPOztBQUVmLEtBQUcsRUFBRSxhQUFTLE1BQU0sRUFBRTtBQUNwQixXQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7R0FDdkU7O0FBRUQsTUFBSSxFQUFFLFNBQVM7Ozs7QUFJZixLQUFHLEVBQUUsYUFBUyxPQUFPLEVBQUU7QUFDckIsV0FBTyxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFJLEtBQUssQ0FBQztHQUN0Rzs7QUFFRCxRQUFNLEVBQUUsa0JBQWtCO0FBQzFCLFVBQVEsRUFBRSxNQUFNO0FBQ2hCLFlBQVUsRUFBRSxvQkFBb0I7QUFDaEMsTUFBSSxFQUFFLGNBQVMsS0FBSyxFQUFFO0FBQ3BCLFFBQUksS0FBSyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0FBQ3JELFdBQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDdkM7QUFDRCxPQUFLLEVBQUUsaUJBQVc7QUFDaEIsV0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztHQUN0QztBQUNELFVBQVEsRUFBRSxVQUFVO0FBQ3BCLFNBQU8sRUFBRyxVQUFVO0FBQ3BCLFVBQVEsRUFBRSxrQkFBUyxPQUFPLEVBQUU7QUFDMUIsV0FBTyxPQUFPLEdBQUcsV0FBVyxHQUFHLGFBQWEsQ0FBQztHQUM5QztBQUNELFdBQVMsRUFBRSxtQkFBUyxPQUFPLEVBQUU7QUFDM0IsV0FBTyxPQUFPLEdBQUcsV0FBVyxHQUFHLGFBQWEsQ0FBQztHQUM5QztBQUNELE1BQUksRUFBRSxNQUFNOzs7O0FBSVosU0FBTyxFQUFFLGlCQUFTLFFBQU8sRUFBRTtBQUN6QixRQUFJLENBQUMsY0FBYyxDQUFDLFlBQVc7QUFDN0IsVUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxHQUFHLEdBQUcsR0FDeEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxRQUFPLEdBQUcsR0FBRyxHQUFHLFFBQU8sR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFBLEFBQUMsQ0FBQyxDQUFDO0tBQzFGLEVBQUUsUUFBTyxDQUFDLENBQUM7R0FDYjs7Q0FFRixDQUFDLENBQUE7O0FBRUYsU0FBUyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRTtBQUNqQyxNQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxPQUFPLEtBQUssR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQzFGLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyIsImZpbGUiOiJjb2x1bW5jb21waWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gUG9zdGdyZVNRTCBDb2x1bW4gQ29tcGlsZXJcbi8vIC0tLS0tLS1cblxudmFyIGluaGVyaXRzICAgICAgID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBDb2x1bW5Db21waWxlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3NjaGVtYS9jb2x1bW5jb21waWxlcicpO1xudmFyIGFzc2lnbiAgICAgICAgID0gcmVxdWlyZSgnbG9kYXNoL29iamVjdC9hc3NpZ24nKTtcbnZhciBoZWxwZXJzICAgICAgICA9IHJlcXVpcmUoJy4uLy4uLy4uL2hlbHBlcnMnKTtcblxuZnVuY3Rpb24gQ29sdW1uQ29tcGlsZXJfUEcoKSB7XG4gIENvbHVtbkNvbXBpbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHRoaXMubW9kaWZpZXJzID0gWydudWxsYWJsZScsICdkZWZhdWx0VG8nLCAnY29tbWVudCddXG59XG5pbmhlcml0cyhDb2x1bW5Db21waWxlcl9QRywgQ29sdW1uQ29tcGlsZXIpO1xuXG5hc3NpZ24oQ29sdW1uQ29tcGlsZXJfUEcucHJvdG90eXBlLCB7XG5cbiAgLy8gVHlwZXNcbiAgLy8gLS0tLS0tXG4gIGJpZ2luY3JlbWVudHM6ICdiaWdzZXJpYWwgcHJpbWFyeSBrZXknLFxuICBiaWdpbnQ6ICdiaWdpbnQnLFxuICBiaW5hcnk6ICdieXRlYScsXG4gIFxuICBiaXQ6IGZ1bmN0aW9uKGNvbHVtbikge1xuICAgIHJldHVybiBjb2x1bW4ubGVuZ3RoICE9PSBmYWxzZSA/ICdiaXQoJyArIGNvbHVtbi5sZW5ndGggKyAnKScgOiAnYml0JztcbiAgfSxcbiAgXG4gIGJvb2w6ICdib29sZWFuJyxcblxuICAvLyBDcmVhdGUgdGhlIGNvbHVtbiBkZWZpbml0aW9uIGZvciBhbiBlbnVtIHR5cGUuXG4gIC8vIFVzaW5nIG1ldGhvZCBcIjJcIiBoZXJlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMDk4NDk1MS81MjU3MTRcbiAgZW51OiBmdW5jdGlvbihhbGxvd2VkKSB7XG4gICAgcmV0dXJuICd0ZXh0IGNoZWNrICgnICsgdGhpcy5mb3JtYXR0ZXIud3JhcCh0aGlzLmFyZ3NbMF0pICsgXCIgaW4gKCdcIiArIGFsbG93ZWQuam9pbihcIicsICdcIikgICsgXCInKSlcIjtcbiAgfSxcblxuICBkb3VibGU6ICdkb3VibGUgcHJlY2lzaW9uJyxcbiAgZmxvYXRpbmc6ICdyZWFsJyxcbiAgaW5jcmVtZW50czogJ3NlcmlhbCBwcmltYXJ5IGtleScsXG4gIGpzb246IGZ1bmN0aW9uKGpzb25iKSB7XG4gICAgaWYgKGpzb25iKSBoZWxwZXJzLmRlcHJlY2F0ZSgnanNvbih0cnVlKScsICdqc29uYigpJylcbiAgICByZXR1cm4ganNvbkNvbHVtbih0aGlzLmNsaWVudCwganNvbmIpO1xuICB9LFxuICBqc29uYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGpzb25Db2x1bW4odGhpcy5jbGllbnQsIHRydWUpO1xuICB9LFxuICBzbWFsbGludDogJ3NtYWxsaW50JyxcbiAgdGlueWludDogICdzbWFsbGludCcsXG4gIGRhdGV0aW1lOiBmdW5jdGlvbih3aXRob3V0KSB7XG4gICAgcmV0dXJuIHdpdGhvdXQgPyAndGltZXN0YW1wJyA6ICd0aW1lc3RhbXB0eic7XG4gIH0sXG4gIHRpbWVzdGFtcDogZnVuY3Rpb24od2l0aG91dCkge1xuICAgIHJldHVybiB3aXRob3V0ID8gJ3RpbWVzdGFtcCcgOiAndGltZXN0YW1wdHonO1xuICB9LFxuICB1dWlkOiAndXVpZCcsXG5cbiAgLy8gTW9kaWZpZXJzOlxuICAvLyAtLS0tLS1cbiAgY29tbWVudDogZnVuY3Rpb24oY29tbWVudCkge1xuICAgIHRoaXMucHVzaEFkZGl0aW9uYWwoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnB1c2hRdWVyeSgnY29tbWVudCBvbiBjb2x1bW4gJyArIHRoaXMudGFibGVDb21waWxlci50YWJsZU5hbWUoKSArICcuJyArXG4gICAgICAgIHRoaXMuZm9ybWF0dGVyLndyYXAodGhpcy5hcmdzWzBdKSArIFwiIGlzIFwiICsgKGNvbW1lbnQgPyBcIidcIiArIGNvbW1lbnQgKyBcIidcIiA6ICdOVUxMJykpO1xuICAgIH0sIGNvbW1lbnQpO1xuICB9XG5cbn0pXG5cbmZ1bmN0aW9uIGpzb25Db2x1bW4oY2xpZW50LCBqc29uYikge1xuICBpZiAoIWNsaWVudC52ZXJzaW9uIHx8IHBhcnNlRmxvYXQoY2xpZW50LnZlcnNpb24pID49IDkuMikgcmV0dXJuIGpzb25iID8gJ2pzb25iJyA6ICdqc29uJztcbiAgcmV0dXJuICd0ZXh0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb2x1bW5Db21waWxlcl9QRztcbiJdfQ==