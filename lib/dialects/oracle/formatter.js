'use strict';

var inherits = require('inherits');
var assign = require('lodash/object/assign');
var Formatter = require('../../formatter');
var ReturningHelper = require('./utils').ReturningHelper;

function Oracle_Formatter(client) {
  Formatter.call(this, client);
}
inherits(Oracle_Formatter, Formatter);

assign(Oracle_Formatter.prototype, {

  alias: function alias(first, second) {
    return first + ' ' + second;
  },

  parameter: function parameter(value, notSetValue) {
    // Returning helper uses always ROWID as string
    if (value instanceof ReturningHelper && this.client.driver) {
      value = new this.client.driver.OutParam(this.client.driver.OCCISTRING);
    } else if (typeof value === 'boolean') {
      value = value ? 1 : 0;
    }
    return Formatter.prototype.parameter.call(this, value, notSetValue);
  }

});

module.exports = Oracle_Formatter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy9vcmFjbGUvZm9ybWF0dGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsSUFBSSxRQUFRLEdBQVUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ3pDLElBQUksTUFBTSxHQUFZLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0FBQ3JELElBQUksU0FBUyxHQUFTLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0FBQ2hELElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxlQUFlLENBQUE7O0FBRXhELFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ2hDLFdBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0NBQzdCO0FBQ0QsUUFBUSxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFBOztBQUVyQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFOztBQUVqQyxPQUFLLEVBQUUsZUFBUyxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQzdCLFdBQU8sS0FBSyxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7R0FDN0I7O0FBRUQsV0FBUyxFQUFFLG1CQUFTLEtBQUssRUFBRSxXQUFXLEVBQUU7O0FBRXRDLFFBQUksS0FBSyxZQUFZLGVBQWUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUMxRCxXQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7S0FDdkUsTUFDSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsRUFBRTtBQUNuQyxXQUFLLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDdEI7QUFDRCxXQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0dBQ3BFOztDQUVGLENBQUMsQ0FBQTs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFBIiwiZmlsZSI6ImZvcm1hdHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGluaGVyaXRzICAgICAgICA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBhc3NpZ24gICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gvb2JqZWN0L2Fzc2lnbicpXG52YXIgRm9ybWF0dGVyICAgICAgID0gcmVxdWlyZSgnLi4vLi4vZm9ybWF0dGVyJylcbnZhciBSZXR1cm5pbmdIZWxwZXIgPSByZXF1aXJlKCcuL3V0aWxzJykuUmV0dXJuaW5nSGVscGVyXG5cbmZ1bmN0aW9uIE9yYWNsZV9Gb3JtYXR0ZXIoY2xpZW50KSB7XG4gIEZvcm1hdHRlci5jYWxsKHRoaXMsIGNsaWVudClcbn1cbmluaGVyaXRzKE9yYWNsZV9Gb3JtYXR0ZXIsIEZvcm1hdHRlcilcblxuYXNzaWduKE9yYWNsZV9Gb3JtYXR0ZXIucHJvdG90eXBlLCB7XG5cbiAgYWxpYXM6IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQpIHtcbiAgICByZXR1cm4gZmlyc3QgKyAnICcgKyBzZWNvbmQ7XG4gIH0sXG5cbiAgcGFyYW1ldGVyOiBmdW5jdGlvbih2YWx1ZSwgbm90U2V0VmFsdWUpIHtcbiAgICAvLyBSZXR1cm5pbmcgaGVscGVyIHVzZXMgYWx3YXlzIFJPV0lEIGFzIHN0cmluZ1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJldHVybmluZ0hlbHBlciAmJiB0aGlzLmNsaWVudC5kcml2ZXIpIHtcbiAgICAgIHZhbHVlID0gbmV3IHRoaXMuY2xpZW50LmRyaXZlci5PdXRQYXJhbSh0aGlzLmNsaWVudC5kcml2ZXIuT0NDSVNUUklORylcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgPyAxIDogMFxuICAgIH1cbiAgICByZXR1cm4gRm9ybWF0dGVyLnByb3RvdHlwZS5wYXJhbWV0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgbm90U2V0VmFsdWUpXG4gIH1cblxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBPcmFjbGVfRm9ybWF0dGVyIl19