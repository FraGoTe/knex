
/*jslint node:true, nomen: true*/
'use strict';

var inherits = require('inherits');
var merge = require('lodash/object/merge');
var Readable = require('stream').Readable;

function OracleQueryStream(connection, sql, bindings, options) {
  Readable.call(this, merge({}, {
    objectMode: true,
    highWaterMark: 1000
  }, options));
  this.oracleReader = connection.reader(sql, bindings || []);
}
inherits(OracleQueryStream, Readable);

OracleQueryStream.prototype._read = function () {
  var _this = this;

  var pushNull = function pushNull() {
    process.nextTick(function () {
      _this.push(null);
    });
  };
  try {
    this.oracleReader.nextRows(function (err, rows) {
      if (err) return _this.emit('error', err);
      if (rows.length === 0) {
        pushNull();
      } else {
        for (var i = 0; i < rows.length; i++) {
          if (rows[i]) {
            _this.push(rows[i]);
          } else {
            pushNull();
          }
        }
      }
    });
  } catch (e) {
    // Catch Error: invalid state: reader is busy with another nextRows call
    // and return false to rate limit stream.
    if (e.message === 'invalid state: reader is busy with another nextRows call') {
      return false;
    } else {
      this.emit('error', e);
    }
  }
};

module.exports = OracleQueryStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy9vcmFjbGUvc3RyZWFtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDbEMsSUFBSSxLQUFLLEdBQU0sT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUE7QUFDN0MsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQTs7QUFFekMsU0FBUyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUU7QUFDN0QsVUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtBQUM1QixjQUFVLEVBQUUsSUFBSTtBQUNoQixpQkFBYSxFQUFFLElBQUk7R0FDcEIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO0FBQ1osTUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxRQUFRLElBQUksRUFBRSxDQUFDLENBQUE7Q0FDM0Q7QUFDRCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxDQUFDLENBQUE7O0FBRXJDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsWUFBVzs7O0FBQzdDLE1BQUksUUFBUSxHQUFHLFNBQVgsUUFBUSxHQUFTO0FBQ25CLFdBQU8sQ0FBQyxRQUFRLENBQUMsWUFBTTtBQUNyQixZQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUNoQixDQUFDLENBQUE7R0FDSCxDQUFBO0FBQ0QsTUFBSTtBQUNGLFFBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQUMsR0FBRyxFQUFFLElBQUksRUFBSztBQUN4QyxVQUFJLEdBQUcsRUFBRSxPQUFPLE1BQUssSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUN2QyxVQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQ3JCLGdCQUFRLEVBQUUsQ0FBQTtPQUNYLE1BQU07QUFDTCxhQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNwQyxjQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNYLGtCQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtXQUNuQixNQUFNO0FBQ0wsb0JBQVEsRUFBRSxDQUFBO1dBQ1g7U0FDRjtPQUNGO0tBQ0YsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxPQUFPLENBQUMsRUFBRTs7O0FBR1YsUUFBSSxDQUFDLENBQUMsT0FBTyxLQUNYLDBEQUEwRCxFQUFFO0FBQzVELGFBQU8sS0FBSyxDQUFBO0tBQ2IsTUFBTTtBQUNMLFVBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO0tBQ3RCO0dBQ0Y7Q0FDRixDQUFBOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsaUJBQWlCLENBQUEiLCJmaWxlIjoic3RyZWFtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKmpzbGludCBub2RlOnRydWUsIG5vbWVuOiB0cnVlKi9cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBtZXJnZSAgICA9IHJlcXVpcmUoJ2xvZGFzaC9vYmplY3QvbWVyZ2UnKVxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnc3RyZWFtJykuUmVhZGFibGVcblxuZnVuY3Rpb24gT3JhY2xlUXVlcnlTdHJlYW0oY29ubmVjdGlvbiwgc3FsLCBiaW5kaW5ncywgb3B0aW9ucykge1xuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG1lcmdlKHt9LCB7XG4gICAgb2JqZWN0TW9kZTogdHJ1ZSxcbiAgICBoaWdoV2F0ZXJNYXJrOiAxMDAwXG4gIH0sIG9wdGlvbnMpKVxuICB0aGlzLm9yYWNsZVJlYWRlciA9IGNvbm5lY3Rpb24ucmVhZGVyKHNxbCwgYmluZGluZ3MgfHwgW10pXG59XG5pbmhlcml0cyhPcmFjbGVRdWVyeVN0cmVhbSwgUmVhZGFibGUpXG5cbk9yYWNsZVF1ZXJ5U3RyZWFtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcHVzaE51bGwgPSAoKSA9PiB7XG4gICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgICB0aGlzLnB1c2gobnVsbClcbiAgICB9KVxuICB9XG4gIHRyeSB7XG4gICAgdGhpcy5vcmFjbGVSZWFkZXIubmV4dFJvd3MoKGVyciwgcm93cykgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpXG4gICAgICBpZiAocm93cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcHVzaE51bGwoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHJvd3NbaV0pIHtcbiAgICAgICAgICAgIHRoaXMucHVzaChyb3dzW2ldKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdXNoTnVsbCgpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIENhdGNoIEVycm9yOiBpbnZhbGlkIHN0YXRlOiByZWFkZXIgaXMgYnVzeSB3aXRoIGFub3RoZXIgbmV4dFJvd3MgY2FsbFxuICAgIC8vIGFuZCByZXR1cm4gZmFsc2UgdG8gcmF0ZSBsaW1pdCBzdHJlYW0uXG4gICAgaWYgKGUubWVzc2FnZSA9PT1cbiAgICAgICdpbnZhbGlkIHN0YXRlOiByZWFkZXIgaXMgYnVzeSB3aXRoIGFub3RoZXIgbmV4dFJvd3MgY2FsbCcpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZSlcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPcmFjbGVRdWVyeVN0cmVhbSJdfQ==