
// Oracle Schema Compiler
// -------
'use strict';

var inherits = require('inherits');
var SchemaCompiler = require('../../../schema/compiler');
var utils = require('../utils');

function SchemaCompiler_Oracle() {
  SchemaCompiler.apply(this, arguments);
}
inherits(SchemaCompiler_Oracle, SchemaCompiler);

// Rename a table on the schema.
SchemaCompiler_Oracle.prototype.renameTable = function (tableName, to) {
  this.pushQuery('rename ' + this.formatter.wrap(tableName) + ' to ' + this.formatter.wrap(to));
};

// Check whether a table exists on the query.
SchemaCompiler_Oracle.prototype.hasTable = function (tableName) {
  this.pushQuery({
    sql: 'select TABLE_NAME from USER_TABLES where TABLE_NAME = ' + this.formatter.parameter(tableName),
    output: function output(resp) {
      return resp.length > 0;
    }
  });
};

// Check whether a column exists on the schema.
SchemaCompiler_Oracle.prototype.hasColumn = function (tableName, column) {
  this.pushQuery({
    sql: 'select COLUMN_NAME from USER_TAB_COLUMNS where TABLE_NAME = ' + this.formatter.parameter(tableName) + ' and COLUMN_NAME = ' + this.formatter.parameter(column),
    output: function output(resp) {
      return resp.length > 0;
    }
  });
};

SchemaCompiler_Oracle.prototype.dropSequenceIfExists = function (sequenceName) {
  this.pushQuery(utils.wrapSqlWithCatch("drop sequence " + this.formatter.wrap(sequenceName), -2289));
};

SchemaCompiler_Oracle.prototype._dropRelatedSequenceIfExists = function (tableName) {
  // removing the sequence that was possibly generated by increments() column
  var sequenceName = utils.generateCombinedName('seq', tableName);
  this.dropSequenceIfExists(sequenceName);
};

SchemaCompiler_Oracle.prototype.dropTable = function (tableName) {
  this.pushQuery('drop table ' + this.formatter.wrap(tableName));

  // removing the sequence that was possibly generated by increments() column
  this._dropRelatedSequenceIfExists(tableName);
};

SchemaCompiler_Oracle.prototype.dropTableIfExists = function (tableName) {
  this.pushQuery(utils.wrapSqlWithCatch("drop table " + this.formatter.wrap(tableName), -942));

  // removing the sequence that was possibly generated by increments() column
  this._dropRelatedSequenceIfExists(tableName);
};

module.exports = SchemaCompiler_Oracle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9vcmFjbGUvc2NoZW1hL2NvbXBpbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsSUFBSSxRQUFRLEdBQVMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3pDLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ3pELElBQUksS0FBSyxHQUFZLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzs7QUFFekMsU0FBUyxxQkFBcUIsR0FBRztBQUMvQixnQkFBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDdkM7QUFDRCxRQUFRLENBQUMscUJBQXFCLEVBQUUsY0FBYyxDQUFDLENBQUM7OztBQUdoRCxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVMsU0FBUyxFQUFFLEVBQUUsRUFBRTtBQUNwRSxNQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMvRixDQUFDOzs7QUFHRixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVMsU0FBUyxFQUFFO0FBQzdELE1BQUksQ0FBQyxTQUFTLENBQUM7QUFDYixPQUFHLEVBQUUsd0RBQXdELEdBQzNELElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUNyQyxVQUFNLEVBQUUsZ0JBQVMsSUFBSSxFQUFFO0FBQ3JCLGFBQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7S0FDeEI7R0FDRixDQUFDLENBQUM7Q0FDSixDQUFDOzs7QUFHRixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVMsU0FBUyxFQUFFLE1BQU0sRUFBRTtBQUN0RSxNQUFJLENBQUMsU0FBUyxDQUFDO0FBQ2IsT0FBRyxFQUFFLDhEQUE4RCxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUN2RyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDMUQsVUFBTSxFQUFFLGdCQUFTLElBQUksRUFBRTtBQUNyQixhQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0tBQ3hCO0dBQ0YsQ0FBQyxDQUFDO0NBQ0osQ0FBQzs7QUFFRixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEdBQUcsVUFBVSxZQUFZLEVBQUU7QUFDN0UsTUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQ3JHLENBQUM7O0FBRUYscUJBQXFCLENBQUMsU0FBUyxDQUFDLDRCQUE0QixHQUFHLFVBQVUsU0FBUyxFQUFFOztBQUVsRixNQUFJLFlBQVksR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2hFLE1BQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUN6QyxDQUFDOztBQUVGLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsVUFBVSxTQUFTLEVBQUU7QUFDL0QsTUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzs7O0FBRy9ELE1BQUksQ0FBQyw0QkFBNEIsQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUM5QyxDQUFDOztBQUVGLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxVQUFTLFNBQVMsRUFBRTtBQUN0RSxNQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzs7QUFHN0YsTUFBSSxDQUFDLDRCQUE0QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQzlDLENBQUM7O0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyIsImZpbGUiOiJjb21waWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gT3JhY2xlIFNjaGVtYSBDb21waWxlclxuLy8gLS0tLS0tLVxudmFyIGluaGVyaXRzICAgICAgID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBTY2hlbWFDb21waWxlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3NjaGVtYS9jb21waWxlcicpO1xudmFyIHV0aWxzICAgICAgICAgID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gU2NoZW1hQ29tcGlsZXJfT3JhY2xlKCkge1xuICBTY2hlbWFDb21waWxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuaW5oZXJpdHMoU2NoZW1hQ29tcGlsZXJfT3JhY2xlLCBTY2hlbWFDb21waWxlcik7XG5cbi8vIFJlbmFtZSBhIHRhYmxlIG9uIHRoZSBzY2hlbWEuXG5TY2hlbWFDb21waWxlcl9PcmFjbGUucHJvdG90eXBlLnJlbmFtZVRhYmxlID0gZnVuY3Rpb24odGFibGVOYW1lLCB0bykge1xuICB0aGlzLnB1c2hRdWVyeSgncmVuYW1lICcgKyB0aGlzLmZvcm1hdHRlci53cmFwKHRhYmxlTmFtZSkgKyAnIHRvICcgKyB0aGlzLmZvcm1hdHRlci53cmFwKHRvKSk7XG59O1xuXG4vLyBDaGVjayB3aGV0aGVyIGEgdGFibGUgZXhpc3RzIG9uIHRoZSBxdWVyeS5cblNjaGVtYUNvbXBpbGVyX09yYWNsZS5wcm90b3R5cGUuaGFzVGFibGUgPSBmdW5jdGlvbih0YWJsZU5hbWUpIHtcbiAgdGhpcy5wdXNoUXVlcnkoe1xuICAgIHNxbDogJ3NlbGVjdCBUQUJMRV9OQU1FIGZyb20gVVNFUl9UQUJMRVMgd2hlcmUgVEFCTEVfTkFNRSA9ICcgK1xuICAgICAgdGhpcy5mb3JtYXR0ZXIucGFyYW1ldGVyKHRhYmxlTmFtZSksXG4gICAgb3V0cHV0OiBmdW5jdGlvbihyZXNwKSB7XG4gICAgICByZXR1cm4gcmVzcC5sZW5ndGggPiAwO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vLyBDaGVjayB3aGV0aGVyIGEgY29sdW1uIGV4aXN0cyBvbiB0aGUgc2NoZW1hLlxuU2NoZW1hQ29tcGlsZXJfT3JhY2xlLnByb3RvdHlwZS5oYXNDb2x1bW4gPSBmdW5jdGlvbih0YWJsZU5hbWUsIGNvbHVtbikge1xuICB0aGlzLnB1c2hRdWVyeSh7XG4gICAgc3FsOiAnc2VsZWN0IENPTFVNTl9OQU1FIGZyb20gVVNFUl9UQUJfQ09MVU1OUyB3aGVyZSBUQUJMRV9OQU1FID0gJyArIHRoaXMuZm9ybWF0dGVyLnBhcmFtZXRlcih0YWJsZU5hbWUpICtcbiAgICAgICcgYW5kIENPTFVNTl9OQU1FID0gJyArIHRoaXMuZm9ybWF0dGVyLnBhcmFtZXRlcihjb2x1bW4pLFxuICAgIG91dHB1dDogZnVuY3Rpb24ocmVzcCkge1xuICAgICAgcmV0dXJuIHJlc3AubGVuZ3RoID4gMDtcbiAgICB9XG4gIH0pO1xufTtcblxuU2NoZW1hQ29tcGlsZXJfT3JhY2xlLnByb3RvdHlwZS5kcm9wU2VxdWVuY2VJZkV4aXN0cyA9IGZ1bmN0aW9uIChzZXF1ZW5jZU5hbWUpIHtcbiAgdGhpcy5wdXNoUXVlcnkodXRpbHMud3JhcFNxbFdpdGhDYXRjaChcImRyb3Agc2VxdWVuY2UgXCIgKyB0aGlzLmZvcm1hdHRlci53cmFwKHNlcXVlbmNlTmFtZSksIC0yMjg5KSk7XG59O1xuXG5TY2hlbWFDb21waWxlcl9PcmFjbGUucHJvdG90eXBlLl9kcm9wUmVsYXRlZFNlcXVlbmNlSWZFeGlzdHMgPSBmdW5jdGlvbiAodGFibGVOYW1lKSB7XG4gIC8vIHJlbW92aW5nIHRoZSBzZXF1ZW5jZSB0aGF0IHdhcyBwb3NzaWJseSBnZW5lcmF0ZWQgYnkgaW5jcmVtZW50cygpIGNvbHVtblxuICB2YXIgc2VxdWVuY2VOYW1lID0gdXRpbHMuZ2VuZXJhdGVDb21iaW5lZE5hbWUoJ3NlcScsIHRhYmxlTmFtZSk7XG4gIHRoaXMuZHJvcFNlcXVlbmNlSWZFeGlzdHMoc2VxdWVuY2VOYW1lKTtcbn07XG5cblNjaGVtYUNvbXBpbGVyX09yYWNsZS5wcm90b3R5cGUuZHJvcFRhYmxlID0gZnVuY3Rpb24gKHRhYmxlTmFtZSkge1xuICB0aGlzLnB1c2hRdWVyeSgnZHJvcCB0YWJsZSAnICsgdGhpcy5mb3JtYXR0ZXIud3JhcCh0YWJsZU5hbWUpKTtcblxuICAvLyByZW1vdmluZyB0aGUgc2VxdWVuY2UgdGhhdCB3YXMgcG9zc2libHkgZ2VuZXJhdGVkIGJ5IGluY3JlbWVudHMoKSBjb2x1bW5cbiAgdGhpcy5fZHJvcFJlbGF0ZWRTZXF1ZW5jZUlmRXhpc3RzKHRhYmxlTmFtZSk7XG59O1xuXG5TY2hlbWFDb21waWxlcl9PcmFjbGUucHJvdG90eXBlLmRyb3BUYWJsZUlmRXhpc3RzID0gZnVuY3Rpb24odGFibGVOYW1lKSB7XG4gIHRoaXMucHVzaFF1ZXJ5KHV0aWxzLndyYXBTcWxXaXRoQ2F0Y2goXCJkcm9wIHRhYmxlIFwiICsgdGhpcy5mb3JtYXR0ZXIud3JhcCh0YWJsZU5hbWUpLCAtOTQyKSk7XG5cbiAgLy8gcmVtb3ZpbmcgdGhlIHNlcXVlbmNlIHRoYXQgd2FzIHBvc3NpYmx5IGdlbmVyYXRlZCBieSBpbmNyZW1lbnRzKCkgY29sdW1uXG4gIHRoaXMuX2Ryb3BSZWxhdGVkU2VxdWVuY2VJZkV4aXN0cyh0YWJsZU5hbWUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFDb21waWxlcl9PcmFjbGU7XG4iXX0=