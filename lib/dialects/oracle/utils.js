'use strict';

var helpers = require('../../helpers');

function generateCombinedName(postfix, name, subNames) {
  var crypto = require('crypto');
  var limit = 30;
  if (!Array.isArray(subNames)) subNames = subNames ? [subNames] : [];
  var table = name.replace(/\.|-/g, '_');
  var subNamesPart = subNames.join('_');
  var result = (table + '_' + (subNamesPart.length ? subNamesPart + '_' : '') + postfix).toLowerCase();
  if (result.length > limit) {
    helpers.warn('Automatically generated name "' + result + '" exceeds ' + limit + ' character limit for Oracle. Using base64 encoded sha1 of that name instead.');
    // generates the sha1 of the name and encode it with base64
    result = crypto.createHash('sha1').update(result).digest('base64').replace('=', '');
  }
  return result;
}

function wrapSqlWithCatch(sql, errorNumberToCatch) {
  return "begin execute immediate '" + sql.replace(/'/g, "''") + "'; exception when others then if sqlcode != " + errorNumberToCatch + " then raise; end if; end;";
}

function ReturningHelper(columnName) {
  this.columnName = columnName;
}

ReturningHelper.prototype.toString = function () {
  return '[object ReturningHelper:' + this.columnName + ']';
};

module.exports = {
  generateCombinedName: generateCombinedName,
  wrapSqlWithCatch: wrapSqlWithCatch,
  ReturningHelper: ReturningHelper
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy9vcmFjbGUvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRXZDLFNBQVMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDckQsTUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9CLE1BQUksS0FBSyxHQUFJLEVBQUUsQ0FBQztBQUNoQixNQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEdBQUcsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3BFLE1BQUksS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLE1BQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEMsTUFBSSxNQUFNLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsWUFBWSxHQUFHLEdBQUcsR0FBRSxFQUFFLENBQUEsQUFBQyxHQUFHLE9BQU8sQ0FBQSxDQUFFLFdBQVcsRUFBRSxDQUFDO0FBQ3BHLE1BQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUU7QUFDekIsV0FBTyxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxNQUFNLEdBQUcsWUFBWSxHQUFHLEtBQUssR0FBRyw4RUFBOEUsQ0FBQyxDQUFDOztBQUVoSyxVQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FDL0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUNkLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FDaEIsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztHQUNyQjtBQUNELFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUU7QUFDakQsU0FBTywyQkFBMkIsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyw4Q0FBOEMsR0FBRyxrQkFBa0IsR0FBRywyQkFBMkIsQ0FBQztDQUNsSzs7QUFFRCxTQUFTLGVBQWUsQ0FBQyxVQUFVLEVBQUU7QUFDbkMsTUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7Q0FDOUI7O0FBRUQsZUFBZSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsWUFBWTtBQUMvQyxTQUFPLDBCQUEwQixHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0NBQzNELENBQUE7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLHNCQUFvQixFQUFFLG9CQUFvQjtBQUMxQyxrQkFBZ0IsRUFBRSxnQkFBZ0I7QUFDbEMsaUJBQWUsRUFBRSxlQUFlO0NBQ2pDLENBQUMiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycycpO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbWJpbmVkTmFtZShwb3N0Zml4LCBuYW1lLCBzdWJOYW1lcykge1xuICB2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gIHZhciBsaW1pdCAgPSAzMDtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHN1Yk5hbWVzKSkgc3ViTmFtZXMgPSBzdWJOYW1lcyA/IFtzdWJOYW1lc10gOiBbXTtcbiAgdmFyIHRhYmxlID0gbmFtZS5yZXBsYWNlKC9cXC58LS9nLCAnXycpO1xuICB2YXIgc3ViTmFtZXNQYXJ0ID0gc3ViTmFtZXMuam9pbignXycpO1xuICB2YXIgcmVzdWx0ID0gKHRhYmxlICsgJ18nICsgKHN1Yk5hbWVzUGFydC5sZW5ndGggPyBzdWJOYW1lc1BhcnQgKyAnXyc6ICcnKSArIHBvc3RmaXgpLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChyZXN1bHQubGVuZ3RoID4gbGltaXQpIHtcbiAgICBoZWxwZXJzLndhcm4oJ0F1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIG5hbWUgXCInICsgcmVzdWx0ICsgJ1wiIGV4Y2VlZHMgJyArIGxpbWl0ICsgJyBjaGFyYWN0ZXIgbGltaXQgZm9yIE9yYWNsZS4gVXNpbmcgYmFzZTY0IGVuY29kZWQgc2hhMSBvZiB0aGF0IG5hbWUgaW5zdGVhZC4nKTtcbiAgICAvLyBnZW5lcmF0ZXMgdGhlIHNoYTEgb2YgdGhlIG5hbWUgYW5kIGVuY29kZSBpdCB3aXRoIGJhc2U2NFxuICAgIHJlc3VsdCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJylcbiAgICAgIC51cGRhdGUocmVzdWx0KVxuICAgICAgLmRpZ2VzdCgnYmFzZTY0JylcbiAgICAgIC5yZXBsYWNlKCc9JywgJycpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHdyYXBTcWxXaXRoQ2F0Y2goc3FsLCBlcnJvck51bWJlclRvQ2F0Y2gpIHtcbiAgcmV0dXJuIFwiYmVnaW4gZXhlY3V0ZSBpbW1lZGlhdGUgJ1wiICsgc3FsLnJlcGxhY2UoLycvZywgXCInJ1wiKSArIFwiJzsgZXhjZXB0aW9uIHdoZW4gb3RoZXJzIHRoZW4gaWYgc3FsY29kZSAhPSBcIiArIGVycm9yTnVtYmVyVG9DYXRjaCArIFwiIHRoZW4gcmFpc2U7IGVuZCBpZjsgZW5kO1wiO1xufVxuXG5mdW5jdGlvbiBSZXR1cm5pbmdIZWxwZXIoY29sdW1uTmFtZSkge1xuICB0aGlzLmNvbHVtbk5hbWUgPSBjb2x1bW5OYW1lO1xufVxuXG5SZXR1cm5pbmdIZWxwZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ1tvYmplY3QgUmV0dXJuaW5nSGVscGVyOicgKyB0aGlzLmNvbHVtbk5hbWUgKyAnXSc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZW5lcmF0ZUNvbWJpbmVkTmFtZTogZ2VuZXJhdGVDb21iaW5lZE5hbWUsXG4gIHdyYXBTcWxXaXRoQ2F0Y2g6IHdyYXBTcWxXaXRoQ2F0Y2gsXG4gIFJldHVybmluZ0hlbHBlcjogUmV0dXJuaW5nSGVscGVyXG59O1xuIl19