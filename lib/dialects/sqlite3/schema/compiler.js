
// SQLite3: Column Builder & Compiler
// -------
'use strict';

var _ = require('lodash');
var inherits = require('inherits');
var SchemaCompiler = require('../../../schema/compiler');

// Schema Compiler
// -------

function SchemaCompiler_SQLite3() {
  SchemaCompiler.apply(this, arguments);
}
inherits(SchemaCompiler_SQLite3, SchemaCompiler);

// Compile the query to determine if a table exists.
SchemaCompiler_SQLite3.prototype.hasTable = function (tableName) {
  this.pushQuery({
    sql: "select * from sqlite_master where type = 'table' and name = " + this.formatter.parameter(tableName),
    output: function output(resp) {
      return resp.length > 0;
    }
  });
};

// Compile the query to determine if a column exists.
SchemaCompiler_SQLite3.prototype.hasColumn = function (tableName, column) {
  this.pushQuery({
    sql: 'PRAGMA table_info(' + this.formatter.wrap(tableName) + ')',
    output: function output(resp) {
      return _.some(resp, { name: column });
    }
  });
};

// Compile a rename table command.
SchemaCompiler_SQLite3.prototype.renameTable = function (from, to) {
  this.pushQuery('alter table ' + this.formatter.wrap(from) + ' rename to ' + this.formatter.wrap(to));
};

module.exports = SchemaCompiler_SQLite3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9zcWxpdGUzL3NjaGVtYS9jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLElBQUksQ0FBQyxHQUFVLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsSUFBSSxjQUFjLEdBQUssT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7Ozs7O0FBSzNELFNBQVMsc0JBQXNCLEdBQUc7QUFDaEMsZ0JBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0NBQ3ZDO0FBQ0QsUUFBUSxDQUFDLHNCQUFzQixFQUFFLGNBQWMsQ0FBQyxDQUFDOzs7QUFHakQsc0JBQXNCLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxVQUFTLFNBQVMsRUFBRTtBQUM5RCxNQUFJLENBQUMsU0FBUyxDQUFDO0FBQ2IsT0FBRyxFQUFFLDhEQUE4RCxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUN6RyxVQUFNLEVBQUUsZ0JBQVMsSUFBSSxFQUFFO0FBQ3JCLGFBQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7S0FDeEI7R0FDRixDQUFDLENBQUM7Q0FDSixDQUFDOzs7QUFHRixzQkFBc0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVMsU0FBUyxFQUFFLE1BQU0sRUFBRTtBQUN2RSxNQUFJLENBQUMsU0FBUyxDQUFDO0FBQ2IsT0FBRyxFQUFFLG9CQUFvQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEUsVUFBTSxFQUFFLGdCQUFTLElBQUksRUFBRTtBQUNyQixhQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7S0FDckM7R0FDRixDQUFDLENBQUM7Q0FDSixDQUFDOzs7QUFHRixzQkFBc0IsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNoRSxNQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUN0RyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsc0JBQXNCLENBQUMiLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIFNRTGl0ZTM6IENvbHVtbiBCdWlsZGVyICYgQ29tcGlsZXJcbi8vIC0tLS0tLS1cbnZhciBfICAgICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBTY2hlbWFDb21waWxlciAgID0gcmVxdWlyZSgnLi4vLi4vLi4vc2NoZW1hL2NvbXBpbGVyJyk7XG5cbi8vIFNjaGVtYSBDb21waWxlclxuLy8gLS0tLS0tLVxuXG5mdW5jdGlvbiBTY2hlbWFDb21waWxlcl9TUUxpdGUzKCkge1xuICBTY2hlbWFDb21waWxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuaW5oZXJpdHMoU2NoZW1hQ29tcGlsZXJfU1FMaXRlMywgU2NoZW1hQ29tcGlsZXIpO1xuXG4vLyBDb21waWxlIHRoZSBxdWVyeSB0byBkZXRlcm1pbmUgaWYgYSB0YWJsZSBleGlzdHMuXG5TY2hlbWFDb21waWxlcl9TUUxpdGUzLnByb3RvdHlwZS5oYXNUYWJsZSA9IGZ1bmN0aW9uKHRhYmxlTmFtZSkge1xuICB0aGlzLnB1c2hRdWVyeSh7XG4gICAgc3FsOiBcInNlbGVjdCAqIGZyb20gc3FsaXRlX21hc3RlciB3aGVyZSB0eXBlID0gJ3RhYmxlJyBhbmQgbmFtZSA9IFwiICsgdGhpcy5mb3JtYXR0ZXIucGFyYW1ldGVyKHRhYmxlTmFtZSksXG4gICAgb3V0cHV0OiBmdW5jdGlvbihyZXNwKSB7XG4gICAgICByZXR1cm4gcmVzcC5sZW5ndGggPiAwO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vLyBDb21waWxlIHRoZSBxdWVyeSB0byBkZXRlcm1pbmUgaWYgYSBjb2x1bW4gZXhpc3RzLlxuU2NoZW1hQ29tcGlsZXJfU1FMaXRlMy5wcm90b3R5cGUuaGFzQ29sdW1uID0gZnVuY3Rpb24odGFibGVOYW1lLCBjb2x1bW4pIHtcbiAgdGhpcy5wdXNoUXVlcnkoe1xuICAgIHNxbDogJ1BSQUdNQSB0YWJsZV9pbmZvKCcgKyB0aGlzLmZvcm1hdHRlci53cmFwKHRhYmxlTmFtZSkgKyAnKScsXG4gICAgb3V0cHV0OiBmdW5jdGlvbihyZXNwKSB7XG4gICAgICByZXR1cm4gXy5zb21lKHJlc3AsIHtuYW1lOiBjb2x1bW59KTtcbiAgICB9XG4gIH0pO1xufTtcblxuLy8gQ29tcGlsZSBhIHJlbmFtZSB0YWJsZSBjb21tYW5kLlxuU2NoZW1hQ29tcGlsZXJfU1FMaXRlMy5wcm90b3R5cGUucmVuYW1lVGFibGUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICB0aGlzLnB1c2hRdWVyeSgnYWx0ZXIgdGFibGUgJyArIHRoaXMuZm9ybWF0dGVyLndyYXAoZnJvbSkgKyAnIHJlbmFtZSB0byAnICsgdGhpcy5mb3JtYXR0ZXIud3JhcCh0bykpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFDb21waWxlcl9TUUxpdGUzO1xuIl19