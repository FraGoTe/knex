'use strict';

var makeKnex = require('../../util/make-knex');
var Promise = require('../../promise');
var helpers = require('../../helpers');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;

function Transaction_WebSQL(client, container) {
  helpers.warn('WebSQL transactions will run queries, but do not commit or rollback');
  var trx = this;
  this._promise = Promise['try'](function () {
    container(makeKnex(makeClient(trx, client)));
  });
}
inherits(Transaction_WebSQL, EventEmitter);

function makeClient(trx, client) {

  var trxClient = Object.create(client.constructor.prototype);
  trxClient.config = client.config;
  trxClient.connectionSettings = client.connectionSettings;
  trxClient.transacting = true;

  trxClient.on('query', function (arg) {
    trx.emit('query', arg);
    client.emit('query', arg);
  });
  trxClient.commit = function () {};
  trxClient.rollback = function () {};

  return trxClient;
}

var promiseInterface = ['then', 'bind', 'catch', 'finally', 'asCallback', 'spread', 'map', 'reduce', 'tap', 'thenReturn', 'return', 'yield', 'ensure', 'nodeify', 'exec'];

// Creates a method which "coerces" to a promise, by calling a
// "then" method on the current `Target`
promiseInterface.forEach(function (method) {
  Transaction_WebSQL.prototype[method] = function () {
    return this._promise = this._promise[method].apply(this._promise, arguments);
  };
});

module.exports = Transaction_WebSQL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy93ZWJzcWwvdHJhbnNhY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQTtBQUM5QyxJQUFJLE9BQU8sR0FBSSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7QUFDdkMsSUFBSSxPQUFPLEdBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBQ3ZDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNsQyxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFBOztBQUVqRCxTQUFTLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUU7QUFDN0MsU0FBTyxDQUFDLElBQUksQ0FBQyxxRUFBcUUsQ0FBQyxDQUFBO0FBQ25GLE1BQUksR0FBRyxHQUFHLElBQUksQ0FBQTtBQUNkLE1BQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxPQUFJLENBQUMsWUFBVztBQUNyQyxhQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQzdDLENBQUMsQ0FBQTtDQUNIO0FBQ0QsUUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFBOztBQUUxQyxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFOztBQUUvQixNQUFJLFNBQVMsR0FBa0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQzFFLFdBQVMsQ0FBQyxNQUFNLEdBQWUsTUFBTSxDQUFDLE1BQU0sQ0FBQTtBQUM1QyxXQUFTLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFBO0FBQ3hELFdBQVMsQ0FBQyxXQUFXLEdBQVUsSUFBSSxDQUFBOztBQUVuQyxXQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFTLEdBQUcsRUFBRTtBQUNsQyxPQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUN0QixVQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtHQUMxQixDQUFDLENBQUE7QUFDRixXQUFTLENBQUMsTUFBTSxHQUFHLFlBQVcsRUFBRSxDQUFBO0FBQ2hDLFdBQVMsQ0FBQyxRQUFRLEdBQUcsWUFBVyxFQUFFLENBQUE7O0FBRWxDLFNBQU8sU0FBUyxDQUFBO0NBQ2pCOztBQUVELElBQUksZ0JBQWdCLEdBQUcsQ0FDckIsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFDaEQsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFDOUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FDL0MsQ0FBQTs7OztBQUlELGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFTLE1BQU0sRUFBRTtBQUN4QyxvQkFBa0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsWUFBVztBQUNoRCxXQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztHQUMvRSxDQUFBO0NBQ0YsQ0FBQyxDQUFBOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsa0JBQWtCLENBQUEiLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBtYWtlS25leCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvbWFrZS1rbmV4JylcbnZhciBQcm9taXNlICA9IHJlcXVpcmUoJy4uLy4uL3Byb21pc2UnKVxudmFyIGhlbHBlcnMgID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycycpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG5cbmZ1bmN0aW9uIFRyYW5zYWN0aW9uX1dlYlNRTChjbGllbnQsIGNvbnRhaW5lcikge1xuICBoZWxwZXJzLndhcm4oJ1dlYlNRTCB0cmFuc2FjdGlvbnMgd2lsbCBydW4gcXVlcmllcywgYnV0IGRvIG5vdCBjb21taXQgb3Igcm9sbGJhY2snKVxuICB2YXIgdHJ4ID0gdGhpc1xuICB0aGlzLl9wcm9taXNlID0gUHJvbWlzZS50cnkoZnVuY3Rpb24oKSB7XG4gICAgY29udGFpbmVyKG1ha2VLbmV4KG1ha2VDbGllbnQodHJ4LCBjbGllbnQpKSlcbiAgfSlcbn1cbmluaGVyaXRzKFRyYW5zYWN0aW9uX1dlYlNRTCwgRXZlbnRFbWl0dGVyKVxuXG5mdW5jdGlvbiBtYWtlQ2xpZW50KHRyeCwgY2xpZW50KSB7XG4gIFxuICB2YXIgdHJ4Q2xpZW50ICAgICAgICAgICAgICAgID0gT2JqZWN0LmNyZWF0ZShjbGllbnQuY29uc3RydWN0b3IucHJvdG90eXBlKVxuICB0cnhDbGllbnQuY29uZmlnICAgICAgICAgICAgID0gY2xpZW50LmNvbmZpZ1xuICB0cnhDbGllbnQuY29ubmVjdGlvblNldHRpbmdzID0gY2xpZW50LmNvbm5lY3Rpb25TZXR0aW5nc1xuICB0cnhDbGllbnQudHJhbnNhY3RpbmcgICAgICAgID0gdHJ1ZVxuICBcbiAgdHJ4Q2xpZW50Lm9uKCdxdWVyeScsIGZ1bmN0aW9uKGFyZykge1xuICAgIHRyeC5lbWl0KCdxdWVyeScsIGFyZylcbiAgICBjbGllbnQuZW1pdCgncXVlcnknLCBhcmcpXG4gIH0pXG4gIHRyeENsaWVudC5jb21taXQgPSBmdW5jdGlvbigpIHt9XG4gIHRyeENsaWVudC5yb2xsYmFjayA9IGZ1bmN0aW9uKCkge31cblxuICByZXR1cm4gdHJ4Q2xpZW50ICBcbn1cblxudmFyIHByb21pc2VJbnRlcmZhY2UgPSBbXG4gICd0aGVuJywgJ2JpbmQnLCAnY2F0Y2gnLCAnZmluYWxseScsICdhc0NhbGxiYWNrJywgXG4gICdzcHJlYWQnLCAnbWFwJywgJ3JlZHVjZScsICd0YXAnLCAndGhlblJldHVybicsXG4gICdyZXR1cm4nLCAneWllbGQnLCAnZW5zdXJlJywgJ25vZGVpZnknLCAnZXhlYydcbl1cblxuLy8gQ3JlYXRlcyBhIG1ldGhvZCB3aGljaCBcImNvZXJjZXNcIiB0byBhIHByb21pc2UsIGJ5IGNhbGxpbmcgYVxuLy8gXCJ0aGVuXCIgbWV0aG9kIG9uIHRoZSBjdXJyZW50IGBUYXJnZXRgXG5wcm9taXNlSW50ZXJmYWNlLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gIFRyYW5zYWN0aW9uX1dlYlNRTC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAodGhpcy5fcHJvbWlzZSA9IHRoaXMuX3Byb21pc2VbbWV0aG9kXS5hcHBseSh0aGlzLl9wcm9taXNlLCBhcmd1bWVudHMpKVxuICB9XG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uX1dlYlNRTFxuIl19