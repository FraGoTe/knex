
// MySQL Column Compiler
// -------
'use strict';

var inherits = require('inherits');
var ColumnCompiler = require('../../../schema/columncompiler');
var helpers = require('../../../helpers');
var assign = require('lodash/object/assign');

function ColumnCompiler_MySQL() {
  ColumnCompiler.apply(this, arguments);
  this.modifiers = ['unsigned', 'nullable', 'defaultTo', 'first', 'after', 'comment'];
}
inherits(ColumnCompiler_MySQL, ColumnCompiler);

// Types
// ------

assign(ColumnCompiler_MySQL.prototype, {

  increments: 'int unsigned not null auto_increment primary key',

  bigincrements: 'bigint unsigned not null auto_increment primary key',

  bigint: 'bigint',

  double: function double(precision, scale) {
    if (!precision) return 'double';
    return 'double(' + this._num(precision, 8) + ', ' + this._num(scale, 2) + ')';
  },

  integer: function integer(length) {
    length = length ? '(' + this._num(length, 11) + ')' : '';
    return 'int' + length;
  },

  mediumint: 'mediumint',

  smallint: 'smallint',

  tinyint: function tinyint(length) {
    length = length ? '(' + this._num(length, 1) + ')' : '';
    return 'tinyint' + length;
  },

  text: function text(column) {
    switch (column) {
      case 'medium':
      case 'mediumtext':
        return 'mediumtext';
      case 'long':
      case 'longtext':
        return 'longtext';
      default:
        return 'text';
    }
  },

  mediumtext: function mediumtext() {
    return this.text('medium');
  },

  longtext: function longtext() {
    return this.text('long');
  },

  enu: function enu(allowed) {
    return "enum('" + allowed.join("', '") + "')";
  },

  datetime: 'datetime',

  timestamp: 'timestamp',

  bit: function bit(length) {
    return length ? 'bit(' + this._num(length) + ')' : 'bit';
  },

  binary: function binary(length) {
    return length ? 'varbinary(' + this._num(length) + ')' : 'blob';
  },

  // Modifiers
  // ------

  defaultTo: function defaultTo(value) {
    /*jshint unused: false*/
    var defaultVal = ColumnCompiler_MySQL.super_.prototype.defaultTo.apply(this, arguments);
    if (this.type !== 'blob' && this.type.indexOf('text') === -1) {
      return defaultVal;
    }
    return '';
  },

  unsigned: function unsigned() {
    return 'unsigned';
  },

  first: function first() {
    return 'first';
  },

  after: function after(column) {
    return 'after ' + this.formatter.wrap(column);
  },

  comment: function comment(_comment) {
    if (_comment && _comment.length > 255) {
      helpers.warn('Your comment is longer than the max comment length for MySQL');
    }
    return _comment && "comment '" + _comment + "'";
  }

});

module.exports = ColumnCompiler_MySQL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9teXNxbC9zY2hlbWEvY29sdW1uY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSxJQUFJLFFBQVEsR0FBUyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDeEMsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUE7QUFDOUQsSUFBSSxPQUFPLEdBQVUsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUE7QUFDaEQsSUFBSSxNQUFNLEdBQVcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7O0FBRXJELFNBQVMsb0JBQW9CLEdBQUc7QUFDOUIsZ0JBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3RDLE1BQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0NBQ3BGO0FBQ0QsUUFBUSxDQUFDLG9CQUFvQixFQUFFLGNBQWMsQ0FBQyxDQUFDOzs7OztBQUsvQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFOztBQUVyQyxZQUFVLEVBQUUsa0RBQWtEOztBQUU5RCxlQUFhLEVBQUUscURBQXFEOztBQUVwRSxRQUFNLEVBQUUsUUFBUTs7QUFFaEIsUUFBTSxFQUFFLGdCQUFTLFNBQVMsRUFBRSxLQUFLLEVBQUU7QUFDakMsUUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLFFBQVEsQ0FBQTtBQUMvQixXQUFPLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFBO0dBQzlFOztBQUVELFNBQU8sRUFBRSxpQkFBUyxNQUFNLEVBQUU7QUFDeEIsVUFBTSxHQUFH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LEdBQUcsb0JBQW9CLENBQUMiLCJmaWxlIjoiY29sdW1uY29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIE15U1FMIENvbHVtbiBDb21waWxlclxuLy8gLS0tLS0tLVxudmFyIGluaGVyaXRzICAgICAgID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIENvbHVtbkNvbXBpbGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vc2NoZW1hL2NvbHVtbmNvbXBpbGVyJylcbnZhciBoZWxwZXJzICAgICAgICA9IHJlcXVpcmUoJy4uLy4uLy4uL2hlbHBlcnMnKVxudmFyIGFzc2lnbiAgICAgICAgID0gcmVxdWlyZSgnbG9kYXNoL29iamVjdC9hc3NpZ24nKTtcblxuZnVuY3Rpb24gQ29sdW1uQ29tcGlsZXJfTXlTUUwoKSB7XG4gIENvbHVtbkNvbXBpbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHRoaXMubW9kaWZpZXJzID0gWyd1bnNpZ25lZCcsICdudWxsYWJsZScsICdkZWZhdWx0VG8nLCAnZmlyc3QnLCAnYWZ0ZXInLCAnY29tbWVudCddXG59XG5pbmhlcml0cyhDb2x1bW5Db21waWxlcl9NeVNRTCwgQ29sdW1uQ29tcGlsZXIpO1xuXG4vLyBUeXBlc1xuLy8gLS0tLS0tXG5cbmFzc2lnbihDb2x1bW5Db21waWxlcl9NeVNRTC5wcm90b3R5cGUsIHtcblxuICBpbmNyZW1lbnRzOiAnaW50IHVuc2lnbmVkIG5vdCBudWxsIGF1dG9faW5jcmVtZW50IHByaW1hcnkga2V5JyxcblxuICBiaWdpbmNyZW1lbnRzOiAnYmlnaW50IHVuc2lnbmVkIG5vdCBudWxsIGF1dG9faW5jcmVtZW50IHByaW1hcnkga2V5JyxcblxuICBiaWdpbnQ6ICdiaWdpbnQnLFxuXG4gIGRvdWJsZTogZnVuY3Rpb24ocHJlY2lzaW9uLCBzY2FsZSkge1xuICAgIGlmICghcHJlY2lzaW9uKSByZXR1cm4gJ2RvdWJsZSdcbiAgICByZXR1cm4gJ2RvdWJsZSgnICsgdGhpcy5fbnVtKHByZWNpc2lvbiwgOCkgKyAnLCAnICsgdGhpcy5fbnVtKHNjYWxlLCAyKSArICcpJ1xuICB9LFxuXG4gIGludGVnZXI6IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIGxlbmd0aCA9IGxlbmd0aCA/ICcoJyArIHRoaXMuX251bShsZW5ndGgsIDExKSArICcpJyA6ICcnXG4gICAgcmV0dXJuICdpbnQnICsgbGVuZ3RoXG4gIH0sXG5cbiAgbWVkaXVtaW50OiAnbWVkaXVtaW50JyxcblxuICBzbWFsbGludDogJ3NtYWxsaW50JyxcblxuICB0aW55aW50OiBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICBsZW5ndGggPSBsZW5ndGggPyAnKCcgKyB0aGlzLl9udW0obGVuZ3RoLCAxKSArICcpJyA6ICcnXG4gICAgcmV0dXJuICd0aW55aW50JyArIGxlbmd0aFxuICB9LFxuXG4gIHRleHQ6IGZ1bmN0aW9uKGNvbHVtbikge1xuICAgIHN3aXRjaCAoY29sdW1uKSB7XG4gICAgICBjYXNlICdtZWRpdW0nOlxuICAgICAgY2FzZSAnbWVkaXVtdGV4dCc6XG4gICAgICAgIHJldHVybiAnbWVkaXVtdGV4dCc7XG4gICAgICBjYXNlICdsb25nJzpcbiAgICAgIGNhc2UgJ2xvbmd0ZXh0JzpcbiAgICAgICAgcmV0dXJuICdsb25ndGV4dCdcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAndGV4dCc7XG4gICAgfVxuICB9LFxuXG4gIG1lZGl1bXRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQoJ21lZGl1bScpXG4gIH0sXG5cbiAgbG9uZ3RleHQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQoJ2xvbmcnKVxuICB9LFxuXG4gIGVudTogZnVuY3Rpb24oYWxsb3dlZCkge1xuICAgIHJldHVybiBcImVudW0oJ1wiICsgYWxsb3dlZC5qb2luKFwiJywgJ1wiKSAgKyBcIicpXCJcbiAgfSxcblxuICBkYXRldGltZTogJ2RhdGV0aW1lJyxcblxuICB0aW1lc3RhbXA6ICd0aW1lc3RhbXAnLFxuXG4gIGJpdDogZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgcmV0dXJuIGxlbmd0aCA/ICdiaXQoJyArIHRoaXMuX251bShsZW5ndGgpICsgJyknIDogJ2JpdCdcbiAgfSxcblxuICBiaW5hcnk6IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHJldHVybiBsZW5ndGggPyAndmFyYmluYXJ5KCcgKyB0aGlzLl9udW0obGVuZ3RoKSArICcpJyA6ICdibG9iJ1xuICB9LFxuXG4gIC8vIE1vZGlmaWVyc1xuICAvLyAtLS0tLS1cblxuICBkZWZhdWx0VG86IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLypqc2hpbnQgdW51c2VkOiBmYWxzZSovXG4gICAgdmFyIGRlZmF1bHRWYWwgPSBDb2x1bW5Db21waWxlcl9NeVNRTC5zdXBlcl8ucHJvdG90eXBlLmRlZmF1bHRUby5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICdibG9iJyAmJiB0aGlzLnR5cGUuaW5kZXhPZigndGV4dCcpID09PSAtMSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWxcbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH0sXG4gIFxuICB1bnNpZ25lZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICd1bnNpZ25lZCdcbiAgfSxcbiAgXG4gIGZpcnN0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ2ZpcnN0J1xuICB9LFxuICBcbiAgYWZ0ZXI6IGZ1bmN0aW9uKGNvbHVtbikge1xuICAgIHJldHVybiAnYWZ0ZXIgJyArIHRoaXMuZm9ybWF0dGVyLndyYXAoY29sdW1uKVxuICB9LFxuICBcbiAgY29tbWVudDogZnVuY3Rpb24oY29tbWVudCkge1xuICAgIGlmIChjb21tZW50ICYmIGNvbW1lbnQubGVuZ3RoID4gMjU1KSB7XG4gICAgICBoZWxwZXJzLndhcm4oJ1lvdXIgY29tbWVudCBpcyBsb25nZXIgdGhhbiB0aGUgbWF4IGNvbW1lbnQgbGVuZ3RoIGZvciBNeVNRTCcpXG4gICAgfVxuICAgIHJldHVybiBjb21tZW50ICYmIFwiY29tbWVudCAnXCIgKyBjb21tZW50ICsgXCInXCJcbiAgfVxuXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbHVtbkNvbXBpbGVyX015U1FMO1xuIl19