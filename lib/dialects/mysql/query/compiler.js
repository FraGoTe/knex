
// MySQL Query Compiler
// ------
'use strict';

var inherits = require('inherits');
var QueryCompiler = require('../../../query/compiler');
var assign = require('lodash/object/assign');

function QueryCompiler_MySQL(client, builder) {
  QueryCompiler.call(this, client, builder);
}
inherits(QueryCompiler_MySQL, QueryCompiler);

assign(QueryCompiler_MySQL.prototype, {

  _emptyInsertValue: '() values ()',

  // Update method, including joins, wheres, order & limits.
  update: function update() {
    var join = this.join();
    var updates = this._prepUpdate(this.single.update);
    var where = this.where();
    var order = this.order();
    var limit = this.limit();
    return 'update ' + this.tableName + (join ? ' ' + join : '') + ' set ' + updates.join(', ') + (where ? ' ' + where : '') + (order ? ' ' + order : '') + (limit ? ' ' + limit : '');
  },

  forUpdate: function forUpdate() {
    return 'for update';
  },

  forShare: function forShare() {
    return 'lock in share mode';
  },

  // Compiles a `columnInfo` query.
  columnInfo: function columnInfo() {
    var column = this.single.columnInfo;
    return {
      sql: 'select * from information_schema.columns where table_name = ? and table_schema = ?',
      bindings: [this.single.table, this.client.database()],
      output: function output(resp) {
        var out = resp.reduce(function (columns, val) {
          columns[val.COLUMN_NAME] = {
            defaultValue: val.COLUMN_DEFAULT,
            type: val.DATA_TYPE,
            maxLength: val.CHARACTER_MAXIMUM_LENGTH,
            nullable: val.IS_NULLABLE === 'YES'
          };
          return columns;
        }, {});
        return column && out[column] || out;
      }
    };
  },

  limit: function limit() {
    var noLimit = !this.single.limit && this.single.limit !== 0;
    if (noLimit && !this.single.offset) return '';

    // Workaround for offset only, see http://stackoverflow.com/questions/255517/mysql-offset-infinite-rows
    return 'limit ' + (this.single.offset && noLimit ? '18446744073709551615' : this.formatter.parameter(this.single.limit));
  }

});

// Set the QueryBuilder & QueryCompiler on the client object,
// incase anyone wants to modify things to suit their own purposes.
module.exports = QueryCompiler_MySQL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9teXNxbC9xdWVyeS9jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLElBQUksUUFBUSxHQUFRLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUN2QyxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQTtBQUN0RCxJQUFJLE1BQU0sR0FBVSxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQzs7QUFFcEQsU0FBUyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFO0FBQzVDLGVBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQTtDQUMxQztBQUNELFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxhQUFhLENBQUMsQ0FBQTs7QUFFNUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRTs7QUFFcEMsbUJBQWlCLEVBQUUsY0FBYzs7O0FBR2pDLFFBQU0sRUFBRSxrQkFBVztBQUNqQixRQUFJLElBQUksR0FBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDMUIsUUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25ELFFBQUksS0FBSyxHQUFLLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMzQixRQUFJLEtBQUssR0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDM0IsUUFBSSxLQUFLLEdBQUssSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzNCLFdBQU8sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQzlCLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQSxBQUFDLEdBQ3hCLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUMzQixLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUEsQUFBQyxJQUN6QixLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUEsQUFBQyxJQUN6QixLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUEsQUFBQyxDQUFDO0dBQzlCOztBQUVELFdBQVMsRUFBRSxxQkFBVztBQUNwQixXQUFPLFlBQVksQ0FBQztHQUNyQjs7QUFFRCxVQUFRLEVBQUUsb0JBQVc7QUFDbkIsV0FBTyxvQkFBb0IsQ0FBQztHQUM3Qjs7O0FBR0QsWUFBVSxFQUFFLHNCQUFXO0FBQ3JCLFFBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0FBQ3BDLFdBQU87QUFDTCxTQUFHLEVBQUUsb0ZBQW9GO0FBQ3pGLGNBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDckQsWUFBTSxFQUFFLGdCQUFTLElBQUksRUFBRTtBQUNyQixZQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVMsT0FBTyxFQUFFLEdBQUcsRUFBRTtBQUMzQyxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRztBQUN6Qix3QkFBWSxFQUFFLEdBQUcsQ0FBQyxjQUFjO0FBQ2hDLGdCQUFJLEVBQUUsR0FBRyxDQUFDLFNBQVM7QUFDbkIscUJBQVMsRUFBRSxHQUFHLENBQUMsd0JBQXdCO0FBQ3ZDLG9CQUFRLEVBQUcsR0FBRyxDQUFDLFdBQVcsS0FBSyxLQUFLLEFBQUM7V0FDdEMsQ0FBQztBQUNGLGlCQUFPLE9BQU8sQ0FBQTtTQUNmLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDTixlQUFPLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDO09BQ3JDO0tBQ0YsQ0FBQztHQUNIOztBQUVELE9BQUssRUFBRSxpQkFBVztBQUNoQixRQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUM1RCxRQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDOzs7QUFHOUMsV0FBTyxRQUFRLElBQUksQUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLEdBQUksc0JBQXNCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQSxBQUFDLENBQUM7R0FDNUg7O0NBRUYsQ0FBQyxDQUFBOzs7O0FBSUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyIsImZpbGUiOiJjb21waWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gTXlTUUwgUXVlcnkgQ29tcGlsZXJcbi8vIC0tLS0tLVxudmFyIGluaGVyaXRzICAgICAgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgUXVlcnlDb21waWxlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3F1ZXJ5L2NvbXBpbGVyJylcbnZhciBhc3NpZ24gICAgICAgID0gcmVxdWlyZSgnbG9kYXNoL29iamVjdC9hc3NpZ24nKTtcblxuZnVuY3Rpb24gUXVlcnlDb21waWxlcl9NeVNRTChjbGllbnQsIGJ1aWxkZXIpIHtcbiAgUXVlcnlDb21waWxlci5jYWxsKHRoaXMsIGNsaWVudCwgYnVpbGRlcilcbn1cbmluaGVyaXRzKFF1ZXJ5Q29tcGlsZXJfTXlTUUwsIFF1ZXJ5Q29tcGlsZXIpXG5cbmFzc2lnbihRdWVyeUNvbXBpbGVyX015U1FMLnByb3RvdHlwZSwge1xuXG4gIF9lbXB0eUluc2VydFZhbHVlOiAnKCkgdmFsdWVzICgpJyxcblxuICAvLyBVcGRhdGUgbWV0aG9kLCBpbmNsdWRpbmcgam9pbnMsIHdoZXJlcywgb3JkZXIgJiBsaW1pdHMuXG4gIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGpvaW4gICAgPSB0aGlzLmpvaW4oKTtcbiAgICB2YXIgdXBkYXRlcyA9IHRoaXMuX3ByZXBVcGRhdGUodGhpcy5zaW5nbGUudXBkYXRlKTtcbiAgICB2YXIgd2hlcmUgICA9IHRoaXMud2hlcmUoKTtcbiAgICB2YXIgb3JkZXIgICA9IHRoaXMub3JkZXIoKTtcbiAgICB2YXIgbGltaXQgICA9IHRoaXMubGltaXQoKTtcbiAgICByZXR1cm4gJ3VwZGF0ZSAnICsgdGhpcy50YWJsZU5hbWUgK1xuICAgICAgKGpvaW4gPyAnICcgKyBqb2luIDogJycpICtcbiAgICAgICcgc2V0ICcgKyB1cGRhdGVzLmpvaW4oJywgJykgK1xuICAgICAgKHdoZXJlID8gJyAnICsgd2hlcmUgOiAnJykgK1xuICAgICAgKG9yZGVyID8gJyAnICsgb3JkZXIgOiAnJykgK1xuICAgICAgKGxpbWl0ID8gJyAnICsgbGltaXQgOiAnJyk7XG4gIH0sXG5cbiAgZm9yVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ2ZvciB1cGRhdGUnO1xuICB9LFxuXG4gIGZvclNoYXJlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ2xvY2sgaW4gc2hhcmUgbW9kZSc7XG4gIH0sXG5cbiAgLy8gQ29tcGlsZXMgYSBgY29sdW1uSW5mb2AgcXVlcnkuXG4gIGNvbHVtbkluZm86IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb2x1bW4gPSB0aGlzLnNpbmdsZS5jb2x1bW5JbmZvO1xuICAgIHJldHVybiB7XG4gICAgICBzcWw6ICdzZWxlY3QgKiBmcm9tIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zIHdoZXJlIHRhYmxlX25hbWUgPSA/IGFuZCB0YWJsZV9zY2hlbWEgPSA/JyxcbiAgICAgIGJpbmRpbmdzOiBbdGhpcy5zaW5nbGUudGFibGUsIHRoaXMuY2xpZW50LmRhdGFiYXNlKCldLFxuICAgICAgb3V0cHV0OiBmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgIHZhciBvdXQgPSByZXNwLnJlZHVjZShmdW5jdGlvbihjb2x1bW5zLCB2YWwpIHtcbiAgICAgICAgICBjb2x1bW5zW3ZhbC5DT0xVTU5fTkFNRV0gPSB7XG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IHZhbC5DT0xVTU5fREVGQVVMVCxcbiAgICAgICAgICAgIHR5cGU6IHZhbC5EQVRBX1RZUEUsXG4gICAgICAgICAgICBtYXhMZW5ndGg6IHZhbC5DSEFSQUNURVJfTUFYSU1VTV9MRU5HVEgsXG4gICAgICAgICAgICBudWxsYWJsZTogKHZhbC5JU19OVUxMQUJMRSA9PT0gJ1lFUycpXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gY29sdW1uc1xuICAgICAgICB9LCB7fSlcbiAgICAgICAgcmV0dXJuIGNvbHVtbiAmJiBvdXRbY29sdW1uXSB8fCBvdXQ7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICBsaW1pdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vTGltaXQgPSAhdGhpcy5zaW5nbGUubGltaXQgJiYgdGhpcy5zaW5nbGUubGltaXQgIT09IDA7XG4gICAgaWYgKG5vTGltaXQgJiYgIXRoaXMuc2luZ2xlLm9mZnNldCkgcmV0dXJuICcnO1xuXG4gICAgLy8gV29ya2Fyb3VuZCBmb3Igb2Zmc2V0IG9ubHksIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI1NTUxNy9teXNxbC1vZmZzZXQtaW5maW5pdGUtcm93c1xuICAgIHJldHVybiAnbGltaXQgJyArICgodGhpcy5zaW5nbGUub2Zmc2V0ICYmIG5vTGltaXQpID8gJzE4NDQ2NzQ0MDczNzA5NTUxNjE1JyA6IHRoaXMuZm9ybWF0dGVyLnBhcmFtZXRlcih0aGlzLnNpbmdsZS5saW1pdCkpO1xuICB9XG5cbn0pXG5cbi8vIFNldCB0aGUgUXVlcnlCdWlsZGVyICYgUXVlcnlDb21waWxlciBvbiB0aGUgY2xpZW50IG9iamVjdCxcbi8vIGluY2FzZSBhbnlvbmUgd2FudHMgdG8gbW9kaWZ5IHRoaW5ncyB0byBzdWl0IHRoZWlyIG93biBwdXJwb3Nlcy5cbm1vZHVsZS5leHBvcnRzID0gUXVlcnlDb21waWxlcl9NeVNRTDtcbiJdfQ==