
// Query Compiler
// -------
'use strict';

var _ = require('lodash');
var helpers = require('../helpers');
var Raw = require('../raw');
var assign = require('lodash/object/assign');
var reduce = require('lodash/collection/reduce');

// The "QueryCompiler" takes all of the query statements which
// have been gathered in the "QueryBuilder" and turns them into a
// properly formatted / bound query string.
function QueryCompiler(client, builder) {
  this.client = client;
  this.method = builder._method || 'select';
  this.options = builder._options;
  this.single = builder._single;
  this.grouped = _.groupBy(builder._statements, 'grouping');
  this.formatter = client.formatter();
}

var components = ['columns', 'join', 'where', 'union', 'group', 'having', 'order', 'limit', 'offset', 'lock'];

assign(QueryCompiler.prototype, {

  // Used when the insert call is empty.
  _emptyInsertValue: 'default values',

  // Collapse the builder into a single object
  toSQL: function toSQL(method) {
    method = method || this.method;
    var val = this[method]();
    var defaults = {
      method: method,
      options: reduce(this.options, assign, {}),
      bindings: this.formatter.bindings
    };
    if (_.isString(val)) {
      val = { sql: val };
    }
    if (method === 'select' && this.single.as) {
      defaults.as = this.single.as;
    }
    return assign(defaults, val);
  },

  // Compiles the `select` statement, or nested sub-selects
  // by calling each of the component compilers, trimming out
  // the empties, and returning a generated query string.
  select: function select() {
    var i = -1,
        statements = [];
    while (++i < components.length) {
      statements.push(this[components[i]](this));
    }
    return _.compact(statements).join(' ');
  },

  pluck: function pluck() {
    return {
      sql: this.select(),
      pluck: this.single.pluck
    };
  },

  // Compiles an "insert" query, allowing for multiple
  // inserts using a single query statement.
  insert: function insert() {
    var insertValues = this.single.insert || [];
    var sql = 'insert into ' + this.tableName + ' ';

    if (Array.isArray(insertValues)) {
      if (insertValues.length === 0) {
        return '';
      }
    } else if (typeof insertValues === 'object' && _.isEmpty(insertValues)) {
      return sql + this._emptyInsertValue;
    }

    var insertData = this._prepInsert(insertValues);
    if (typeof insertData === 'string') {
      sql += insertData;
    } else {
      if (insertData.columns.length) {
        sql += '(' + this.formatter.columnize(insertData.columns);
        sql += ') values (';
        var i = -1;
        while (++i < insertData.values.length) {
          if (i !== 0) sql += '), (';
          sql += this.formatter.parameterize(insertData.values[i]);
        }
        sql += ')';
      } else if (insertValues.length === 1 && insertValues[0]) {
        sql += this._emptyInsertValue;
      } else {
        sql = '';
      }
    }
    return sql;
  },

  // Compiles the "update" query.
  update: function update() {
    // Make sure tableName is processed by the formatter first.
    var tableName = this.tableName;
    var updateData = this._prepUpdate(this.single.update);
    var wheres = this.where();
    return 'update ' + tableName + ' set ' + updateData.join(', ') + (wheres ? ' ' + wheres : '');
  },

  // Compiles the columns in the query, specifying if an item was distinct.
  columns: function columns() {
    var distinct = false;
    if (this.onlyUnions()) return '';
    var columns = this.grouped.columns || [];
    var i = -1,
        sql = [];
    if (columns) {
      while (++i < columns.length) {
        var stmt = columns[i];
        if (stmt.distinct) distinct = true;
        if (stmt.type === 'aggregate') {
          sql.push(this.aggregate(stmt));
        } else if (stmt.value && stmt.value.length > 0) {
          sql.push(this.formatter.columnize(stmt.value));
        }
      }
    }
    if (sql.length === 0) sql = ['*'];
    return 'select ' + (distinct ? 'distinct ' : '') + sql.join(', ') + (this.tableName ? ' from ' + this.tableName : '');
  },

  aggregate: function aggregate(stmt) {
    var val = stmt.value;
    var splitOn = val.toLowerCase().indexOf(' as ');
    var distinct = stmt.aggregateDistinct ? 'distinct ' : '';
    // Allows us to speciy an alias for the aggregate types.
    if (splitOn !== -1) {
      var col = val.slice(0, splitOn);
      var alias = val.slice(splitOn + 4);
      return stmt.method + '(' + distinct + this.formatter.wrap(col) + ') as ' + this.formatter.wrap(alias);
    }
    return stmt.method + '(' + distinct + this.formatter.wrap(val) + ')';
  },

  // Compiles all each of the `join` clauses on the query,
  // including any nested join queries.
  join: function join() {
    var sql = '',
        i = -1,
        joins = this.grouped.join;
    if (!joins) return '';
    while (++i < joins.length) {
      var join = joins[i];
      var table = join.schema ? join.schema + '.' + join.table : join.table;
      if (i > 0) sql += ' ';
      if (join.joinType === 'raw') {
        sql += this.formatter.unwrapRaw(join.table);
      } else {
        sql += join.joinType + ' join ' + this.formatter.wrap(table);
        var ii = -1;
        while (++ii < join.clauses.length) {
          var clause = join.clauses[ii];
          sql += ' ' + (ii > 0 ? clause[0] : clause[1]) + ' ';
          sql += this.formatter.wrap(clause[2]);
          if (!_.isUndefined(clause[3])) sql += ' ' + this.formatter.operator(clause[3]);
          if (!_.isUndefined(clause[4])) sql += ' ' + this.formatter.wrap(clause[4]);
        }
      }
    }
    return sql;
  },

  // Compiles all `where` statements on the query.
  where: function where() {
    var wheres = this.grouped.where;
    if (!wheres) return;
    var i = -1,
        sql = [];
    while (++i < wheres.length) {
      var stmt = wheres[i];
      var val = this[stmt.type](stmt);
      if (val) {
        if (sql.length === 0) {
          sql[0] = 'where';
        } else {
          sql.push(stmt.bool);
        }
        sql.push(val);
      }
    }
    return sql.length > 1 ? sql.join(' ') : '';
  },

  group: function group() {
    return this._groupsOrders('group');
  },

  order: function order() {
    return this._groupsOrders('order');
  },

  // Compiles the `having` statements.
  having: function having() {
    var havings = this.grouped.having;
    if (!havings) return '';
    var sql = ['having'];
    for (var i = 0, l = havings.length; i < l; i++) {
      var str = '',
          s = havings[i];
      if (i !== 0) str = s.bool + ' ';
      if (s.type === 'havingBasic') {
        sql.push(str + this.formatter.columnize(s.column) + ' ' + this.formatter.operator(s.operator) + ' ' + this.formatter.parameter(s.value));
      } else {
        if (s.type === 'whereWrapped') {
          var val = this.whereWrapped(s);
          if (val) sql.push(val);
        } else {
          sql.push(str + this.formatter.unwrapRaw(s.value));
        }
      }
    }
    return sql.length > 1 ? sql.join(' ') : '';
  },

  // Compile the "union" queries attached to the main query.
  union: function union() {
    var onlyUnions = this.onlyUnions();
    var unions = this.grouped.union;
    if (!unions) return '';
    var sql = '';
    for (var i = 0, l = unions.length; i < l; i++) {
      var union = unions[i];
      if (i > 0) sql += ' ';
      if (i > 0 || !onlyUnions) sql += union.clause + ' ';
      var statement = this.formatter.rawOrFn(union.value);
      if (statement) {
        if (union.wrap) sql += '(';
        sql += statement;
        if (union.wrap) sql += ')';
      }
    }
    return sql;
  },

  // If we haven't specified any columns or a `tableName`, we're assuming this
  // is only being used for unions.
  onlyUnions: function onlyUnions() {
    return !this.grouped.columns && this.grouped.union && !this.tableName;
  },

  limit: function limit() {
    var noLimit = !this.single.limit && this.single.limit !== 0;
    if (noLimit) return '';
    return 'limit ' + this.formatter.parameter(this.single.limit);
  },

  offset: function offset() {
    if (!this.single.offset) return '';
    return 'offset ' + this.formatter.parameter(this.single.offset);
  },

  // Compiles a `delete` query.
  del: function del() {
    // Make sure tableName is processed by the formatter first.
    var tableName = this.tableName;
    var wheres = this.where();
    return 'delete from ' + tableName + (wheres ? ' ' + wheres : '');
  },

  // Compiles a `truncate` query.
  truncate: function truncate() {
    return 'truncate ' + this.tableName;
  },

  // Compiles the "locks".
  lock: function lock() {
    if (this.single.lock) {
      if (!this.client.transacting) {
        helpers.warn('You are attempting to perform a "lock" command outside of a transaction.');
      } else {
        return this[this.single.lock]();
      }
    }
  },

  // Compile the "counter".
  counter: function counter() {
    var counter = this.single.counter;
    var toUpdate = {};
    toUpdate[counter.column] = this.client.raw(this.formatter.wrap(counter.column) + ' ' + (counter.symbol || '+') + ' ' + counter.amount);
    this.single.update = toUpdate;
    return this.update();
  },

  // Where Clause
  // ------

  whereIn: function whereIn(statement) {
    if (Array.isArray(statement.column)) return this.multiWhereIn(statement);
    return this.formatter.wrap(statement.column) + ' ' + this._not(statement, 'in ') + this.wrap(this.formatter.parameterize(statement.value));
  },

  multiWhereIn: function multiWhereIn(statement) {
    var i = -1,
        sql = '(' + this.formatter.columnize(statement.column) + ') ';
    sql += this._not(statement, 'in ') + '((';
    while (++i < statement.value.length) {
      if (i !== 0) sql += '),(';
      sql += this.formatter.parameterize(statement.value[i]);
    }
    return sql + '))';
  },

  whereNull: function whereNull(statement) {
    return this.formatter.wrap(statement.column) + ' is ' + this._not(statement, 'null');
  },

  // Compiles a basic "where" clause.
  whereBasic: function whereBasic(statement) {
    return this._not(statement, '') + this.formatter.wrap(statement.column) + ' ' + this.formatter.operator(statement.operator) + ' ' + this.formatter.parameter(statement.value);
  },

  whereExists: function whereExists(statement) {
    return this._not(statement, 'exists') + ' (' + this.formatter.rawOrFn(statement.value) + ')';
  },

  whereWrapped: function whereWrapped(statement) {
    var val = this.formatter.rawOrFn(statement.value, 'where');
    return val && this._not(statement, '') + '(' + val.slice(6) + ')' || '';
  },

  whereBetween: function whereBetween(statement) {
    return this.formatter.wrap(statement.column) + ' ' + this._not(statement, 'between') + ' ' + _.map(statement.value, this.formatter.parameter, this.formatter).join(' and ');
  },

  // Compiles a "whereRaw" query.
  whereRaw: function whereRaw(statement) {
    return this.formatter.unwrapRaw(statement.value);
  },

  wrap: function wrap(str) {
    if (str.charAt(0) !== '(') return '(' + str + ')';
    return str;
  },

  // Determines whether to add a "not" prefix to the where clause.
  _not: function _not(statement, str) {
    if (statement.not) return 'not ' + str;
    return str;
  },

  _prepInsert: function _prepInsert(data) {
    var isRaw = this.formatter.rawOrFn(data);
    if (isRaw) return isRaw;
    var columns = [];
    var values = [];
    if (!Array.isArray(data)) data = data ? [data] : [];
    var i = -1;
    while (++i < data.length) {
      if (data[i] == null) break;
      if (i === 0) columns = Object.keys(data[i]).sort();
      var row = new Array(columns.length);
      var keys = Object.keys(data[i]);
      var j = -1;
      while (++j < keys.length) {
        var key = keys[j];
        var idx = columns.indexOf(key);
        if (idx === -1) {
          columns = columns.concat(key).sort();
          idx = columns.indexOf(key);
          var k = -1;
          while (++k < values.length) {
            values[k].splice(idx, 0, undefined);
          }
          row.splice(idx, 0, undefined);
        }
        row[idx] = data[i][key];
      }
      values.push(row);
    }
    return {
      columns: columns,
      values: values
    };
  },

  // "Preps" the update.
  _prepUpdate: function _prepUpdate(data) {
    var vals = [];
    var sorted = Object.keys(data).sort();
    var i = -1;
    while (++i < sorted.length) {
      vals.push(this.formatter.wrap(sorted[i]) + ' = ' + this.formatter.parameter(data[sorted[i]]));
    }
    return vals;
  },

  // Compiles the `order by` statements.
  _groupsOrders: function _groupsOrders(type) {
    var items = this.grouped[type];
    if (!items) return '';
    var formatter = this.formatter;
    var sql = items.map(function (item) {
      return (item.value instanceof Raw ? formatter.unwrapRaw(item.value) : formatter.columnize(item.value)) + (type === 'order' && item.type !== 'orderByRaw' ? ' ' + formatter.direction(item.direction) : '');
    });
    return sql.length ? type + ' by ' + sql.join(', ') : '';
  }

});

QueryCompiler.prototype.first = QueryCompiler.prototype.select;

// Get the table name, wrapping it if necessary.
// Implemented as a property to prevent ordering issues as described in #704.
Object.defineProperty(QueryCompiler.prototype, 'tableName', {
  get: function get() {
    if (!this._tableName) {
      // Only call this.formatter.wrap() the first time this property is accessed.
      var tableName = this.single.table;
      var schemaName = this.single.schema;

      if (tableName && schemaName) tableName = schemaName + '.' + tableName;

      this._tableName = tableName ? this.formatter.wrap(tableName) : '';
    }
    return this._tableName;
  }
});

module.exports = QueryCompiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyeS9jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLElBQUksQ0FBQyxHQUFTLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoQyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDcEMsSUFBSSxHQUFHLEdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLElBQUksTUFBTSxHQUFJLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0FBQzdDLElBQUksTUFBTSxHQUFJLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDOzs7OztBQUtsRCxTQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFO0FBQ3RDLE1BQUksQ0FBQyxNQUFNLEdBQVEsTUFBTSxDQUFBO0FBQ3pCLE1BQUksQ0FBQyxNQUFNLEdBQVEsT0FBTyxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUM7QUFDL0MsTUFBSSxDQUFDLE9BQU8sR0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ3BDLE1BQUksQ0FBQyxNQUFNLEdBQVEsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUNuQyxNQUFJLENBQUMsT0FBTyxHQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM5RCxNQUFJLENBQUMsU0FBUyxHQUFLLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtDQUN0Qzs7QUFFRCxJQUFJLFVBQVUsR0FBRyxDQUNmLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQzVDLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQzdDLENBQUM7O0FBRUYsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7OztBQUc5QixtQkFBaUIsRUFBRSxnQkFBZ0I7OztBQUduQyxPQUFLLEVBQUUsZUFB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OztBQUV0RSxVQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDbkU7QUFDRCxXQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7R0FDeEI7Q0FDRixDQUFDLENBQUM7O0FBR0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUMiLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIFF1ZXJ5IENvbXBpbGVyXG4vLyAtLS0tLS0tXG52YXIgXyAgICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzJyk7XG52YXIgUmF3ICAgICA9IHJlcXVpcmUoJy4uL3JhdycpO1xudmFyIGFzc2lnbiAgPSByZXF1aXJlKCdsb2Rhc2gvb2JqZWN0L2Fzc2lnbicpXG52YXIgcmVkdWNlICA9IHJlcXVpcmUoJ2xvZGFzaC9jb2xsZWN0aW9uL3JlZHVjZScpO1xuXG4vLyBUaGUgXCJRdWVyeUNvbXBpbGVyXCIgdGFrZXMgYWxsIG9mIHRoZSBxdWVyeSBzdGF0ZW1lbnRzIHdoaWNoXG4vLyBoYXZlIGJlZW4gZ2F0aGVyZWQgaW4gdGhlIFwiUXVlcnlCdWlsZGVyXCIgYW5kIHR1cm5zIHRoZW0gaW50byBhXG4vLyBwcm9wZXJseSBmb3JtYXR0ZWQgLyBib3VuZCBxdWVyeSBzdHJpbmcuXG5mdW5jdGlvbiBRdWVyeUNvbXBpbGVyKGNsaWVudCwgYnVpbGRlcikge1xuICB0aGlzLmNsaWVudCAgICAgID0gY2xpZW50XG4gIHRoaXMubWV0aG9kICAgICAgPSBidWlsZGVyLl9tZXRob2QgfHwgJ3NlbGVjdCc7XG4gIHRoaXMub3B0aW9ucyAgICAgPSBidWlsZGVyLl9vcHRpb25zO1xuICB0aGlzLnNpbmdsZSAgICAgID0gYnVpbGRlci5fc2luZ2xlO1xuICB0aGlzLmdyb3VwZWQgICAgID0gXy5ncm91cEJ5KGJ1aWxkZXIuX3N0YXRlbWVudHMsICdncm91cGluZycpO1xuICB0aGlzLmZvcm1hdHRlciAgID0gY2xpZW50LmZvcm1hdHRlcigpXG59XG5cbnZhciBjb21wb25lbnRzID0gW1xuICAnY29sdW1ucycsICdqb2luJywgJ3doZXJlJywgJ3VuaW9uJywgJ2dyb3VwJyxcbiAgJ2hhdmluZycsICdvcmRlcicsICdsaW1pdCcsICdvZmZzZXQnLCAnbG9jaydcbl07XG5cbmFzc2lnbihRdWVyeUNvbXBpbGVyLnByb3RvdHlwZSwge1xuXG4gIC8vIFVzZWQgd2hlbiB0aGUgaW5zZXJ0IGNhbGwgaXMgZW1wdHkuXG4gIF9lbXB0eUluc2VydFZhbHVlOiAnZGVmYXVsdCB2YWx1ZXMnLFxuXG4gIC8vIENvbGxhcHNlIHRoZSBidWlsZGVyIGludG8gYSBzaW5nbGUgb2JqZWN0XG4gIHRvU1FMOiBmdW5jdGlvbihtZXRob2QpIHtcbiAgICBtZXRob2QgPSBtZXRob2QgfHwgdGhpcy5tZXRob2RcbiAgICB2YXIgdmFsID0gdGhpc1ttZXRob2RdKClcbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIG9wdGlvbnM6IHJlZHVjZSh0aGlzLm9wdGlvbnMsIGFzc2lnbiwge30pLFxuICAgICAgYmluZGluZ3M6IHRoaXMuZm9ybWF0dGVyLmJpbmRpbmdzXG4gICAgfTtcbiAgICBpZiAoXy5pc1N0cmluZyh2YWwpKSB7XG4gICAgICB2YWwgPSB7c3FsOiB2YWx9O1xuICAgIH1cbiAgICBpZiAobWV0aG9kID09PSAnc2VsZWN0JyAmJiB0aGlzLnNpbmdsZS5hcykge1xuICAgICAgZGVmYXVsdHMuYXMgPSB0aGlzLnNpbmdsZS5hcztcbiAgICB9XG4gICAgcmV0dXJuIGFzc2lnbihkZWZhdWx0cywgdmFsKTtcbiAgfSxcblxuICAvLyBDb21waWxlcyB0aGUgYHNlbGVjdGAgc3RhdGVtZW50LCBvciBuZXN0ZWQgc3ViLXNlbGVjdHNcbiAgLy8gYnkgY2FsbGluZyBlYWNoIG9mIHRoZSBjb21wb25lbnQgY29tcGlsZXJzLCB0cmltbWluZyBvdXRcbiAgLy8gdGhlIGVtcHRpZXMsIGFuZCByZXR1cm5pbmcgYSBnZW5lcmF0ZWQgcXVlcnkgc3RyaW5nLlxuICBzZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpID0gLTEsIHN0YXRlbWVudHMgPSBbXTtcbiAgICB3aGlsZSAoKytpIDwgY29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgIHN0YXRlbWVudHMucHVzaCh0aGlzW2NvbXBvbmVudHNbaV1dKHRoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIF8uY29tcGFjdChzdGF0ZW1lbnRzKS5qb2luKCcgJyk7XG4gIH0sXG4gIFxuICBwbHVjazogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNxbDogdGhpcy5zZWxlY3QoKSxcbiAgICAgIHBsdWNrOiB0aGlzLnNpbmdsZS5wbHVja1xuICAgIH07XG4gIH0sXG5cbiAgLy8gQ29tcGlsZXMgYW4gXCJpbnNlcnRcIiBxdWVyeSwgYWxsb3dpbmcgZm9yIG11bHRpcGxlXG4gIC8vIGluc2VydHMgdXNpbmcgYSBzaW5nbGUgcXVlcnkgc3RhdGVtZW50LlxuICBpbnNlcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbnNlcnRWYWx1ZXMgPSB0aGlzLnNpbmdsZS5pbnNlcnQgfHwgW107XG4gICAgdmFyIHNxbCA9ICdpbnNlcnQgaW50byAnICsgdGhpcy50YWJsZU5hbWUgKyAnICc7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShpbnNlcnRWYWx1ZXMpKSB7XG4gICAgICBpZiAoaW5zZXJ0VmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJydcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnNlcnRWYWx1ZXMgPT09ICdvYmplY3QnICYmIF8uaXNFbXB0eShpbnNlcnRWYWx1ZXMpKSB7XG4gICAgICByZXR1cm4gc3FsICsgdGhpcy5fZW1wdHlJbnNlcnRWYWx1ZVxuICAgIH1cblxuICAgIHZhciBpbnNlcnREYXRhID0gdGhpcy5fcHJlcEluc2VydChpbnNlcnRWYWx1ZXMpO1xuICAgIGlmICh0eXBlb2YgaW5zZXJ0RGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHNxbCArPSBpbnNlcnREYXRhO1xuICAgIH0gZWxzZSAge1xuICAgICAgaWYgKGluc2VydERhdGEuY29sdW1ucy5sZW5ndGgpIHtcbiAgICAgICAgc3FsICs9ICcoJyArIHRoaXMuZm9ybWF0dGVyLmNvbHVtbml6ZShpbnNlcnREYXRhLmNvbHVtbnMpIFxuICAgICAgICBzcWwgKz0gJykgdmFsdWVzICgnXG4gICAgICAgIHZhciBpID0gLTFcbiAgICAgICAgd2hpbGUgKCsraSA8IGluc2VydERhdGEudmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChpICE9PSAwKSBzcWwgKz0gJyksICgnXG4gICAgICAgICAgc3FsICs9IHRoaXMuZm9ybWF0dGVyLnBhcmFtZXRlcml6ZShpbnNlcnREYXRhLnZhbHVlc1tpXSlcbiAgICAgICAgfVxuICAgICAgICBzcWwgKz0gJyknO1xuICAgICAgfSBlbHNlIGlmIChpbnNlcnRWYWx1ZXMubGVuZ3RoID09PSAxICYmIGluc2VydFZhbHVlc1swXSkge1xuICAgICAgICBzcWwgKz0gdGhpcy5fZW1wdHlJbnNlcnRWYWx1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3FsID0gJydcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNxbDtcbiAgfSxcblxuICAvLyBDb21waWxlcyB0aGUgXCJ1cGRhdGVcIiBxdWVyeS5cbiAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAvLyBNYWtlIHN1cmUgdGFibGVOYW1lIGlzIHByb2Nlc3NlZCBieSB0aGUgZm9ybWF0dGVyIGZpcnN0LlxuICAgIHZhciB0YWJsZU5hbWUgID0gdGhpcy50YWJsZU5hbWU7XG4gICAgdmFyIHVwZGF0ZURhdGEgPSB0aGlzLl9wcmVwVXBkYXRlKHRoaXMuc2luZ2xlLnVwZGF0ZSk7XG4gICAgdmFyIHdoZXJlcyAgICAgPSB0aGlzLndoZXJlKCk7XG4gICAgcmV0dXJuICd1cGRhdGUgJyArIHRhYmxlTmFtZSArXG4gICAgICAnIHNldCAnICsgdXBkYXRlRGF0YS5qb2luKCcsICcpICtcbiAgICAgICh3aGVyZXMgPyAnICcgKyB3aGVyZXMgOiAnJyk7XG4gIH0sXG5cbiAgLy8gQ29tcGlsZXMgdGhlIGNvbHVtbnMgaW4gdGhlIHF1ZXJ5LCBzcGVjaWZ5aW5nIGlmIGFuIGl0ZW0gd2FzIGRpc3RpbmN0LlxuICBjb2x1bW5zOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGlzdGluY3QgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5vbmx5VW5pb25zKCkpIHJldHVybiAnJ1xuICAgIHZhciBjb2x1bW5zID0gdGhpcy5ncm91cGVkLmNvbHVtbnMgfHwgW11cbiAgICB2YXIgaSA9IC0xLCBzcWwgPSBbXTtcbiAgICBpZiAoY29sdW1ucykge1xuICAgICAgd2hpbGUgKCsraSA8IGNvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBzdG10ID0gY29sdW1uc1tpXTtcbiAgICAgICAgaWYgKHN0bXQuZGlzdGluY3QpIGRpc3RpbmN0ID0gdHJ1ZVxuICAgICAgICBpZiAoc3RtdC50eXBlID09PSAnYWdncmVnYXRlJykge1xuICAgICAgICAgIHNxbC5wdXNoKHRoaXMuYWdncmVnYXRlKHN0bXQpKVxuICAgICAgICB9IFxuICAgICAgICBlbHNlIGlmIChzdG10LnZhbHVlICYmIHN0bXQudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNxbC5wdXNoKHRoaXMuZm9ybWF0dGVyLmNvbHVtbml6ZShzdG10LnZhbHVlKSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3FsLmxlbmd0aCA9PT0gMCkgc3FsID0gWycqJ107XG4gICAgcmV0dXJuICdzZWxlY3QgJyArIChkaXN0aW5jdCA/ICdkaXN0aW5jdCAnIDogJycpICsgXG4gICAgICBzcWwuam9pbignLCAnKSArICh0aGlzLnRhYmxlTmFtZSA/ICcgZnJvbSAnICsgdGhpcy50YWJsZU5hbWUgOiAnJyk7XG4gIH0sXG5cbiAgYWdncmVnYXRlOiBmdW5jdGlvbihzdG10KSB7XG4gICAgdmFyIHZhbCA9IHN0bXQudmFsdWU7XG4gICAgdmFyIHNwbGl0T24gPSB2YWwudG9Mb3dlckNhc2UoKS5pbmRleE9mKCcgYXMgJyk7XG4gICAgdmFyIGRpc3RpbmN0ID0gc3RtdC5hZ2dyZWdhdGVEaXN0aW5jdCA/ICdkaXN0aW5jdCAnIDogJyc7XG4gICAgLy8gQWxsb3dzIHVzIHRvIHNwZWNpeSBhbiBhbGlhcyBmb3IgdGhlIGFnZ3JlZ2F0ZSB0eXBlcy5cbiAgICBpZiAoc3BsaXRPbiAhPT0gLTEpIHtcbiAgICAgIHZhciBjb2wgPSB2YWwuc2xpY2UoMCwgc3BsaXRPbik7XG4gICAgICB2YXIgYWxpYXMgPSB2YWwuc2xpY2Uoc3BsaXRPbiArIDQpO1xuICAgICAgcmV0dXJuIHN0bXQubWV0aG9kICsgJygnICsgZGlzdGluY3QgKyB0aGlzLmZvcm1hdHRlci53cmFwKGNvbCkgKyAnKSBhcyAnICsgdGhpcy5mb3JtYXR0ZXIud3JhcChhbGlhcyk7XG4gICAgfVxuICAgIHJldHVybiBzdG10Lm1ldGhvZCArICcoJyArIGRpc3RpbmN0ICsgdGhpcy5mb3JtYXR0ZXIud3JhcCh2YWwpICsgJyknO1xuICB9LFxuXG4gIC8vIENvbXBpbGVzIGFsbCBlYWNoIG9mIHRoZSBgam9pbmAgY2xhdXNlcyBvbiB0aGUgcXVlcnksXG4gIC8vIGluY2x1ZGluZyBhbnkgbmVzdGVkIGpvaW4gcXVlcmllcy5cbiAgam9pbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNxbCA9ICcnLCBpID0gLTEsIGpvaW5zID0gdGhpcy5ncm91cGVkLmpvaW47XG4gICAgaWYgKCFqb2lucykgcmV0dXJuICcnO1xuICAgIHdoaWxlICgrK2kgPCBqb2lucy5sZW5ndGgpIHtcbiAgICAgIHZhciBqb2luID0gam9pbnNbaV07XG4gICAgICB2YXIgdGFibGUgPSBqb2luLnNjaGVtYSA/IGAke2pvaW4uc2NoZW1hfS4ke2pvaW4udGFibGV9YCA6IGpvaW4udGFibGU7XG4gICAgICBpZiAoaSA+IDApIHNxbCArPSAnICdcbiAgICAgIGlmIChqb2luLmpvaW5UeXBlID09PSAncmF3Jykge1xuICAgICAgICBzcWwgKz0gdGhpcy5mb3JtYXR0ZXIudW53cmFwUmF3KGpvaW4udGFibGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcWwgKz0gam9pbi5qb2luVHlwZSArICcgam9pbiAnICsgdGhpcy5mb3JtYXR0ZXIud3JhcCh0YWJsZSlcbiAgICAgICAgdmFyIGlpID0gLTFcbiAgICAgICAgd2hpbGUgKCsraWkgPCBqb2luLmNsYXVzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGNsYXVzZSA9IGpvaW4uY2xhdXNlc1tpaV1cbiAgICAgICAgICBzcWwgKz0gJyAnICsgKGlpID4gMCA/IGNsYXVzZVswXSA6IGNsYXVzZVsxXSkgKyAnICdcbiAgICAgICAgICBzcWwgKz0gdGhpcy5mb3JtYXR0ZXIud3JhcChjbGF1c2VbMl0pXG4gICAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKGNsYXVzZVszXSkpIHNxbCArPSAnICcgKyB0aGlzLmZvcm1hdHRlci5vcGVyYXRvcihjbGF1c2VbM10pXG4gICAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKGNsYXVzZVs0XSkpIHNxbCArPSAnICcgKyB0aGlzLmZvcm1hdHRlci53cmFwKGNsYXVzZVs0XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3FsO1xuICB9LFxuXG4gIC8vIENvbXBpbGVzIGFsbCBgd2hlcmVgIHN0YXRlbWVudHMgb24gdGhlIHF1ZXJ5LlxuICB3aGVyZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHdoZXJlcyA9IHRoaXMuZ3JvdXBlZC53aGVyZTtcbiAgICBpZiAoIXdoZXJlcykgcmV0dXJuO1xuICAgIHZhciBpID0gLTEsIHNxbCA9IFtdO1xuICAgIHdoaWxlICgrK2kgPCB3aGVyZXMubGVuZ3RoKSB7XG4gICAgICB2YXIgc3RtdCA9IHdoZXJlc1tpXVxuICAgICAgdmFyIHZhbCA9IHRoaXNbc3RtdC50eXBlXShzdG10KVxuICAgICAgaWYgKHZhbCkge1xuICAgICAgICBpZiAoc3FsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNxbFswXSA9ICd3aGVyZSdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcWwucHVzaChzdG10LmJvb2wpXG4gICAgICAgIH1cbiAgICAgICAgc3FsLnB1c2godmFsKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3FsLmxlbmd0aCA+IDEgPyBzcWwuam9pbignICcpIDogJyc7XG4gIH0sXG5cbiAgZ3JvdXA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9ncm91cHNPcmRlcnMoJ2dyb3VwJyk7XG4gIH0sXG5cbiAgb3JkZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9ncm91cHNPcmRlcnMoJ29yZGVyJyk7XG4gIH0sXG5cbiAgLy8gQ29tcGlsZXMgdGhlIGBoYXZpbmdgIHN0YXRlbWVudHMuXG4gIGhhdmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhhdmluZ3MgPSB0aGlzLmdyb3VwZWQuaGF2aW5nO1xuICAgIGlmICghaGF2aW5ncykgcmV0dXJuICcnO1xuICAgIHZhciBzcWwgPSBbJ2hhdmluZyddO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gaGF2aW5ncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBzdHIgPSAnJywgcyA9IGhhdmluZ3NbaV07XG4gICAgICBpZiAoaSAhPT0gMCkgc3RyID0gcy5ib29sICsgJyAnO1xuICAgICAgaWYgKHMudHlwZSA9PT0gJ2hhdmluZ0Jhc2ljJykge1xuICAgICAgICBzcWwucHVzaChzdHIgKyB0aGlzLmZvcm1hdHRlci5jb2x1bW5pemUocy5jb2x1bW4pICsgJyAnICtcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5vcGVyYXRvcihzLm9wZXJhdG9yKSArICcgJyArIHRoaXMuZm9ybWF0dGVyLnBhcmFtZXRlcihzLnZhbHVlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZihzLnR5cGUgPT09ICd3aGVyZVdyYXBwZWQnKXtcbiAgICAgICAgICB2YXIgdmFsID0gdGhpcy53aGVyZVdyYXBwZWQocylcbiAgICAgICAgICBpZiAodmFsKSBzcWwucHVzaCh2YWwpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3FsLnB1c2goc3RyICsgdGhpcy5mb3JtYXR0ZXIudW53cmFwUmF3KHMudmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3FsLmxlbmd0aCA+IDEgPyBzcWwuam9pbignICcpIDogJyc7XG4gIH0sXG5cbiAgLy8gQ29tcGlsZSB0aGUgXCJ1bmlvblwiIHF1ZXJpZXMgYXR0YWNoZWQgdG8gdGhlIG1haW4gcXVlcnkuXG4gIHVuaW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb25seVVuaW9ucyA9IHRoaXMub25seVVuaW9ucygpO1xuICAgIHZhciB1bmlvbnMgPSB0aGlzLmdyb3VwZWQudW5pb247XG4gICAgaWYgKCF1bmlvbnMpIHJldHVybiAnJztcbiAgICB2YXIgc3FsID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB1bmlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgdW5pb24gPSB1bmlvbnNbaV07XG4gICAgICBpZiAoaSA+IDApIHNxbCArPSAnICc7XG4gICAgICBpZiAoaSA+IDAgfHwgIW9ubHlVbmlvbnMpIHNxbCArPSB1bmlvbi5jbGF1c2UgKyAnICc7XG4gICAgICB2YXIgc3RhdGVtZW50ID0gdGhpcy5mb3JtYXR0ZXIucmF3T3JGbih1bmlvbi52YWx1ZSk7XG4gICAgICBpZiAoc3RhdGVtZW50KSB7XG4gICAgICAgIGlmICh1bmlvbi53cmFwKSBzcWwgKz0gJygnO1xuICAgICAgICBzcWwgKz0gc3RhdGVtZW50O1xuICAgICAgICBpZiAodW5pb24ud3JhcCkgc3FsICs9ICcpJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNxbDtcbiAgfSxcblxuICAvLyBJZiB3ZSBoYXZlbid0IHNwZWNpZmllZCBhbnkgY29sdW1ucyBvciBhIGB0YWJsZU5hbWVgLCB3ZSdyZSBhc3N1bWluZyB0aGlzXG4gIC8vIGlzIG9ubHkgYmVpbmcgdXNlZCBmb3IgdW5pb25zLlxuICBvbmx5VW5pb25zOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKCF0aGlzLmdyb3VwZWQuY29sdW1ucyAmJiB0aGlzLmdyb3VwZWQudW5pb24gJiYgIXRoaXMudGFibGVOYW1lKTtcbiAgfSxcblxuICBsaW1pdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vTGltaXQgPSAhdGhpcy5zaW5nbGUubGltaXQgJiYgdGhpcy5zaW5nbGUubGltaXQgIT09IDA7XG4gICAgaWYgKG5vTGltaXQpIHJldHVybiAnJztcbiAgICByZXR1cm4gJ2xpbWl0ICcgKyB0aGlzLmZvcm1hdHRlci5wYXJhbWV0ZXIodGhpcy5zaW5nbGUubGltaXQpO1xuICB9LFxuXG4gIG9mZnNldDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLnNpbmdsZS5vZmZzZXQpIHJldHVybiAnJztcbiAgICByZXR1cm4gJ29mZnNldCAnICsgdGhpcy5mb3JtYXR0ZXIucGFyYW1ldGVyKHRoaXMuc2luZ2xlLm9mZnNldCk7XG4gIH0sXG5cbiAgLy8gQ29tcGlsZXMgYSBgZGVsZXRlYCBxdWVyeS5cbiAgZGVsOiBmdW5jdGlvbigpIHtcbiAgICAvLyBNYWtlIHN1cmUgdGFibGVOYW1lIGlzIHByb2Nlc3NlZCBieSB0aGUgZm9ybWF0dGVyIGZpcnN0LlxuICAgIHZhciB0YWJsZU5hbWUgID0gdGhpcy50YWJsZU5hbWU7XG4gICAgdmFyIHdoZXJlcyA9IHRoaXMud2hlcmUoKTtcbiAgICByZXR1cm4gJ2RlbGV0ZSBmcm9tICcgKyB0YWJsZU5hbWUgK1xuICAgICAgKHdoZXJlcyA/ICcgJyArIHdoZXJlcyA6ICcnKTtcbiAgfSxcblxuICAvLyBDb21waWxlcyBhIGB0cnVuY2F0ZWAgcXVlcnkuXG4gIHRydW5jYXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ3RydW5jYXRlICcgKyB0aGlzLnRhYmxlTmFtZTtcbiAgfSxcblxuICAvLyBDb21waWxlcyB0aGUgXCJsb2Nrc1wiLlxuICBsb2NrOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5zaW5nbGUubG9jaykge1xuICAgICAgaWYgKCF0aGlzLmNsaWVudC50cmFuc2FjdGluZykge1xuICAgICAgICBoZWxwZXJzLndhcm4oJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byBwZXJmb3JtIGEgXCJsb2NrXCIgY29tbWFuZCBvdXRzaWRlIG9mIGEgdHJhbnNhY3Rpb24uJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzW3RoaXMuc2luZ2xlLmxvY2tdKClcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gQ29tcGlsZSB0aGUgXCJjb3VudGVyXCIuXG4gIGNvdW50ZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3VudGVyID0gdGhpcy5zaW5nbGUuY291bnRlcjtcbiAgICB2YXIgdG9VcGRhdGUgPSB7fTtcbiAgICB0b1VwZGF0ZVtjb3VudGVyLmNvbHVtbl0gPSB0aGlzLmNsaWVudC5yYXcodGhpcy5mb3JtYXR0ZXIud3JhcChjb3VudGVyLmNvbHVtbikgK1xuICAgICAgJyAnICsgKGNvdW50ZXIuc3ltYm9sIHx8ICcrJykgK1xuICAgICAgJyAnICsgY291bnRlci5hbW91bnQpO1xuICAgIHRoaXMuc2luZ2xlLnVwZGF0ZSA9IHRvVXBkYXRlO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZSgpO1xuICB9LFxuXG4gIC8vIFdoZXJlIENsYXVzZVxuICAvLyAtLS0tLS1cblxuICB3aGVyZUluOiBmdW5jdGlvbihzdGF0ZW1lbnQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdGF0ZW1lbnQuY29sdW1uKSkgcmV0dXJuIHRoaXMubXVsdGlXaGVyZUluKHN0YXRlbWVudCk7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLndyYXAoc3RhdGVtZW50LmNvbHVtbikgKyAnICcgKyB0aGlzLl9ub3Qoc3RhdGVtZW50LCAnaW4gJykgK1xuICAgICAgdGhpcy53cmFwKHRoaXMuZm9ybWF0dGVyLnBhcmFtZXRlcml6ZShzdGF0ZW1lbnQudmFsdWUpKTtcbiAgfSxcblxuICBtdWx0aVdoZXJlSW46IGZ1bmN0aW9uKHN0YXRlbWVudCkge1xuICAgIHZhciBpID0gLTEsIHNxbCA9ICcoJyArIHRoaXMuZm9ybWF0dGVyLmNvbHVtbml6ZShzdGF0ZW1lbnQuY29sdW1uKSArICcpICdcbiAgICBzcWwgKz0gdGhpcy5fbm90KHN0YXRlbWVudCwgJ2luICcpICsgJygoJ1xuICAgIHdoaWxlICgrK2kgPCBzdGF0ZW1lbnQudmFsdWUubGVuZ3RoKSB7XG4gICAgICBpZiAoaSAhPT0gMCkgc3FsICs9ICcpLCgnXG4gICAgICBzcWwgKz0gdGhpcy5mb3JtYXR0ZXIucGFyYW1ldGVyaXplKHN0YXRlbWVudC52YWx1ZVtpXSlcbiAgICB9XG4gICAgcmV0dXJuIHNxbCArICcpKSdcbiAgfSxcblxuICB3aGVyZU51bGw6IGZ1bmN0aW9uKHN0YXRlbWVudCkge1xuICAgIHJldHVybiB0aGlzLmZvcm1hdHRlci53cmFwKHN0YXRlbWVudC5jb2x1bW4pICsgJyBpcyAnICsgdGhpcy5fbm90KHN0YXRlbWVudCwgJ251bGwnKTtcbiAgfSxcblxuICAvLyBDb21waWxlcyBhIGJhc2ljIFwid2hlcmVcIiBjbGF1c2UuXG4gIHdoZXJlQmFzaWM6IGZ1bmN0aW9uKHN0YXRlbWVudCkge1xuICAgIHJldHVybiB0aGlzLl9ub3Qoc3RhdGVtZW50LCAnJykgK1xuICAgICAgdGhpcy5mb3JtYXR0ZXIud3JhcChzdGF0ZW1lbnQuY29sdW1uKSArICcgJyArXG4gICAgICB0aGlzLmZvcm1hdHRlci5vcGVyYXRvcihzdGF0ZW1lbnQub3BlcmF0b3IpICsgJyAnICtcbiAgICAgIHRoaXMuZm9ybWF0dGVyLnBhcmFtZXRlcihzdGF0ZW1lbnQudmFsdWUpO1xuICB9LFxuXG4gIHdoZXJlRXhpc3RzOiBmdW5jdGlvbihzdGF0ZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fbm90KHN0YXRlbWVudCwgJ2V4aXN0cycpICsgJyAoJyArIHRoaXMuZm9ybWF0dGVyLnJhd09yRm4oc3RhdGVtZW50LnZhbHVlKSArICcpJztcbiAgfSxcblxuICB3aGVyZVdyYXBwZWQ6IGZ1bmN0aW9uKHN0YXRlbWVudCkge1xuICAgIHZhciB2YWwgPSB0aGlzLmZvcm1hdHRlci5yYXdPckZuKHN0YXRlbWVudC52YWx1ZSwgJ3doZXJlJylcbiAgICByZXR1cm4gdmFsICYmIHRoaXMuX25vdChzdGF0ZW1lbnQsICcnKSArICcoJyArIHZhbC5zbGljZSg2KSArICcpJyB8fCAnJztcbiAgfSxcblxuICB3aGVyZUJldHdlZW46IGZ1bmN0aW9uKHN0YXRlbWVudCkge1xuICAgIHJldHVybiB0aGlzLmZvcm1hdHRlci53cmFwKHN0YXRlbWVudC5jb2x1bW4pICsgJyAnICsgdGhpcy5fbm90KHN0YXRlbWVudCwgJ2JldHdlZW4nKSArICcgJyArXG4gICAgICBfLm1hcChzdGF0ZW1lbnQudmFsdWUsIHRoaXMuZm9ybWF0dGVyLnBhcmFtZXRlciwgdGhpcy5mb3JtYXR0ZXIpLmpvaW4oJyBhbmQgJyk7XG4gIH0sXG5cbiAgLy8gQ29tcGlsZXMgYSBcIndoZXJlUmF3XCIgcXVlcnkuXG4gIHdoZXJlUmF3OiBmdW5jdGlvbihzdGF0ZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIudW53cmFwUmF3KHN0YXRlbWVudC52YWx1ZSk7XG4gIH0sXG5cbiAgd3JhcDogZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKHN0ci5jaGFyQXQoMCkgIT09ICcoJykgcmV0dXJuICcoJyArIHN0ciArICcpJztcbiAgICByZXR1cm4gc3RyO1xuICB9LFxuXG4gIC8vIERldGVybWluZXMgd2hldGhlciB0byBhZGQgYSBcIm5vdFwiIHByZWZpeCB0byB0aGUgd2hlcmUgY2xhdXNlLlxuICBfbm90OiBmdW5jdGlvbihzdGF0ZW1lbnQsIHN0cikge1xuICAgIGlmIChzdGF0ZW1lbnQubm90KSByZXR1cm4gJ25vdCAnICsgc3RyO1xuICAgIHJldHVybiBzdHI7XG4gIH0sXG4gIFxuICBfcHJlcEluc2VydDogZnVuY3Rpb24oZGF0YSkge1xuICAgIHZhciBpc1JhdyA9IHRoaXMuZm9ybWF0dGVyLnJhd09yRm4oZGF0YSk7XG4gICAgaWYgKGlzUmF3KSByZXR1cm4gaXNSYXc7XG4gICAgdmFyIGNvbHVtbnMgPSBbXTtcbiAgICB2YXIgdmFsdWVzICA9IFtdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSkgZGF0YSA9IGRhdGEgPyBbZGF0YV0gOiBbXTtcbiAgICB2YXIgaSA9IC0xXG4gICAgd2hpbGUgKCsraSA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICBpZiAoZGF0YVtpXSA9PSBudWxsKSBicmVhaztcbiAgICAgIGlmIChpID09PSAwKSBjb2x1bW5zID0gT2JqZWN0LmtleXMoZGF0YVtpXSkuc29ydCgpXG4gICAgICB2YXIgcm93ICA9IG5ldyBBcnJheShjb2x1bW5zLmxlbmd0aClcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YVtpXSlcbiAgICAgIHZhciBqID0gLTFcbiAgICAgIHdoaWxlICgrK2ogPCBrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgdmFyIGlkeCA9IGNvbHVtbnMuaW5kZXhPZihrZXkpO1xuICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgIGNvbHVtbnMgPSBjb2x1bW5zLmNvbmNhdChrZXkpLnNvcnQoKVxuICAgICAgICAgIGlkeCAgICAgPSBjb2x1bW5zLmluZGV4T2Yoa2V5KVxuICAgICAgICAgIHZhciBrID0gLTFcbiAgICAgICAgICB3aGlsZSAoKytrIDwgdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFsdWVzW2tdLnNwbGljZShpZHgsIDAsIHVuZGVmaW5lZClcbiAgICAgICAgICB9XG4gICAgICAgICAgcm93LnNwbGljZShpZHgsIDAsIHVuZGVmaW5lZClcbiAgICAgICAgfVxuICAgICAgICByb3dbaWR4XSA9IGRhdGFbaV1ba2V5XVxuICAgICAgfVxuICAgICAgdmFsdWVzLnB1c2gocm93KVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY29sdW1uczogY29sdW1ucyxcbiAgICAgIHZhbHVlczogIHZhbHVlc1xuICAgIH07XG4gIH0sXG5cbiAgLy8gXCJQcmVwc1wiIHRoZSB1cGRhdGUuXG4gIF9wcmVwVXBkYXRlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgdmFyIHZhbHMgICA9IFtdXG4gICAgdmFyIHNvcnRlZCA9IE9iamVjdC5rZXlzKGRhdGEpLnNvcnQoKVxuICAgIHZhciBpICAgICAgPSAtMVxuICAgIHdoaWxlICgrK2kgPCBzb3J0ZWQubGVuZ3RoKSB7XG4gICAgICB2YWxzLnB1c2godGhpcy5mb3JtYXR0ZXIud3JhcChzb3J0ZWRbaV0pICsgJyA9ICcgKyB0aGlzLmZvcm1hdHRlci5wYXJhbWV0ZXIoZGF0YVtzb3J0ZWRbaV1dKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWxzO1xuICB9LFxuXG4gIC8vIENvbXBpbGVzIHRoZSBgb3JkZXIgYnlgIHN0YXRlbWVudHMuXG4gIF9ncm91cHNPcmRlcnM6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICB2YXIgaXRlbXMgPSB0aGlzLmdyb3VwZWRbdHlwZV07XG4gICAgaWYgKCFpdGVtcykgcmV0dXJuICcnO1xuICAgIHZhciBmb3JtYXR0ZXIgPSB0aGlzLmZvcm1hdHRlcjtcbiAgICB2YXIgc3FsID0gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gKGl0ZW0udmFsdWUgaW5zdGFuY2VvZiBSYXcgPyBmb3JtYXR0ZXIudW53cmFwUmF3KGl0ZW0udmFsdWUpIDogZm9ybWF0dGVyLmNvbHVtbml6ZShpdGVtLnZhbHVlKSkgK1xuICAgICAgICAoKHR5cGUgPT09ICdvcmRlcicgJiYgaXRlbS50eXBlICE9PSAnb3JkZXJCeVJhdycpID8gJyAnICsgZm9ybWF0dGVyLmRpcmVjdGlvbihpdGVtLmRpcmVjdGlvbikgOiAnJyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNxbC5sZW5ndGggPyB0eXBlICsgJyBieSAnICsgc3FsLmpvaW4oJywgJykgOiAnJztcbiAgfVxuXG59KVxuXG5RdWVyeUNvbXBpbGVyLnByb3RvdHlwZS5maXJzdCA9IFF1ZXJ5Q29tcGlsZXIucHJvdG90eXBlLnNlbGVjdDtcblxuLy8gR2V0IHRoZSB0YWJsZSBuYW1lLCB3cmFwcGluZyBpdCBpZiBuZWNlc3NhcnkuXG4vLyBJbXBsZW1lbnRlZCBhcyBhIHByb3BlcnR5IHRvIHByZXZlbnQgb3JkZXJpbmcgaXNzdWVzIGFzIGRlc2NyaWJlZCBpbiAjNzA0LlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5Q29tcGlsZXIucHJvdG90eXBlLCAndGFibGVOYW1lJywge1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmKCF0aGlzLl90YWJsZU5hbWUpIHtcbiAgICAgIC8vIE9ubHkgY2FsbCB0aGlzLmZvcm1hdHRlci53cmFwKCkgdGhlIGZpcnN0IHRpbWUgdGhpcyBwcm9wZXJ0eSBpcyBhY2Nlc3NlZC5cbiAgICAgIHZhciB0YWJsZU5hbWUgPSB0aGlzLnNpbmdsZS50YWJsZTtcbiAgICAgIHZhciBzY2hlbWFOYW1lID0gdGhpcy5zaW5nbGUuc2NoZW1hO1xuXG4gICAgICBpZiAodGFibGVOYW1lICYmIHNjaGVtYU5hbWUpIHRhYmxlTmFtZSA9IGAke3NjaGVtYU5hbWV9LiR7dGFibGVOYW1lfWA7XG5cbiAgICAgIHRoaXMuX3RhYmxlTmFtZSA9IHRhYmxlTmFtZSA/IHRoaXMuZm9ybWF0dGVyLndyYXAodGFibGVOYW1lKSA6ICcnO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdGFibGVOYW1lO1xuICB9XG59KTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXJ5Q29tcGlsZXI7XG4iXX0=