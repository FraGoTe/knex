'use strict';

var assign = require('lodash/object/assign');

// JoinClause
// -------

// The "JoinClause" is an object holding any necessary info about a join,
// including the type, and any associated tables & columns being joined.
function JoinClause(table, type, schema) {
  this.schema = schema;
  this.table = table;
  this.joinType = type;
  this.and = this;
  this.clauses = [];
}

assign(JoinClause.prototype, {

  grouping: 'join',

  // Adds an "on" clause to the current join object.
  on: function on(first, operator, second) {
    var data,
        bool = this._bool();
    switch (arguments.length) {
      case 1:
        {
          if (typeof first === 'object' && typeof first.toSQL !== 'function') {
            var i = -1,
                keys = Object.keys(first);
            var method = bool === 'or' ? 'orOn' : 'on';
            while (++i < keys.length) {
              this[method](keys[i], first[keys[i]]);
            }
            return this;
          } else {
            data = [bool, 'on', first];
          }
          break;
        }
      case 2:
        data = [bool, 'on', first, '=', operator];break;
      default:
        data = [bool, 'on', first, operator, second];
    }
    this.clauses.push(data);
    return this;
  },

  // Adds a "using" clause to the current join.
  using: function using(column) {
    return this.clauses.push([this._bool(), 'using', column]);
  },

  // Adds an "and on" clause to the current join object.
  andOn: function andOn() {
    return this.on.apply(this, arguments);
  },

  // Adds an "or on" clause to the current join object.
  orOn: function orOn(first, operator, second) {
    /*jshint unused: false*/
    return this._bool('or').on.apply(this, arguments);
  },

  // Explicitly set the type of join, useful within a function when creating a grouped join.
  type: function type(_type) {
    this.joinType = _type;
    return this;
  },

  _bool: function _bool(bool) {
    if (arguments.length === 1) {
      this._boolFlag = bool;
      return this;
    }
    var ret = this._boolFlag || 'and';
    this._boolFlag = 'and';
    return ret;
  }

});

Object.defineProperty(JoinClause.prototype, 'or', {
  get: function get() {
    return this._bool('or');
  }
});

module.exports = JoinClause;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyeS9qb2luY2xhdXNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7Ozs7Ozs7QUFPN0MsU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7QUFDdkMsTUFBSSxDQUFDLE1BQU0sR0FBSyxNQUFNLENBQUM7QUFDdkIsTUFBSSxDQUFDLEtBQUssR0FBTSxLQUFLLENBQUM7QUFDdEIsTUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDckIsTUFBSSxDQUFDLEdBQUcsR0FBUSxJQUFJLENBQUM7QUFDckIsTUFBSSxDQUFDLE9BQU8sR0FBSSxFQUFFLENBQUM7Q0FDcEI7O0FBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUU7O0FBRTNCLFVBQVEsRUFBRSxNQUFNOzs7QUFHaEIsSUFBRSxFQUFFLFlBQVMsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7QUFDcEMsUUFBSSxJQUFJO1FBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtBQUM3QixZQUFRLFNBQVMsQ0FBQyxNQUFNO0FBQ3RCLFdBQUssQ0FBQztBQUFHO0FBQ1AsY0FBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxLQUFLLFVBQVUsRUFBRTtBQUNsRSxnQkFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUFFLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3JDLGdCQUFJLE1BQU0sR0FBRyxJQUFJLEtBQUssSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFDMUMsbUJBQU8sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUN4QixrQkFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUN0QztBQUNELG1CQUFPLElBQUksQ0FBQztXQUNiLE1BQU07QUFDTCxnQkFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtXQUMzQjtBQUNELGdCQUFNO1NBQ1A7QUFBQSxBQUNELFdBQUssQ0FBQztBQUFHLFlBQUksR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxBQUFDLE1BQU07QUFBQSxBQUMxRDtBQUFTLFlBQUksR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUFBLEtBQ3ZEO0FBQ0QsUUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEIsV0FBTyxJQUFJLENBQUM7R0FDYjs7O0FBR0QsT0FBSyxFQUFFLGVBQVMsTUFBTSxFQUFFO0FBQ3RCLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7R0FDM0Q7OztBQUdELE9BQUssRUFBRSxpQkFBVztBQUNoQixXQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztHQUN2Qzs7O0FBR0QsTUFBSSxFQUFFLGNBQVMsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7O0FBRXRDLFdBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztHQUNuRDs7O0FBR0QsTUFBSSxFQUFFLGNBQVMsS0FBSSxFQUFFO0FBQ25CLFFBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDO0FBQ3JCLFdBQU8sSUFBSSxDQUFDO0dBQ2I7O0FBRUQsT0FBSyxFQUFFLGVBQVMsSUFBSSxFQUFFO0FBQ3BCLFFBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDMUIsVUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDdEIsYUFBTyxJQUFJLENBQUM7S0FDYjtBQUNELFFBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDO0FBQ2xDLFFBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFdBQU8sR0FBRyxDQUFDO0dBQ1o7O0NBRUYsQ0FBQyxDQUFBOztBQUVGLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUU7QUFDaEQsS0FBRyxFQUFFLGVBQVk7QUFDZixXQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDekI7Q0FDRixDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMiLCJmaWxlIjoiam9pbmNsYXVzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJ2xvZGFzaC9vYmplY3QvYXNzaWduJyk7XG5cbi8vIEpvaW5DbGF1c2Vcbi8vIC0tLS0tLS1cblxuLy8gVGhlIFwiSm9pbkNsYXVzZVwiIGlzIGFuIG9iamVjdCBob2xkaW5nIGFueSBuZWNlc3NhcnkgaW5mbyBhYm91dCBhIGpvaW4sXG4vLyBpbmNsdWRpbmcgdGhlIHR5cGUsIGFuZCBhbnkgYXNzb2NpYXRlZCB0YWJsZXMgJiBjb2x1bW5zIGJlaW5nIGpvaW5lZC5cbmZ1bmN0aW9uIEpvaW5DbGF1c2UodGFibGUsIHR5cGUsIHNjaGVtYSkge1xuICB0aGlzLnNjaGVtYSAgID0gc2NoZW1hO1xuICB0aGlzLnRhYmxlICAgID0gdGFibGU7XG4gIHRoaXMuam9pblR5cGUgPSB0eXBlO1xuICB0aGlzLmFuZCAgICAgID0gdGhpcztcbiAgdGhpcy5jbGF1c2VzICA9IFtdO1xufVxuXG5hc3NpZ24oSm9pbkNsYXVzZS5wcm90b3R5cGUsIHtcblxuICBncm91cGluZzogJ2pvaW4nLFxuXG4gIC8vIEFkZHMgYW4gXCJvblwiIGNsYXVzZSB0byB0aGUgY3VycmVudCBqb2luIG9iamVjdC5cbiAgb246IGZ1bmN0aW9uKGZpcnN0LCBvcGVyYXRvciwgc2Vjb25kKSB7XG4gICAgdmFyIGRhdGEsIGJvb2wgPSB0aGlzLl9ib29sKClcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMTogIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGZpcnN0LnRvU1FMICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGkgPSAtMSwga2V5cyA9IE9iamVjdC5rZXlzKGZpcnN0KVxuICAgICAgICAgIHZhciBtZXRob2QgPSBib29sID09PSAnb3InID8gJ29yT24nIDogJ29uJ1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpc1ttZXRob2RdKGtleXNbaV0sIGZpcnN0W2tleXNbaV1dKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gW2Jvb2wsICdvbicsIGZpcnN0XVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiAgZGF0YSA9IFtib29sLCAnb24nLCBmaXJzdCwgJz0nLCBvcGVyYXRvcl07IGJyZWFrO1xuICAgICAgZGVmYXVsdDogZGF0YSA9IFtib29sLCAnb24nLCBmaXJzdCwgb3BlcmF0b3IsIHNlY29uZF07XG4gICAgfVxuICAgIHRoaXMuY2xhdXNlcy5wdXNoKGRhdGEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIEFkZHMgYSBcInVzaW5nXCIgY2xhdXNlIHRvIHRoZSBjdXJyZW50IGpvaW4uXG4gIHVzaW5nOiBmdW5jdGlvbihjb2x1bW4pIHtcbiAgICByZXR1cm4gdGhpcy5jbGF1c2VzLnB1c2goW3RoaXMuX2Jvb2woKSwgJ3VzaW5nJywgY29sdW1uXSk7XG4gIH0sXG5cbiAgLy8gQWRkcyBhbiBcImFuZCBvblwiIGNsYXVzZSB0byB0aGUgY3VycmVudCBqb2luIG9iamVjdC5cbiAgYW5kT246IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0sXG5cbiAgLy8gQWRkcyBhbiBcIm9yIG9uXCIgY2xhdXNlIHRvIHRoZSBjdXJyZW50IGpvaW4gb2JqZWN0LlxuICBvck9uOiBmdW5jdGlvbihmaXJzdCwgb3BlcmF0b3IsIHNlY29uZCkge1xuICAgIC8qanNoaW50IHVudXNlZDogZmFsc2UqL1xuICAgIHJldHVybiB0aGlzLl9ib29sKCdvcicpLm9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0sXG5cbiAgLy8gRXhwbGljaXRseSBzZXQgdGhlIHR5cGUgb2Ygam9pbiwgdXNlZnVsIHdpdGhpbiBhIGZ1bmN0aW9uIHdoZW4gY3JlYXRpbmcgYSBncm91cGVkIGpvaW4uXG4gIHR5cGU6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICB0aGlzLmpvaW5UeXBlID0gdHlwZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBfYm9vbDogZnVuY3Rpb24oYm9vbCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLl9ib29sRmxhZyA9IGJvb2w7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdmFyIHJldCA9IHRoaXMuX2Jvb2xGbGFnIHx8ICdhbmQnO1xuICAgIHRoaXMuX2Jvb2xGbGFnID0gJ2FuZCc7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSm9pbkNsYXVzZS5wcm90b3R5cGUsICdvcicsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jvb2woJ29yJyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpvaW5DbGF1c2U7Il19