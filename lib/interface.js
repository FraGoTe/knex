'use strict';

var helpers = require('./helpers');

module.exports = function (Target) {
  var _ = require('lodash');

  Target.prototype.toQuery = function (tz) {
    var data = this.toSQL(this._method);
    if (!_.isArray(data)) data = [data];
    return _.map(data, function (statement) {
      return this._formatQuery(statement.sql, statement.bindings, tz);
    }, this).join(';\n');
  };

  // Format the query as sql, prepping bindings as necessary.
  Target.prototype._formatQuery = function (sql, bindings, tz) {
    if (this.client && this.client.prepBindings) {
      bindings = this.client.prepBindings(bindings, tz);
    }
    return this.client.SqlString.format(sql, bindings, tz);
  };

  // Create a new instance of the `Runner`, passing in the current object.
  Target.prototype.then = function () /* onFulfilled, onRejected */{
    var result = this.client.runner(this).run();
    return result.then.apply(result, arguments);
  };

  // Add additional "options" to the builder. Typically used for client specific
  // items, like the `mysql` and `sqlite3` drivers.
  Target.prototype.options = function (opts) {
    this._options = this._options || [];
    this._options.push(_.clone(opts) || {});
    this._cached = undefined;
    return this;
  };

  // Sets an explicit "connnection" we wish to use for this query.
  Target.prototype.connection = function (connection) {
    this._connection = connection;
    return this;
  };

  // Set a debug flag for the current schema query stack.
  Target.prototype.debug = function (enabled) {
    this._debug = arguments.length ? enabled : true;
    return this;
  };

  // Set the transaction object for this query.
  Target.prototype.transacting = function (t) {
    if (t && t.client) {
      if (!t.client.transacting) {
        helpers.warn('Invalid transaction value: ' + t.client);
      } else {
        this.client = t.client;
      }
    }
    return this;
  };

  // Initializes a stream.
  Target.prototype.stream = function (options) {
    return this.client.runner(this).stream(options);
  };

  // Initialize a stream & pipe automatically.
  Target.prototype.pipe = function (writable, options) {
    return this.client.runner(this).pipe(writable, options);
  };

  // Creates a method which "coerces" to a promise, by calling a
  // "then" method on the current `Target`
  _.each(['bind', 'catch', 'finally', 'asCallback', 'spread', 'map', 'reduce', 'tap', 'thenReturn', 'return', 'yield', 'ensure', 'nodeify', 'exec'], function (method) {
    Target.prototype[method] = function () {
      var then = this.then();
      then = then[method].apply(then, arguments);
      return then;
    };
  });
};
//# sourceMappingURL=data:application/json;base64,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Y2VzQ29udGVudCI6WyJcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUYXJnZXQpIHtcbiAgdmFyIF8gICAgICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG4gIFRhcmdldC5wcm90b3R5cGUudG9RdWVyeSA9IGZ1bmN0aW9uKHR6KSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnRvU1FMKHRoaXMuX21ldGhvZCk7XG4gICAgaWYgKCFfLmlzQXJyYXkoZGF0YSkpIGRhdGEgPSBbZGF0YV07XG4gICAgcmV0dXJuIF8ubWFwKGRhdGEsIGZ1bmN0aW9uKHN0YXRlbWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdFF1ZXJ5KHN0YXRlbWVudC5zcWwsIHN0YXRlbWVudC5iaW5kaW5ncywgdHopO1xuICAgIH0sIHRoaXMpLmpvaW4oJztcXG4nKTtcbiAgfTtcblxuICAvLyBGb3JtYXQgdGhlIHF1ZXJ5IGFzIHNxbCwgcHJlcHBpbmcgYmluZGluZ3MgYXMgbmVjZXNzYXJ5LlxuICBUYXJnZXQucHJvdG90eXBlLl9mb3JtYXRRdWVyeSA9IGZ1bmN0aW9uKHNxbCwgYmluZGluZ3MsIHR6KSB7XG4gICAgaWYgKHRoaXMuY2xpZW50ICYmIHRoaXMuY2xpZW50LnByZXBCaW5kaW5ncykge1xuICAgICAgYmluZGluZ3MgPSB0aGlzLmNsaWVudC5wcmVwQmluZGluZ3MoYmluZGluZ3MsIHR6KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LlNxbFN0cmluZy5mb3JtYXQoc3FsLCBiaW5kaW5ncywgdHopO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgYFJ1bm5lcmAsIHBhc3NpbmcgaW4gdGhlIGN1cnJlbnQgb2JqZWN0LlxuICBUYXJnZXQucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbigvKiBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCAqLykge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLmNsaWVudC5ydW5uZXIodGhpcykucnVuKClcbiAgICByZXR1cm4gcmVzdWx0LnRoZW4uYXBwbHkocmVzdWx0LCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIC8vIEFkZCBhZGRpdGlvbmFsIFwib3B0aW9uc1wiIHRvIHRoZSBidWlsZGVyLiBUeXBpY2FsbHkgdXNlZCBmb3IgY2xpZW50IHNwZWNpZmljXG4gIC8vIGl0ZW1zLCBsaWtlIHRoZSBgbXlzcWxgIGFuZCBgc3FsaXRlM2AgZHJpdmVycy5cbiAgVGFyZ2V0LnByb3RvdHlwZS5vcHRpb25zID0gZnVuY3Rpb24ob3B0cykge1xuICAgIHRoaXMuX29wdGlvbnMgPSB0aGlzLl9vcHRpb25zIHx8IFtdO1xuICAgIHRoaXMuX29wdGlvbnMucHVzaChfLmNsb25lKG9wdHMpIHx8IHt9KTtcbiAgICB0aGlzLl9jYWNoZWQgID0gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU2V0cyBhbiBleHBsaWNpdCBcImNvbm5uZWN0aW9uXCIgd2Ugd2lzaCB0byB1c2UgZm9yIHRoaXMgcXVlcnkuXG4gIFRhcmdldC5wcm90b3R5cGUuY29ubmVjdGlvbiA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICB0aGlzLl9jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTZXQgYSBkZWJ1ZyBmbGFnIGZvciB0aGUgY3VycmVudCBzY2hlbWEgcXVlcnkgc3RhY2suXG4gIFRhcmdldC5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgdGhpcy5fZGVidWcgPSBhcmd1bWVudHMubGVuZ3RoID8gZW5hYmxlZCA6IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU2V0IHRoZSB0cmFuc2FjdGlvbiBvYmplY3QgZm9yIHRoaXMgcXVlcnkuXG4gIFRhcmdldC5wcm90b3R5cGUudHJhbnNhY3RpbmcgPSBmdW5jdGlvbih0KSB7XG4gICAgaWYgKHQgJiYgdC5jbGllbnQpIHtcbiAgICAgIGlmICghdC5jbGllbnQudHJhbnNhY3RpbmcpIHtcbiAgICAgICAgaGVscGVycy53YXJuKCdJbnZhbGlkIHRyYW5zYWN0aW9uIHZhbHVlOiAnICsgdC5jbGllbnQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNsaWVudCA9IHQuY2xpZW50XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEluaXRpYWxpemVzIGEgc3RyZWFtLlxuICBUYXJnZXQucHJvdG90eXBlLnN0cmVhbSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucnVubmVyKHRoaXMpLnN0cmVhbShvcHRpb25zKTtcbiAgfTtcblxuICAvLyBJbml0aWFsaXplIGEgc3RyZWFtICYgcGlwZSBhdXRvbWF0aWNhbGx5LlxuICBUYXJnZXQucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbih3cml0YWJsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5ydW5uZXIodGhpcykucGlwZSh3cml0YWJsZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgLy8gQ3JlYXRlcyBhIG1ldGhvZCB3aGljaCBcImNvZXJjZXNcIiB0byBhIHByb21pc2UsIGJ5IGNhbGxpbmcgYVxuICAvLyBcInRoZW5cIiBtZXRob2Qgb24gdGhlIGN1cnJlbnQgYFRhcmdldGBcbiAgXy5lYWNoKFsnYmluZCcsICdjYXRjaCcsICdmaW5hbGx5JywgJ2FzQ2FsbGJhY2snLFxuICAgICdzcHJlYWQnLCAnbWFwJywgJ3JlZHVjZScsICd0YXAnLCAndGhlblJldHVybicsXG4gICAgJ3JldHVybicsICd5aWVsZCcsICdlbnN1cmUnLCAnbm9kZWlmeScsICdleGVjJ10sIGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIFRhcmdldC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRoZW4gPSB0aGlzLnRoZW4oKTtcbiAgICAgIHRoZW4gPSB0aGVuW21ldGhvZF0uYXBwbHkodGhlbiwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB0aGVuO1xuICAgIH07XG4gIH0pO1xuXG59O1xuIl19