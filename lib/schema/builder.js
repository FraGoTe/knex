'use strict';

var _ = require('lodash');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;

// Constructor for the builder instance, typically called from
// `knex.builder`, accepting the current `knex` instance,
// and pulling out the `client` and `grammar` from the current
// knex instance.
function SchemaBuilder(client) {
  this.client = client;
  this._sequence = [];
  this._debug = client.config && client.config.debug;
}
inherits(SchemaBuilder, EventEmitter);

// Each of the schema builder methods just add to the
// "_sequence" array for consistency.
_.each(['createTable', 'createTableIfNotExists', 'createSchema', 'createSchemaIfNotExists', 'dropSchema', 'dropSchemaIfExists', 'createExtension', 'createExtensionIfNotExists', 'dropExtension', 'dropExtensionIfExists', 'table', 'alterTable', 'hasTable', 'hasColumn', 'dropTable', 'renameTable', 'dropTableIfExists', 'raw'], function (method) {
  SchemaBuilder.prototype[method] = function () {
    if (method === 'table') method = 'alterTable';
    this._sequence.push({
      method: method,
      args: _.toArray(arguments)
    });
    return this;
  };
});

require('../interface')(SchemaBuilder);

SchemaBuilder.prototype.withSchema = function (schemaName) {
  this._schema = schemaName;
  return this;
};

SchemaBuilder.prototype.toString = function () {
  return this.toQuery();
};

SchemaBuilder.prototype.toSQL = function () {
  return this.client.schemaCompiler(this).toSQL();
};

module.exports = SchemaBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvYnVpbGRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLElBQUksQ0FBQyxHQUFjLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNwQyxJQUFJLFFBQVEsR0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDdEMsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksQ0FBQTs7Ozs7O0FBTWpELFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRTtBQUM3QixNQUFJLENBQUMsTUFBTSxHQUFNLE1BQU0sQ0FBQTtBQUN2QixNQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQTtBQUNuQixNQUFJLENBQUMsTUFBTSxHQUFNLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7Q0FDdEQ7QUFDRCxRQUFRLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFBOzs7O0FBSXJDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDTCxhQUFhLEVBQ2Isd0JBQXdCLEVBQ3hCLGNBQWMsRUFDZCx5QkFBeUIsRUFDekIsWUFBWSxFQUNaLG9CQUFvQixFQUNwQixpQkFBaUIsRUFDakIsNEJBQTRCLEVBQzVCLGVBQWUsRUFDZix1QkFBdUIsRUFDdkIsT0FBTyxFQUNQLFlBQVksRUFDWixVQUFVLEVBQ1YsV0FBVyxFQUNYLFdBQVcsRUFDWCxhQUFhLEVBQ2IsbUJBQW1CLEVBQ25CLEtBQUssQ0FDTixFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ2xCLGVBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsWUFBVztBQUMzQyxRQUFJLE1BQU0sS0FBSyxPQUFPLEVBQUUsTUFBTSxHQUFHLFlBQVksQ0FBQztBQUM5QyxRQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztBQUNsQixZQUFNLEVBQUUsTUFBTTtBQUNkLFVBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztLQUMzQixDQUFDLENBQUM7QUFDSCxXQUFPLElBQUksQ0FBQztHQUNiLENBQUE7Q0FDRixDQUFDLENBQUE7O0FBRUYsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFBOztBQUV0QyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFTLFVBQVUsRUFBRTtBQUN4RCxNQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztBQUMxQixTQUFPLElBQUksQ0FBQztDQUNiLENBQUE7O0FBRUQsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsWUFBVztBQUM1QyxTQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtDQUN0QixDQUFBOztBQUVELGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFlBQVc7QUFDekMsU0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtDQUNoRCxDQUFBOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFBIiwiZmlsZSI6ImJ1aWxkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBfICAgICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gnKVxudmFyIGluaGVyaXRzICAgICA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcblxuLy8gQ29uc3RydWN0b3IgZm9yIHRoZSBidWlsZGVyIGluc3RhbmNlLCB0eXBpY2FsbHkgY2FsbGVkIGZyb21cbi8vIGBrbmV4LmJ1aWxkZXJgLCBhY2NlcHRpbmcgdGhlIGN1cnJlbnQgYGtuZXhgIGluc3RhbmNlLFxuLy8gYW5kIHB1bGxpbmcgb3V0IHRoZSBgY2xpZW50YCBhbmQgYGdyYW1tYXJgIGZyb20gdGhlIGN1cnJlbnRcbi8vIGtuZXggaW5zdGFuY2UuXG5mdW5jdGlvbiBTY2hlbWFCdWlsZGVyKGNsaWVudCkge1xuICB0aGlzLmNsaWVudCAgICA9IGNsaWVudFxuICB0aGlzLl9zZXF1ZW5jZSA9IFtdXG4gIHRoaXMuX2RlYnVnICAgID0gY2xpZW50LmNvbmZpZyAmJiBjbGllbnQuY29uZmlnLmRlYnVnXG59XG5pbmhlcml0cyhTY2hlbWFCdWlsZGVyLCBFdmVudEVtaXR0ZXIpXG5cbi8vIEVhY2ggb2YgdGhlIHNjaGVtYSBidWlsZGVyIG1ldGhvZHMganVzdCBhZGQgdG8gdGhlXG4vLyBcIl9zZXF1ZW5jZVwiIGFycmF5IGZvciBjb25zaXN0ZW5jeS5cbl8uZWFjaChbXG4gICdjcmVhdGVUYWJsZScsIFxuICAnY3JlYXRlVGFibGVJZk5vdEV4aXN0cycsIFxuICAnY3JlYXRlU2NoZW1hJyxcbiAgJ2NyZWF0ZVNjaGVtYUlmTm90RXhpc3RzJywgXG4gICdkcm9wU2NoZW1hJywgXG4gICdkcm9wU2NoZW1hSWZFeGlzdHMnLFxuICAnY3JlYXRlRXh0ZW5zaW9uJywgXG4gICdjcmVhdGVFeHRlbnNpb25JZk5vdEV4aXN0cycsIFxuICAnZHJvcEV4dGVuc2lvbicsXG4gICdkcm9wRXh0ZW5zaW9uSWZFeGlzdHMnLCBcbiAgJ3RhYmxlJywgXG4gICdhbHRlclRhYmxlJywgXG4gICdoYXNUYWJsZScsXG4gICdoYXNDb2x1bW4nLCBcbiAgJ2Ryb3BUYWJsZScsIFxuICAncmVuYW1lVGFibGUnLCBcbiAgJ2Ryb3BUYWJsZUlmRXhpc3RzJywgXG4gICdyYXcnXG5dLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgU2NoZW1hQnVpbGRlci5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChtZXRob2QgPT09ICd0YWJsZScpIG1ldGhvZCA9ICdhbHRlclRhYmxlJztcbiAgICB0aGlzLl9zZXF1ZW5jZS5wdXNoKHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgYXJnczogXy50b0FycmF5KGFyZ3VtZW50cylcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSlcblxucmVxdWlyZSgnLi4vaW50ZXJmYWNlJykoU2NoZW1hQnVpbGRlcilcblxuU2NoZW1hQnVpbGRlci5wcm90b3R5cGUud2l0aFNjaGVtYSA9IGZ1bmN0aW9uKHNjaGVtYU5hbWUpIHtcbiAgdGhpcy5fc2NoZW1hID0gc2NoZW1hTmFtZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cblNjaGVtYUJ1aWxkZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRvUXVlcnkoKVxufVxuXG5TY2hlbWFCdWlsZGVyLnByb3RvdHlwZS50b1NRTCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jbGllbnQuc2NoZW1hQ29tcGlsZXIodGhpcykudG9TUUwoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNjaGVtYUJ1aWxkZXJcbiJdfQ==