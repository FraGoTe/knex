'use strict';

var _ = require('lodash');

// Push a new query onto the compiled "sequence" stack,
// creating a new formatter, returning the compiler.
exports.pushQuery = function (query) {
  if (!query) return;
  if (_.isString(query)) {
    query = { sql: query };
  } else {
    query = query;
  }
  if (!query.bindings) {
    query.bindings = this.formatter.bindings;
  }
  this.sequence.push(query);
  this.formatter = this.client.formatter();
};

// Used in cases where we need to push some additional column specific statements.
exports.pushAdditional = function (fn) {
  var child = new this.constructor(this.client, this.tableCompiler, this.columnBuilder);
  fn.call(child, _.rest(arguments));
  this.sequence.additional = (this.sequence.additional || []).concat(child.sequence);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7OztBQUkxQixPQUFPLENBQUMsU0FBUyxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQ2xDLE1BQUksQ0FBQyxLQUFLLEVBQUUsT0FBTztBQUNuQixNQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDckIsU0FBSyxHQUFHLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBQyxDQUFDO0dBQ3RCLE1BQU07QUFDTCxTQUFLLEdBQUcsS0FBSyxDQUFDO0dBQ2Y7QUFDRCxNQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtBQUNuQixTQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0dBQzFDO0FBQ0QsTUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUIsTUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0NBQzFDLENBQUM7OztBQUdGLE9BQU8sQ0FBQyxjQUFjLEdBQUcsVUFBUyxFQUFFLEVBQUU7QUFDcEMsTUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdEYsSUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLE1BQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFBLENBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNwRixDQUFDIiwiZmlsZSI6ImhlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbi8vIFB1c2ggYSBuZXcgcXVlcnkgb250byB0aGUgY29tcGlsZWQgXCJzZXF1ZW5jZVwiIHN0YWNrLFxuLy8gY3JlYXRpbmcgYSBuZXcgZm9ybWF0dGVyLCByZXR1cm5pbmcgdGhlIGNvbXBpbGVyLlxuZXhwb3J0cy5wdXNoUXVlcnkgPSBmdW5jdGlvbihxdWVyeSkge1xuICBpZiAoIXF1ZXJ5KSByZXR1cm47XG4gIGlmIChfLmlzU3RyaW5nKHF1ZXJ5KSkge1xuICAgIHF1ZXJ5ID0ge3NxbDogcXVlcnl9O1xuICB9IGVsc2Uge1xuICAgIHF1ZXJ5ID0gcXVlcnk7XG4gIH1cbiAgaWYgKCFxdWVyeS5iaW5kaW5ncykge1xuICAgIHF1ZXJ5LmJpbmRpbmdzID0gdGhpcy5mb3JtYXR0ZXIuYmluZGluZ3M7XG4gIH1cbiAgdGhpcy5zZXF1ZW5jZS5wdXNoKHF1ZXJ5KTtcbiAgdGhpcy5mb3JtYXR0ZXIgPSB0aGlzLmNsaWVudC5mb3JtYXR0ZXIoKTtcbn07XG5cbi8vIFVzZWQgaW4gY2FzZXMgd2hlcmUgd2UgbmVlZCB0byBwdXNoIHNvbWUgYWRkaXRpb25hbCBjb2x1bW4gc3BlY2lmaWMgc3RhdGVtZW50cy5cbmV4cG9ydHMucHVzaEFkZGl0aW9uYWwgPSBmdW5jdGlvbihmbikge1xuICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmNsaWVudCwgdGhpcy50YWJsZUNvbXBpbGVyLCB0aGlzLmNvbHVtbkJ1aWxkZXIpO1xuICBmbi5jYWxsKGNoaWxkLCBfLnJlc3QoYXJndW1lbnRzKSk7XG4gIHRoaXMuc2VxdWVuY2UuYWRkaXRpb25hbCA9ICh0aGlzLnNlcXVlbmNlLmFkZGl0aW9uYWwgfHwgW10pLmNvbmNhdChjaGlsZC5zZXF1ZW5jZSk7XG59O1xuIl19