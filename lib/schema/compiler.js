'use strict';

var helpers = require('./helpers');
var assign = require('lodash/object/assign');

// The "SchemaCompiler" takes all of the query statements which have been
// gathered in the "SchemaBuilder" and turns them into an array of
// properly formatted / bound query strings.
function SchemaCompiler(client, builder) {
  this.builder = builder;
  this.client = client;
  this.schema = builder._schema;
  this.formatter = client.formatter();
  this.sequence = [];
}

assign(SchemaCompiler.prototype, {

  pushQuery: helpers.pushQuery,

  pushAdditional: helpers.pushAdditional,

  createTable: buildTable('create'),

  createTableIfNotExists: buildTable('createIfNot'),

  alterTable: buildTable('alter'),

  dropTablePrefix: 'drop table ',
  dropTable: function dropTable(tableName) {
    this.pushQuery(this.dropTablePrefix + this.formatter.wrap(prefixedTableName(this.schema, tableName)));
  },

  dropTableIfExists: function dropTableIfExists(tableName) {
    this.pushQuery(this.dropTablePrefix + 'if exists ' + this.formatter.wrap(prefixedTableName(this.schema, tableName)));
  },

  raw: function raw(sql, bindings) {
    this.sequence.push(this.client.raw(sql, bindings).toSQL());
  },

  toSQL: function toSQL() {
    var sequence = this.builder._sequence;
    for (var i = 0, l = sequence.length; i < l; i++) {
      var query = sequence[i];
      this[query.method].apply(this, query.args);
    }
    return this.sequence;
  }

});

function buildTable(type) {
  return function (tableName, fn) {
    var builder = this.client.tableBuilder(type, tableName, fn);
    var sql;

    builder.setSchema(this.schema);
    sql = builder.toSQL();

    for (var i = 0, l = sql.length; i < l; i++) {
      this.sequence.push(sql[i]);
    }
  };
}

function prefixedTableName(prefix, table) {
  return prefix ? prefix + '.' + table : table;
}

module.exports = SchemaCompiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDbEMsSUFBSSxNQUFNLEdBQUksT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7Ozs7O0FBSzlDLFNBQVMsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUU7QUFDdkMsTUFBSSxDQUFDLE9BQU8sR0FBSyxPQUFPLENBQUE7QUFDeEIsTUFBSSxDQUFDLE1BQU0sR0FBTSxNQUFNLENBQUE7QUFDdkIsTUFBSSxDQUFDLE1BQU0sR0FBTSxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQ2pDLE1BQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO0FBQ25DLE1BQUksQ0FBQyxRQUFRLEdBQUksRUFBRSxDQUFBO0NBQ3BCOztBQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFOztBQUUvQixXQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7O0FBRTVCLGdCQUFjLEVBQUUsT0FBTyxDQUFDLGNBQWM7O0FBRXRDLGFBQVcsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDOztBQUVqQyx3QkFBc0IsRUFBRSxVQUFVLENBQUMsYUFBYSxDQUFDOztBQUVqRCxZQUFVLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQzs7QUFFL0IsaUJBQWUsRUFBRSxhQUFhO0FBQzlCLFdBQVMsRUFBRSxtQkFBUyxTQUFTLEVBQUU7QUFDN0IsUUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3ZHOztBQUVELG1CQUFpQixFQUFFLDJCQUFTLFNBQVMsRUFBRTtBQUNyQyxRQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3RIOztBQUVELEtBQUcsRUFBRSxhQUFTLEdBQUcsRUFBRSxRQUFRLEVBQUU7QUFDM0IsUUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7R0FDNUQ7O0FBRUQsT0FBSyxFQUFFLGlCQUFXO0FBQ2hCLFFBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ3RDLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDL0MsVUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFVBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDNUM7QUFDRCxXQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7R0FDdEI7O0NBRUYsQ0FBQyxDQUFBOztBQUVGLFNBQVMsVUFBVSxDQUFDLElBQUksRUFBRTtBQUN4QixTQUFPLFVBQVMsU0FBUyxFQUFFLEVBQUUsRUFBRTtBQUM3QixRQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzVELFFBQUksR0FBRyxDQUFDOztBQUVSLFdBQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLE9BQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7O0FBRXRCLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDMUMsVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUI7R0FDRixDQUFDO0NBQ0g7O0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO0FBQ3hDLFNBQU8sTUFBTSxHQUFNLE1BQU0sU0FBSSxLQUFLLEdBQUssS0FBSyxDQUFDO0NBQzlDOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDIiwiZmlsZSI6ImNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpXG52YXIgYXNzaWduICA9IHJlcXVpcmUoJ2xvZGFzaC9vYmplY3QvYXNzaWduJyk7XG5cbi8vIFRoZSBcIlNjaGVtYUNvbXBpbGVyXCIgdGFrZXMgYWxsIG9mIHRoZSBxdWVyeSBzdGF0ZW1lbnRzIHdoaWNoIGhhdmUgYmVlblxuLy8gZ2F0aGVyZWQgaW4gdGhlIFwiU2NoZW1hQnVpbGRlclwiIGFuZCB0dXJucyB0aGVtIGludG8gYW4gYXJyYXkgb2Zcbi8vIHByb3Blcmx5IGZvcm1hdHRlZCAvIGJvdW5kIHF1ZXJ5IHN0cmluZ3MuXG5mdW5jdGlvbiBTY2hlbWFDb21waWxlcihjbGllbnQsIGJ1aWxkZXIpIHtcbiAgdGhpcy5idWlsZGVyICAgPSBidWlsZGVyXG4gIHRoaXMuY2xpZW50ICAgID0gY2xpZW50XG4gIHRoaXMuc2NoZW1hICAgID0gYnVpbGRlci5fc2NoZW1hO1xuICB0aGlzLmZvcm1hdHRlciA9IGNsaWVudC5mb3JtYXR0ZXIoKVxuICB0aGlzLnNlcXVlbmNlICA9IFtdXG59XG5cbmFzc2lnbihTY2hlbWFDb21waWxlci5wcm90b3R5cGUsIHtcblxuICBwdXNoUXVlcnk6IGhlbHBlcnMucHVzaFF1ZXJ5LFxuXG4gIHB1c2hBZGRpdGlvbmFsOiBoZWxwZXJzLnB1c2hBZGRpdGlvbmFsLFxuXG4gIGNyZWF0ZVRhYmxlOiBidWlsZFRhYmxlKCdjcmVhdGUnKSxcblxuICBjcmVhdGVUYWJsZUlmTm90RXhpc3RzOiBidWlsZFRhYmxlKCdjcmVhdGVJZk5vdCcpLFxuXG4gIGFsdGVyVGFibGU6IGJ1aWxkVGFibGUoJ2FsdGVyJyksXG5cbiAgZHJvcFRhYmxlUHJlZml4OiAnZHJvcCB0YWJsZSAnLFxuICBkcm9wVGFibGU6IGZ1bmN0aW9uKHRhYmxlTmFtZSkge1xuICAgIHRoaXMucHVzaFF1ZXJ5KHRoaXMuZHJvcFRhYmxlUHJlZml4ICsgdGhpcy5mb3JtYXR0ZXIud3JhcChwcmVmaXhlZFRhYmxlTmFtZSh0aGlzLnNjaGVtYSwgdGFibGVOYW1lKSkpO1xuICB9LFxuXG4gIGRyb3BUYWJsZUlmRXhpc3RzOiBmdW5jdGlvbih0YWJsZU5hbWUpIHtcbiAgICB0aGlzLnB1c2hRdWVyeSh0aGlzLmRyb3BUYWJsZVByZWZpeCArICdpZiBleGlzdHMgJyArIHRoaXMuZm9ybWF0dGVyLndyYXAocHJlZml4ZWRUYWJsZU5hbWUodGhpcy5zY2hlbWEsIHRhYmxlTmFtZSkpKTtcbiAgfSxcblxuICByYXc6IGZ1bmN0aW9uKHNxbCwgYmluZGluZ3MpIHtcbiAgICB0aGlzLnNlcXVlbmNlLnB1c2godGhpcy5jbGllbnQucmF3KHNxbCwgYmluZGluZ3MpLnRvU1FMKCkpO1xuICB9LFxuXG4gIHRvU1FMOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VxdWVuY2UgPSB0aGlzLmJ1aWxkZXIuX3NlcXVlbmNlO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gc2VxdWVuY2UubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgcXVlcnkgPSBzZXF1ZW5jZVtpXTtcbiAgICAgIHRoaXNbcXVlcnkubWV0aG9kXS5hcHBseSh0aGlzLCBxdWVyeS5hcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2VxdWVuY2U7XG4gIH0gIFxuXG59KVxuXG5mdW5jdGlvbiBidWlsZFRhYmxlKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhYmxlTmFtZSwgZm4pIHtcbiAgICB2YXIgYnVpbGRlciA9IHRoaXMuY2xpZW50LnRhYmxlQnVpbGRlcih0eXBlLCB0YWJsZU5hbWUsIGZuKTtcbiAgICB2YXIgc3FsO1xuXG4gICAgYnVpbGRlci5zZXRTY2hlbWEodGhpcy5zY2hlbWEpO1xuICAgIHNxbCA9IGJ1aWxkZXIudG9TUUwoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gc3FsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5zZXF1ZW5jZS5wdXNoKHNxbFtpXSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwcmVmaXhlZFRhYmxlTmFtZShwcmVmaXgsIHRhYmxlKSB7XG4gIHJldHVybiBwcmVmaXggPyBgJHtwcmVmaXh9LiR7dGFibGV9YCA6IHRhYmxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNjaGVtYUNvbXBpbGVyO1xuIl19