'use strict';

var _ = require('lodash');

// The chainable interface off the original "column" method.
function ColumnBuilder(client, tableBuilder, type, args) {
  this.client = client;
  this._single = {};
  this._modifiers = {};
  this._statements = [];
  this._type = columnAlias[type] || type;
  this._args = args;
  this._tableBuilder = tableBuilder;

  // If we're altering the table, extend the object
  // with the available "alter" methods.
  if (tableBuilder._method === 'alter') {
    _.extend(this, AlterMethods);
  }
}

// All of the modifier methods that can be used to modify the current query.
var modifiers = ['default', 'defaultsTo', 'defaultTo', 'unsigned', 'nullable', 'notNull', 'notNullable', 'first', 'after', 'comment'];

// If we call any of the modifiers (index or otherwise) on the chainable, we pretend
// as though we're calling `table.method(column)` directly.
_.each(modifiers, function (method) {
  ColumnBuilder.prototype[method] = function () {
    if (aliasMethod[method]) {
      method = aliasMethod[method];
    }
    if (method === 'notNullable') return this.nullable(false);
    this._modifiers[method] = _.toArray(arguments);
    return this;
  };
});

_.each(['index', 'primary', 'unique'], function (method) {
  ColumnBuilder.prototype[method] = function () {
    if (this._type.toLowerCase().indexOf('increments') === -1) {
      this._tableBuilder[method].apply(this._tableBuilder, [this._args[0]].concat(_.toArray(arguments)));
    }
    return this;
  };
});

// Specify that the current column "references" a column,
// which may be tableName.column or just "column"
ColumnBuilder.prototype.references = function (value) {
  return this._tableBuilder.foreign.call(this._tableBuilder, this._args[0], this)._columnBuilder(this).references(value);
};

var AlterMethods = {};

// Specify that the column is to be dropped. This takes precedence
// over all other rules for the column.
AlterMethods.drop = function () {
  this._single.drop = true;
  return this;
};

// Specify the "type" that we're looking to set the
// Knex takes no responsibility for any data-loss that may
// occur when changing data types.
AlterMethods.alterType = function (type) {
  this._statements.push({
    grouping: 'alterType',
    value: type
  });
  return this;
};

// Aliases for convenience.
var aliasMethod = {
  'default': 'defaultTo',
  defaultsTo: 'defaultTo',
  notNull: 'notNullable'
};

// Alias a few methods for clarity when processing.
var columnAlias = {
  'float': 'floating',
  'enum': 'enu',
  'boolean': 'bool',
  'string': 'varchar',
  'bigint': 'bigInteger'
};

module.exports = ColumnBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvY29sdW1uYnVpbGRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7O0FBRzFCLFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtBQUN2RCxNQUFJLENBQUMsTUFBTSxHQUFVLE1BQU0sQ0FBQTtBQUMzQixNQUFJLENBQUMsT0FBTyxHQUFTLEVBQUUsQ0FBQztBQUN4QixNQUFJLENBQUMsVUFBVSxHQUFNLEVBQUUsQ0FBQztBQUN4QixNQUFJLENBQUMsV0FBVyxHQUFLLEVBQUUsQ0FBQztBQUN4QixNQUFJLENBQUMsS0FBSyxHQUFXLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDL0MsTUFBSSxDQUFDLEtBQUssR0FBVyxJQUFJLENBQUM7QUFDMUIsTUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7Ozs7QUFJbEMsTUFBSSxZQUFZLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtBQUNwQyxLQUFDLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztHQUM5QjtDQUNGOzs7QUFHRCxJQUFJLFNBQVMsR0FBRyxDQUNkLFNBQVMsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFDaEQsVUFBVSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQ3BDLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUM1QixDQUFDOzs7O0FBSUYsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDakMsZUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxZQUFXO0FBQzNDLFFBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ3ZCLFlBQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDOUI7QUFDRCxRQUFJLE1BQU0sS0FBSyxhQUFhLEVBQUUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFELFFBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQyxXQUFPLElBQUksQ0FBQztHQUNiLENBQUM7Q0FDSCxDQUFDLENBQUM7O0FBRUgsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdEQsZUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxZQUFXO0FBQzNDLFFBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDekQsVUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFDakQsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2pEO0FBQ0QsV0FBTyxJQUFJLENBQUM7R0FDYixDQUFDO0NBQ0gsQ0FBQyxDQUFDOzs7O0FBSUgsYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBUyxLQUFLLEVBQUU7QUFDbkQsU0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUM1RSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQ3BCLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN0QixDQUFDOztBQUVGLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQzs7OztBQUl0QixZQUFZLENBQUMsSUFBSSxHQUFHLFlBQVc7QUFDN0IsTUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLFNBQU8sSUFBSSxDQUFDO0NBQ2IsQ0FBQzs7Ozs7QUFLRixZQUFZLENBQUMsU0FBUyxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQ3RDLE1BQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0FBQ3BCLFlBQVEsRUFBRSxXQUFXO0FBQ3JCLFNBQUssRUFBRSxJQUFJO0dBQ1osQ0FBQyxDQUFDO0FBQ0gsU0FBTyxJQUFJLENBQUM7Q0FDYixDQUFDOzs7QUFHRixJQUFJLFdBQVcsR0FBRztBQUNoQixhQUFZLFdBQVc7QUFDdkIsWUFBVSxFQUFFLFdBQVc7QUFDdkIsU0FBTyxFQUFLLGFBQWE7Q0FDMUIsQ0FBQzs7O0FBR0YsSUFBSSxXQUFXLEdBQUc7QUFDaEIsU0FBTyxFQUFJLFVBQVU7QUFDckIsUUFBTSxFQUFLLEtBQUs7QUFDaEIsV0FBUyxFQUFFLE1BQU07QUFDakIsVUFBUSxFQUFHLFNBQVM7QUFDcEIsVUFBUSxFQUFHLFlBQVk7Q0FDeEIsQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyIsImZpbGUiOiJjb2x1bW5idWlsZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG4vLyBUaGUgY2hhaW5hYmxlIGludGVyZmFjZSBvZmYgdGhlIG9yaWdpbmFsIFwiY29sdW1uXCIgbWV0aG9kLlxuZnVuY3Rpb24gQ29sdW1uQnVpbGRlcihjbGllbnQsIHRhYmxlQnVpbGRlciwgdHlwZSwgYXJncykge1xuICB0aGlzLmNsaWVudCAgICAgICAgPSBjbGllbnRcbiAgdGhpcy5fc2luZ2xlICAgICAgID0ge307XG4gIHRoaXMuX21vZGlmaWVycyAgICA9IHt9O1xuICB0aGlzLl9zdGF0ZW1lbnRzICAgPSBbXTtcbiAgdGhpcy5fdHlwZSAgICAgICAgID0gY29sdW1uQWxpYXNbdHlwZV0gfHwgdHlwZTtcbiAgdGhpcy5fYXJncyAgICAgICAgID0gYXJncztcbiAgdGhpcy5fdGFibGVCdWlsZGVyID0gdGFibGVCdWlsZGVyO1xuXG4gIC8vIElmIHdlJ3JlIGFsdGVyaW5nIHRoZSB0YWJsZSwgZXh0ZW5kIHRoZSBvYmplY3RcbiAgLy8gd2l0aCB0aGUgYXZhaWxhYmxlIFwiYWx0ZXJcIiBtZXRob2RzLlxuICBpZiAodGFibGVCdWlsZGVyLl9tZXRob2QgPT09ICdhbHRlcicpIHtcbiAgICBfLmV4dGVuZCh0aGlzLCBBbHRlck1ldGhvZHMpO1xuICB9XG59XG5cbi8vIEFsbCBvZiB0aGUgbW9kaWZpZXIgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIHRvIG1vZGlmeSB0aGUgY3VycmVudCBxdWVyeS5cbnZhciBtb2RpZmllcnMgPSBbXG4gICdkZWZhdWx0JywgJ2RlZmF1bHRzVG8nLCAnZGVmYXVsdFRvJywgJ3Vuc2lnbmVkJyxcbiAgJ251bGxhYmxlJywgJ25vdE51bGwnLCAnbm90TnVsbGFibGUnLFxuICAnZmlyc3QnLCAnYWZ0ZXInLCAnY29tbWVudCdcbl07XG5cbi8vIElmIHdlIGNhbGwgYW55IG9mIHRoZSBtb2RpZmllcnMgKGluZGV4IG9yIG90aGVyd2lzZSkgb24gdGhlIGNoYWluYWJsZSwgd2UgcHJldGVuZFxuLy8gYXMgdGhvdWdoIHdlJ3JlIGNhbGxpbmcgYHRhYmxlLm1ldGhvZChjb2x1bW4pYCBkaXJlY3RseS5cbl8uZWFjaChtb2RpZmllcnMsIGZ1bmN0aW9uKG1ldGhvZCkge1xuICBDb2x1bW5CdWlsZGVyLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGFsaWFzTWV0aG9kW21ldGhvZF0pIHtcbiAgICAgIG1ldGhvZCA9IGFsaWFzTWV0aG9kW21ldGhvZF07XG4gICAgfVxuICAgIGlmIChtZXRob2QgPT09ICdub3ROdWxsYWJsZScpIHJldHVybiB0aGlzLm51bGxhYmxlKGZhbHNlKTtcbiAgICB0aGlzLl9tb2RpZmllcnNbbWV0aG9kXSA9IF8udG9BcnJheShhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cbl8uZWFjaChbJ2luZGV4JywgJ3ByaW1hcnknLCAndW5pcXVlJ10sIGZ1bmN0aW9uKG1ldGhvZCkge1xuICBDb2x1bW5CdWlsZGVyLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3R5cGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdpbmNyZW1lbnRzJykgPT09IC0xKSB7XG4gICAgICB0aGlzLl90YWJsZUJ1aWxkZXJbbWV0aG9kXS5hcHBseSh0aGlzLl90YWJsZUJ1aWxkZXIsXG4gICAgICAgIFt0aGlzLl9hcmdzWzBdXS5jb25jYXQoXy50b0FycmF5KGFyZ3VtZW50cykpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuLy8gU3BlY2lmeSB0aGF0IHRoZSBjdXJyZW50IGNvbHVtbiBcInJlZmVyZW5jZXNcIiBhIGNvbHVtbixcbi8vIHdoaWNoIG1heSBiZSB0YWJsZU5hbWUuY29sdW1uIG9yIGp1c3QgXCJjb2x1bW5cIlxuQ29sdW1uQnVpbGRlci5wcm90b3R5cGUucmVmZXJlbmNlcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl90YWJsZUJ1aWxkZXIuZm9yZWlnbi5jYWxsKHRoaXMuX3RhYmxlQnVpbGRlciwgdGhpcy5fYXJnc1swXSwgdGhpcylcbiAgICAuX2NvbHVtbkJ1aWxkZXIodGhpcylcbiAgICAucmVmZXJlbmNlcyh2YWx1ZSk7XG59O1xuXG52YXIgQWx0ZXJNZXRob2RzID0ge307XG5cbi8vIFNwZWNpZnkgdGhhdCB0aGUgY29sdW1uIGlzIHRvIGJlIGRyb3BwZWQuIFRoaXMgdGFrZXMgcHJlY2VkZW5jZVxuLy8gb3ZlciBhbGwgb3RoZXIgcnVsZXMgZm9yIHRoZSBjb2x1bW4uXG5BbHRlck1ldGhvZHMuZHJvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9zaW5nbGUuZHJvcCA9IHRydWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gU3BlY2lmeSB0aGUgXCJ0eXBlXCIgdGhhdCB3ZSdyZSBsb29raW5nIHRvIHNldCB0aGVcbi8vIEtuZXggdGFrZXMgbm8gcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYXRhLWxvc3MgdGhhdCBtYXlcbi8vIG9jY3VyIHdoZW4gY2hhbmdpbmcgZGF0YSB0eXBlcy5cbkFsdGVyTWV0aG9kcy5hbHRlclR5cGUgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHRoaXMuX3N0YXRlbWVudHMucHVzaCh7XG4gICAgZ3JvdXBpbmc6ICdhbHRlclR5cGUnLFxuICAgIHZhbHVlOiB0eXBlXG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIEFsaWFzZXMgZm9yIGNvbnZlbmllbmNlLlxudmFyIGFsaWFzTWV0aG9kID0ge1xuICBkZWZhdWx0OiAgICAnZGVmYXVsdFRvJyxcbiAgZGVmYXVsdHNUbzogJ2RlZmF1bHRUbycsXG4gIG5vdE51bGw6ICAgICdub3ROdWxsYWJsZSdcbn07XG5cbi8vIEFsaWFzIGEgZmV3IG1ldGhvZHMgZm9yIGNsYXJpdHkgd2hlbiBwcm9jZXNzaW5nLlxudmFyIGNvbHVtbkFsaWFzID0ge1xuICAnZmxvYXQnICA6ICdmbG9hdGluZycsXG4gICdlbnVtJyAgIDogJ2VudScsXG4gICdib29sZWFuJzogJ2Jvb2wnLFxuICAnc3RyaW5nJyA6ICd2YXJjaGFyJyxcbiAgJ2JpZ2ludCcgOiAnYmlnSW50ZWdlcidcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sdW1uQnVpbGRlcjtcbiJdfQ==